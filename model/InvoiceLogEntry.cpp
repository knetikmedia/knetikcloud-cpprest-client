/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "InvoiceLogEntry.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

InvoiceLogEntry::InvoiceLogEntry()
{
    m_date = 0;
    m_dateIsSet = false;
    m_Invoice_id = 0;
    m_Invoice_idIsSet = false;
    m_Message = U("");
    m_MessageIsSet = false;
    m_Type = U("");
    m_TypeIsSet = false;
    
}

InvoiceLogEntry::~InvoiceLogEntry()
{
}

void InvoiceLogEntry::validate()
{
    // TODO: implement validation
}

web::json::value InvoiceLogEntry::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_dateIsSet)
    {
        val[U("date")] = ModelBase::toJson(m_date);
    }
    if(m_Invoice_idIsSet)
    {
        val[U("invoice_id")] = ModelBase::toJson(m_Invoice_id);
    }
    if(m_MessageIsSet)
    {
        val[U("message")] = ModelBase::toJson(m_Message);
    }
    if(m_TypeIsSet)
    {
        val[U("type")] = ModelBase::toJson(m_Type);
    }
    

    return val;
}

void InvoiceLogEntry::fromJson(web::json::value& val)
{
    if(val.has_field(U("date")))
    {
        setDate(ModelBase::int64_tFromJson(val[U("date")]));
    }
    if(val.has_field(U("invoice_id")))
    {
        setInvoiceId(ModelBase::int32_tFromJson(val[U("invoice_id")]));
    }
    if(val.has_field(U("message")))
    {
        setMessage(ModelBase::stringFromJson(val[U("message")]));
        
    }
    if(val.has_field(U("type")))
    {
        setType(ModelBase::stringFromJson(val[U("type")]));
        
    }
    
}

void InvoiceLogEntry::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("date"), m_date));
    }
    if(m_Invoice_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("invoice_id"), m_Invoice_id));
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("message"), m_Message));
        
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("type"), m_Type));
        
    }
    
}

void InvoiceLogEntry::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("date")))
    {
        setDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("date"))));
    }
    if(multipart->hasContent(U("invoice_id")))
    {
        setInvoiceId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("invoice_id"))));
    }
    if(multipart->hasContent(U("message")))
    {
        setMessage(ModelBase::stringFromHttpContent(multipart->getContent(U("message"))));
        
    }
    if(multipart->hasContent(U("type")))
    {
        setType(ModelBase::stringFromHttpContent(multipart->getContent(U("type"))));
        
    }
    
}


int64_t InvoiceLogEntry::getDate() const
{
    return m_date;
}
void InvoiceLogEntry::setDate(int64_t value)
{
    m_date = value;
    m_dateIsSet = true;
}
bool InvoiceLogEntry::dateIsSet() const
{
    return m_dateIsSet;
}
void InvoiceLogEntry::unsetdate()
{
    m_dateIsSet = false;
}
int32_t InvoiceLogEntry::getInvoiceId() const
{
    return m_Invoice_id;
}
void InvoiceLogEntry::setInvoiceId(int32_t value)
{
    m_Invoice_id = value;
    m_Invoice_idIsSet = true;
}
bool InvoiceLogEntry::invoice_idIsSet() const
{
    return m_Invoice_idIsSet;
}
void InvoiceLogEntry::unsetInvoice_id()
{
    m_Invoice_idIsSet = false;
}
utility::string_t InvoiceLogEntry::getMessage() const
{
    return m_Message;
}
void InvoiceLogEntry::setMessage(utility::string_t value)
{
    m_Message = value;
    m_MessageIsSet = true;
}
bool InvoiceLogEntry::messageIsSet() const
{
    return m_MessageIsSet;
}
void InvoiceLogEntry::unsetMessage()
{
    m_MessageIsSet = false;
}
utility::string_t InvoiceLogEntry::getType() const
{
    return m_Type;
}
void InvoiceLogEntry::setType(utility::string_t value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool InvoiceLogEntry::typeIsSet() const
{
    return m_TypeIsSet;
}
void InvoiceLogEntry::unsetType()
{
    m_TypeIsSet = false;
}

}
}
}
}

