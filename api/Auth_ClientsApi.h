/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Auth_ClientsApi.h
 *
 * 
 */

#ifndef Auth_ClientsApi_H_
#define Auth_ClientsApi_H_


#include "ApiClient.h"

#include "ClientResource.h"
#include "GrantTypeResource.h"
#include "PageResource«ClientResource».h"
#include "Result.h"
#include <vector>
#include <cpprest/details/basic_types.h>

namespace com {
namespace knetikcloud {
namespace client {
namespace api {

using namespace com::knetikcloud::client::model;

class  Auth_ClientsApi
{
public:
    Auth_ClientsApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~Auth_ClientsApi();
    /// <summary>
    /// Create a new client
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; CLIENTS_ADMIN
    /// </remarks>
    /// <param name="clientResource">The client resource object (optional)</param>
    pplx::task<std::shared_ptr<ClientResource>> createClient(std::shared_ptr<ClientResource> clientResource);
    /// <summary>
    /// Delete a client
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; CLIENTS_ADMIN
    /// </remarks>
    /// <param name="clientKey">The key of the client</param>
    pplx::task<void> deleteClient(utility::string_t clientKey);
    /// <summary>
    /// Get a single client
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; CLIENTS_ADMIN
    /// </remarks>
    /// <param name="clientKey">The key of the client</param>
    pplx::task<std::shared_ptr<ClientResource>> getClient(utility::string_t clientKey);
    /// <summary>
    /// List available client grant types
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; CLIENTS_ADMIN
    /// </remarks>
    
    pplx::task<std::vector<std::shared_ptr<GrantTypeResource>>> getClientGrantTypes();
    /// <summary>
    /// List and search clients
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; CLIENTS_ADMIN
    /// </remarks>
    /// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
    pplx::task<std::shared_ptr<PageResource«ClientResource»>> getClients(int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// Set grant types for a client
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; CLIENTS_ADMIN
    /// </remarks>
    /// <param name="clientKey">The key of the client</param>/// <param name="grantList">A list of unique grant types (optional)</param>
    pplx::task<void> setClientGrantTypes(utility::string_t clientKey, std::vector<utility::string_t> grantList);
    /// <summary>
    /// Set redirect uris for a client
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; CLIENTS_ADMIN
    /// </remarks>
    /// <param name="clientKey">The key of the client</param>/// <param name="redirectList">A list of unique redirect uris (optional)</param>
    pplx::task<void> setClientRedirectUris(utility::string_t clientKey, std::vector<utility::string_t> redirectList);
    /// <summary>
    /// Update a client
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; CLIENTS_ADMIN
    /// </remarks>
    /// <param name="clientKey">The key of the client</param>/// <param name="clientResource">The client resource object (optional)</param>
    pplx::task<std::shared_ptr<ClientResource>> updateClient(utility::string_t clientKey, std::shared_ptr<ClientResource> clientResource);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* Auth_ClientsApi_H_ */

