/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * UserAchievementResource.h
 *
 * 
 */

#ifndef UserAchievementResource_H_
#define UserAchievementResource_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  UserAchievementResource
    : public ModelBase
{
public:
    UserAchievementResource();
    virtual ~UserAchievementResource();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UserAchievementResource members

    /// <summary>
    /// Flag indicating whether the user has earned the achievement
    /// </summary>
    bool getAchieved() const;
    void setAchieved(bool value);
    bool achievedIsSet() const;
    void unsetAchieved();
    /// <summary>
    /// The achievement being tracked.  If used for Leveling, this represents the tier name
    /// </summary>
    utility::string_t getAchievementName() const;
    void setAchievementName(utility::string_t value);
        /// <summary>
    /// The date/time this resource was created in seconds since unix epoch
    /// </summary>
    int64_t getCreatedDate() const;
    void setCreatedDate(int64_t value);
    bool created_dateIsSet() const;
    void unsetCreated_date();
    /// <summary>
    /// The date/time the achievement was earned as a unix timestamp in seconds
    /// </summary>
    int64_t getEarnedDate() const;
    void setEarnedDate(int64_t value);
    bool earned_dateIsSet() const;
    void unsetEarned_date();
    /// <summary>
    /// The date/time this resource was last updated in seconds since unix epoch
    /// </summary>
    int64_t getUpdatedDate() const;
    void setUpdatedDate(int64_t value);
    bool updated_dateIsSet() const;
    void unsetUpdated_date();

protected:
    bool m_Achieved;
    bool m_AchievedIsSet;
utility::string_t m_Achievement_name;
    int64_t m_Created_date;
    bool m_Created_dateIsSet;
int64_t m_Earned_date;
    bool m_Earned_dateIsSet;
int64_t m_Updated_date;
    bool m_Updated_dateIsSet;
};

}
}
}
}

#endif /* UserAchievementResource_H_ */
