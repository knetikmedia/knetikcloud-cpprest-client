/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "MongoDatabaseConfig.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

MongoDatabaseConfig::MongoDatabaseConfig()
{
    m_Db_name = U("");
    m_Db_nameIsSet = false;
    m_Options = U("");
    m_OptionsIsSet = false;
    m_Password = U("");
    m_PasswordIsSet = false;
    m_Servers = U("");
    m_ServersIsSet = false;
    m_Username = U("");
    m_UsernameIsSet = false;
    
}

MongoDatabaseConfig::~MongoDatabaseConfig()
{
}

void MongoDatabaseConfig::validate()
{
    // TODO: implement validation
}

web::json::value MongoDatabaseConfig::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Db_nameIsSet)
    {
        val[U("db_name")] = ModelBase::toJson(m_Db_name);
    }
    if(m_OptionsIsSet)
    {
        val[U("options")] = ModelBase::toJson(m_Options);
    }
    if(m_PasswordIsSet)
    {
        val[U("password")] = ModelBase::toJson(m_Password);
    }
    if(m_ServersIsSet)
    {
        val[U("servers")] = ModelBase::toJson(m_Servers);
    }
    if(m_UsernameIsSet)
    {
        val[U("username")] = ModelBase::toJson(m_Username);
    }
    

    return val;
}

void MongoDatabaseConfig::fromJson(web::json::value& val)
{
    if(val.has_field(U("db_name")))
    {
        setDbName(ModelBase::stringFromJson(val[U("db_name")]));
        
    }
    if(val.has_field(U("options")))
    {
        setOptions(ModelBase::stringFromJson(val[U("options")]));
        
    }
    if(val.has_field(U("password")))
    {
        setPassword(ModelBase::stringFromJson(val[U("password")]));
        
    }
    if(val.has_field(U("servers")))
    {
        setServers(ModelBase::stringFromJson(val[U("servers")]));
        
    }
    if(val.has_field(U("username")))
    {
        setUsername(ModelBase::stringFromJson(val[U("username")]));
        
    }
    
}

void MongoDatabaseConfig::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Db_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("db_name"), m_Db_name));
        
    }
    if(m_OptionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("options"), m_Options));
        
    }
    if(m_PasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("password"), m_Password));
        
    }
    if(m_ServersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("servers"), m_Servers));
        
    }
    if(m_UsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("username"), m_Username));
        
    }
    
}

void MongoDatabaseConfig::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("db_name")))
    {
        setDbName(ModelBase::stringFromHttpContent(multipart->getContent(U("db_name"))));
        
    }
    if(multipart->hasContent(U("options")))
    {
        setOptions(ModelBase::stringFromHttpContent(multipart->getContent(U("options"))));
        
    }
    if(multipart->hasContent(U("password")))
    {
        setPassword(ModelBase::stringFromHttpContent(multipart->getContent(U("password"))));
        
    }
    if(multipart->hasContent(U("servers")))
    {
        setServers(ModelBase::stringFromHttpContent(multipart->getContent(U("servers"))));
        
    }
    if(multipart->hasContent(U("username")))
    {
        setUsername(ModelBase::stringFromHttpContent(multipart->getContent(U("username"))));
        
    }
    
}


utility::string_t MongoDatabaseConfig::getDbName() const
{
    return m_Db_name;
}
void MongoDatabaseConfig::setDbName(utility::string_t value)
{
    m_Db_name = value;
    m_Db_nameIsSet = true;
}
bool MongoDatabaseConfig::db_nameIsSet() const
{
    return m_Db_nameIsSet;
}
void MongoDatabaseConfig::unsetDb_name()
{
    m_Db_nameIsSet = false;
}
utility::string_t MongoDatabaseConfig::getOptions() const
{
    return m_Options;
}
void MongoDatabaseConfig::setOptions(utility::string_t value)
{
    m_Options = value;
    m_OptionsIsSet = true;
}
bool MongoDatabaseConfig::optionsIsSet() const
{
    return m_OptionsIsSet;
}
void MongoDatabaseConfig::unsetOptions()
{
    m_OptionsIsSet = false;
}
utility::string_t MongoDatabaseConfig::getPassword() const
{
    return m_Password;
}
void MongoDatabaseConfig::setPassword(utility::string_t value)
{
    m_Password = value;
    m_PasswordIsSet = true;
}
bool MongoDatabaseConfig::passwordIsSet() const
{
    return m_PasswordIsSet;
}
void MongoDatabaseConfig::unsetPassword()
{
    m_PasswordIsSet = false;
}
utility::string_t MongoDatabaseConfig::getServers() const
{
    return m_Servers;
}
void MongoDatabaseConfig::setServers(utility::string_t value)
{
    m_Servers = value;
    m_ServersIsSet = true;
}
bool MongoDatabaseConfig::serversIsSet() const
{
    return m_ServersIsSet;
}
void MongoDatabaseConfig::unsetServers()
{
    m_ServersIsSet = false;
}
utility::string_t MongoDatabaseConfig::getUsername() const
{
    return m_Username;
}
void MongoDatabaseConfig::setUsername(utility::string_t value)
{
    m_Username = value;
    m_UsernameIsSet = true;
}
bool MongoDatabaseConfig::usernameIsSet() const
{
    return m_UsernameIsSet;
}
void MongoDatabaseConfig::unsetUsername()
{
    m_UsernameIsSet = false;
}

}
}
}
}

