/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * CouponDefinition.h
 *
 * 
 */

#ifndef CouponDefinition_H_
#define CouponDefinition_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  CouponDefinition
    : public ModelBase
{
public:
    CouponDefinition();
    virtual ~CouponDefinition();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CouponDefinition members

    /// <summary>
    /// A unique identifier for the discount. Can be used to remove the discount, and uniqueness within the cart will be enforced.
    /// </summary>
    utility::string_t getCode() const;
    void setCode(utility::string_t value);
        /// <summary>
    /// A description for the discount.
    /// </summary>
    utility::string_t getDescription() const;
    void setDescription(utility::string_t value);
    bool descriptionIsSet() const;
    void unsetDescription();
    /// <summary>
    /// The type of discount in terms of how it deducts price.
    /// </summary>
    utility::string_t getDiscountType() const;
    void setDiscountType(utility::string_t value);
        /// <summary>
    /// Whether this discount is exclusive and cannot be used in conjunction with other discounts/coupons. default&#x3D;false
    /// </summary>
    bool getExclusive() const;
    void setExclusive(bool value);
    bool exclusiveIsSet() const;
    void unsetExclusive();
    /// <summary>
    /// For coupon_cart, a minimum total price that the cart must meet to be valid.
    /// </summary>
    double getMaxDiscount() const;
    void setMaxDiscount(double value);
    bool max_discountIsSet() const;
    void unsetMax_discount();
    /// <summary>
    /// The maximum number of items to count this discount for (not for cart_coupon).
    /// </summary>
    int32_t getMaxQuantity() const;
    void setMaxQuantity(int32_t value);
    bool max_quantityIsSet() const;
    void unsetMax_quantity();
    /// <summary>
    /// For coupon_cart, a minimum total price that the cart must meet to be valid.
    /// </summary>
    double getMinCartTotal() const;
    void setMinCartTotal(double value);
    bool min_cart_totalIsSet() const;
    void unsetMin_cart_total();
    /// <summary>
    /// A name for the discount.
    /// </summary>
    utility::string_t getName() const;
    void setName(utility::string_t value);
        /// <summary>
    /// Whether this coupon is exclusive to itself or not (true means cannot add two of this same coupon to the same cart).  Default &#x3D; false
    /// </summary>
    bool getSelfExclusive() const;
    void setSelfExclusive(bool value);
    bool self_exclusiveIsSet() const;
    void unsetSelf_exclusive();
    /// <summary>
    /// The id of the item this discount applies to, which must be present in the cart. Applies if coupon_type_hint is coupon_single_item or coupon_voucher.
    /// </summary>
    int32_t getTargetItemId() const;
    void setTargetItemId(int32_t value);
    bool target_item_idIsSet() const;
    void unsetTarget_item_id();
    /// <summary>
    /// The type of discount in terms of what it applies to. coupon_cart applies to the cart as a whole, other types apply to specific items based on different criteria.
    /// </summary>
    utility::string_t getType() const;
    void setType(utility::string_t value);
        /// <summary>
    /// A unique identifier string for the discount.
    /// </summary>
    utility::string_t getUniqueKey() const;
    void setUniqueKey(utility::string_t value);
        /// <summary>
    /// Which tags this applies for (item must have at least one of them), if coupon_type is coupon_tag.
    /// </summary>
    std::vector<utility::string_t>& getValidForTags();
    bool valid_for_tagsIsSet() const;
    void unsetValid_for_tags();
    /// <summary>
    /// The amount of the discount. If discount_type is value then this is the raw currency amount to remove. If discount_type is percentage then this will be multiplied by the cart total or item price to get the discount amount (0.5 is half price).
    /// </summary>
    double getValue() const;
    void setValue(double value);
        /// <summary>
    /// Which vendor this applies for, if coupon_type is coupon_vendor.
    /// </summary>
    int32_t getVendorId() const;
    void setVendorId(int32_t value);
    bool vendor_idIsSet() const;
    void unsetVendor_id();

protected:
    utility::string_t m_Code;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
utility::string_t m_Discount_type;
    bool m_Exclusive;
    bool m_ExclusiveIsSet;
double m_Max_discount;
    bool m_Max_discountIsSet;
int32_t m_Max_quantity;
    bool m_Max_quantityIsSet;
double m_Min_cart_total;
    bool m_Min_cart_totalIsSet;
utility::string_t m_Name;
    bool m_Self_exclusive;
    bool m_Self_exclusiveIsSet;
int32_t m_Target_item_id;
    bool m_Target_item_idIsSet;
utility::string_t m_Type;
    utility::string_t m_Unique_key;
    std::vector<utility::string_t> m_Valid_for_tags;
    bool m_Valid_for_tagsIsSet;
double m_Value;
    int32_t m_Vendor_id;
    bool m_Vendor_idIsSet;
};

}
}
}
}

#endif /* CouponDefinition_H_ */
