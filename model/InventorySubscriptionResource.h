/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * InventorySubscriptionResource.h
 *
 * 
 */

#ifndef InventorySubscriptionResource_H_
#define InventorySubscriptionResource_H_


#include "ModelBase.h"

#include "SubscriptionCreditResource.h"
#include "PaymentMethodResource.h"
#include <cpprest/details/basic_types.h>
#include "SimpleUserResource.h"
#include <vector>

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  InventorySubscriptionResource
    : public ModelBase
{
public:
    InventorySubscriptionResource();
    virtual ~InventorySubscriptionResource();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// InventorySubscriptionResource members

    /// <summary>
    /// The date the subscription will be billed
    /// </summary>
    int64_t getBillDate() const;
    bool billDateIsSet() const;
    void unsetBill_date();
    void setBillDate(int64_t value);
    /// <summary>
    /// A credit of money already applied to a subscription for the next bill, or a debt if negative
    /// </summary>
    double getCredit() const;
    bool creditIsSet() const;
    void unsetCredit();
    void setCredit(double value);
    /// <summary>
    /// A record of past and present credit/debt changes
    /// </summary>
    std::vector<std::shared_ptr<SubscriptionCreditResource>>& getCreditLog();
    bool creditLogIsSet() const;
    void unsetCredit_log();
    void setCreditLog(std::vector<std::shared_ptr<SubscriptionCreditResource>> value);
    /// <summary>
    /// The date the grace period ends
    /// </summary>
    int64_t getGraceEnd() const;
    bool graceEndIsSet() const;
    void unsetGrace_end();
    void setGraceEnd(int64_t value);
    /// <summary>
    /// The id of the inventory
    /// </summary>
    int32_t getInventoryId() const;
    bool inventoryIdIsSet() const;
    void unsetInventory_id();
    void setInventoryId(int32_t value);
    /// <summary>
    /// The inventory status object
    /// </summary>
    utility::string_t getInventoryStatus() const;
    bool inventoryStatusIsSet() const;
    void unsetInventory_status();
    void setInventoryStatus(utility::string_t value);
    /// <summary>
    /// The id of the item
    /// </summary>
    int32_t getItemId() const;
    bool itemIdIsSet() const;
    void unsetItem_id();
    void setItemId(int32_t value);
    /// <summary>
    /// The payment method object
    /// </summary>
    std::shared_ptr<PaymentMethodResource> getPaymentMethod() const;
    bool paymentMethodIsSet() const;
    void unsetPayment_method();
    void setPaymentMethod(std::shared_ptr<PaymentMethodResource> value);
    /// <summary>
    /// The recurring price that has been set to override the base price. Null if not overriding
    /// </summary>
    double getPriceOverride() const;
    bool priceOverrideIsSet() const;
    void unsetPrice_override();
    void setPriceOverride(double value);
    /// <summary>
    /// An explanation for the reason the price is being overridden
    /// </summary>
    utility::string_t getPriceOverrideReason() const;
    bool priceOverrideReasonIsSet() const;
    void unsetPrice_override_reason();
    void setPriceOverrideReason(utility::string_t value);
    /// <summary>
    /// The default recurring price
    /// </summary>
    double getRecurringPrice() const;
    bool recurringPriceIsSet() const;
    void unsetRecurring_price();
    void setRecurringPrice(double value);
    /// <summary>
    /// The recurring sku of the subscription
    /// </summary>
    utility::string_t getSku() const;
    bool skuIsSet() const;
    void unsetSku();
    void setSku(utility::string_t value);
    /// <summary>
    /// The date the subscription will start
    /// </summary>
    int64_t getStartDate() const;
    bool startDateIsSet() const;
    void unsetStart_date();
    void setStartDate(int64_t value);
    /// <summary>
    /// The status of the subscription
    /// </summary>
    int32_t getSubscriptionStatus() const;
    bool subscriptionStatusIsSet() const;
    void unsetSubscription_status();
    void setSubscriptionStatus(int32_t value);
    /// <summary>
    /// The user
    /// </summary>
    std::shared_ptr<SimpleUserResource> getUser() const;
    bool userIsSet() const;
    void unsetUser();
    void setUser(std::shared_ptr<SimpleUserResource> value);

protected:
    int64_t m_Bill_date;
    bool m_Bill_dateIsSet;
    double m_Credit;
    bool m_CreditIsSet;
    std::vector<std::shared_ptr<SubscriptionCreditResource>> m_Credit_log;
    bool m_Credit_logIsSet;
    int64_t m_Grace_end;
    bool m_Grace_endIsSet;
    int32_t m_Inventory_id;
    bool m_Inventory_idIsSet;
    utility::string_t m_Inventory_status;
    bool m_Inventory_statusIsSet;
    int32_t m_Item_id;
    bool m_Item_idIsSet;
    std::shared_ptr<PaymentMethodResource> m_Payment_method;
    bool m_Payment_methodIsSet;
    double m_Price_override;
    bool m_Price_overrideIsSet;
    utility::string_t m_Price_override_reason;
    bool m_Price_override_reasonIsSet;
    double m_Recurring_price;
    bool m_Recurring_priceIsSet;
    utility::string_t m_Sku;
    bool m_SkuIsSet;
    int64_t m_Start_date;
    bool m_Start_dateIsSet;
    int32_t m_Subscription_status;
    bool m_Subscription_statusIsSet;
    std::shared_ptr<SimpleUserResource> m_User;
    bool m_UserIsSet;
};

}
}
}
}

#endif /* InventorySubscriptionResource_H_ */
