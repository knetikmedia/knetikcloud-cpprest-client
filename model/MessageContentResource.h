/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * MessageContentResource.h
 *
 * 
 */

#ifndef MessageContentResource_H_
#define MessageContentResource_H_


#include "ModelBase.h"

#include "TemplatedEmail.h"
#include <cpprest/details/basic_types.h>
#include "Object.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  MessageContentResource
    : public ModelBase
{
public:
    MessageContentResource();
    virtual ~MessageContentResource();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// MessageContentResource members

    /// <summary>
    /// The content of the email
    /// </summary>
    utility::string_t getEmail() const;
    bool emailIsSet() const;
    void unsetEmail();
    void setEmail(utility::string_t value);
    /// <summary>
    /// The content of the mobile app push notification
    /// </summary>
    utility::string_t getPush() const;
    bool pushIsSet() const;
    void unsetPush();
    void setPush(utility::string_t value);
    /// <summary>
    /// The content of the sms
    /// </summary>
    utility::string_t getSms() const;
    bool smsIsSet() const;
    void unsetSms();
    void setSms(utility::string_t value);
    /// <summary>
    /// The content of the templated email
    /// </summary>
    std::shared_ptr<TemplatedEmail> getTemplatedEmail() const;
    bool templatedEmailIsSet() const;
    void unsetTemplated_email();
    void setTemplatedEmail(std::shared_ptr<TemplatedEmail> value);
    /// <summary>
    /// The content of the websocket message
    /// </summary>
    std::shared_ptr<Object> getWebsocket() const;
    bool websocketIsSet() const;
    void unsetWebsocket();
    void setWebsocket(std::shared_ptr<Object> value);

protected:
    utility::string_t m_Email;
    bool m_EmailIsSet;
    utility::string_t m_Push;
    bool m_PushIsSet;
    utility::string_t m_Sms;
    bool m_SmsIsSet;
    std::shared_ptr<TemplatedEmail> m_Templated_email;
    bool m_Templated_emailIsSet;
    std::shared_ptr<Object> m_Websocket;
    bool m_WebsocketIsSet;
};

}
}
}
}

#endif /* MessageContentResource_H_ */
