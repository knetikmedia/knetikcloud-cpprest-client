/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "RoleResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

RoleResource::RoleResource()
{
    m_Client_count = 0;
    m_Client_countIsSet = false;
    m_Created_date = 0L;
    m_Created_dateIsSet = false;
    m_Locked = false;
    m_LockedIsSet = false;
    m_Name = U("");
    m_Role = U("");
    m_Role_permissionIsSet = false;
    m_User_count = 0;
    m_User_countIsSet = false;
}

RoleResource::~RoleResource()
{
}

void RoleResource::validate()
{
    // TODO: implement validation
}

web::json::value RoleResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Client_countIsSet)
    {
        val[U("client_count")] = ModelBase::toJson(m_Client_count);
    }
    if(m_Created_dateIsSet)
    {
        val[U("created_date")] = ModelBase::toJson(m_Created_date);
    }
    if(m_LockedIsSet)
    {
        val[U("locked")] = ModelBase::toJson(m_Locked);
    }
    val[U("name")] = ModelBase::toJson(m_Name);
    val[U("role")] = ModelBase::toJson(m_Role);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Role_permission )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("role_permission")] = web::json::value::array(jsonArray);
        }
    }
    if(m_User_countIsSet)
    {
        val[U("user_count")] = ModelBase::toJson(m_User_count);
    }

    return val;
}

void RoleResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("client_count")))
    {
        setClientCount(ModelBase::int32_tFromJson(val[U("client_count")]));
    }
    if(val.has_field(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromJson(val[U("created_date")]));
    }
    if(val.has_field(U("locked")))
    {
        setLocked(ModelBase::boolFromJson(val[U("locked")]));
    }
    setName(ModelBase::stringFromJson(val[U("name")]));
    setRole(ModelBase::stringFromJson(val[U("role")]));
    {
        m_Role_permission.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("role_permission")))
        {
        for( auto& item : val[U("role_permission")].as_array() )
        {
            if(item.is_null())
            {
                m_Role_permission.push_back( std::shared_ptr<PermissionResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<PermissionResource> newItem(new PermissionResource());
                newItem->fromJson(item);
                m_Role_permission.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(U("user_count")))
    {
        setUserCount(ModelBase::int32_tFromJson(val[U("user_count")]));
    }
}

void RoleResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Client_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("client_count"), m_Client_count));
    }
    if(m_Created_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("created_date"), m_Created_date));
    }
    if(m_LockedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("locked"), m_Locked));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("role"), m_Role));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Role_permission )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("role_permission"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_User_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("user_count"), m_User_count));
    }
}

void RoleResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("client_count")))
    {
        setClientCount(ModelBase::int32_tFromHttpContent(multipart->getContent(U("client_count"))));
    }
    if(multipart->hasContent(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("created_date"))));
    }
    if(multipart->hasContent(U("locked")))
    {
        setLocked(ModelBase::boolFromHttpContent(multipart->getContent(U("locked"))));
    }
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    setRole(ModelBase::stringFromHttpContent(multipart->getContent(U("role"))));
    {
        m_Role_permission.clear();
        if(multipart->hasContent(U("role_permission")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("role_permission"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Role_permission.push_back( std::shared_ptr<PermissionResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<PermissionResource> newItem(new PermissionResource());
                newItem->fromJson(item);
                m_Role_permission.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(U("user_count")))
    {
        setUserCount(ModelBase::int32_tFromHttpContent(multipart->getContent(U("user_count"))));
    }
}

int32_t RoleResource::getClientCount() const
{
    return m_Client_count;
}


void RoleResource::setClientCount(int32_t value)
{
    m_Client_count = value;
    m_Client_countIsSet = true;
}
bool RoleResource::clientCountIsSet() const
{
    return m_Client_countIsSet;
}

void RoleResource::unsetClient_count()
{
    m_Client_countIsSet = false;
}

int64_t RoleResource::getCreatedDate() const
{
    return m_Created_date;
}


void RoleResource::setCreatedDate(int64_t value)
{
    m_Created_date = value;
    m_Created_dateIsSet = true;
}
bool RoleResource::createdDateIsSet() const
{
    return m_Created_dateIsSet;
}

void RoleResource::unsetCreated_date()
{
    m_Created_dateIsSet = false;
}

bool RoleResource::getLocked() const
{
    return m_Locked;
}


void RoleResource::setLocked(bool value)
{
    m_Locked = value;
    m_LockedIsSet = true;
}
bool RoleResource::lockedIsSet() const
{
    return m_LockedIsSet;
}

void RoleResource::unsetLocked()
{
    m_LockedIsSet = false;
}

utility::string_t RoleResource::getName() const
{
    return m_Name;
}


void RoleResource::setName(utility::string_t value)
{
    m_Name = value;
    
}
utility::string_t RoleResource::getRole() const
{
    return m_Role;
}


void RoleResource::setRole(utility::string_t value)
{
    m_Role = value;
    
}
std::vector<std::shared_ptr<PermissionResource>>& RoleResource::getRolePermission()
{
    return m_Role_permission;
}

void RoleResource::setRolePermission(std::vector<std::shared_ptr<PermissionResource>> value)
{
    m_Role_permission = value;
    m_Role_permissionIsSet = true;
}
bool RoleResource::rolePermissionIsSet() const
{
    return m_Role_permissionIsSet;
}

void RoleResource::unsetRole_permission()
{
    m_Role_permissionIsSet = false;
}

int32_t RoleResource::getUserCount() const
{
    return m_User_count;
}


void RoleResource::setUserCount(int32_t value)
{
    m_User_count = value;
    m_User_countIsSet = true;
}
bool RoleResource::userCountIsSet() const
{
    return m_User_countIsSet;
}

void RoleResource::unsetUser_count()
{
    m_User_countIsSet = false;
}

}
}
}
}

