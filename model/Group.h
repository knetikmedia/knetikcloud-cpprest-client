/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Group.h
 *
 * 
 */

#ifndef Group_H_
#define Group_H_


#include "ModelBase.h"

#include "Group.h"
#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>
#include "Property.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Group
    : public ModelBase
{
public:
    Group();
    virtual ~Group();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Group members

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<Property>>& getAdditionalProperties();
    bool additional_propertiesIsSet() const;
    void unsetAdditional_properties();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    void setDescription(utility::string_t value);
    bool descriptionIsSet() const;
    void unsetDescription();
    /// <summary>
    /// 
    /// </summary>
    int32_t getId() const;
    void setId(int32_t value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// 
    /// </summary>
    int32_t getMemberCount() const;
    void setMemberCount(int32_t value);
    bool member_countIsSet() const;
    void unsetMember_count();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMessageOfTheDay() const;
    void setMessageOfTheDay(utility::string_t value);
    bool message_of_the_dayIsSet() const;
    void unsetMessage_of_the_day();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    void setName(utility::string_t value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Group> getParent() const;
    void setParent(std::shared_ptr<Group> value);
    bool parentIsSet() const;
    void unsetParent();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPropertiesString() const;
    void setPropertiesString(utility::string_t value);
    bool properties_stringIsSet() const;
    void unsetProperties_string();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getStatus() const;
    void setStatus(utility::string_t value);
    bool statusIsSet() const;
    void unsetStatus();
    /// <summary>
    /// 
    /// </summary>
    int32_t getSubMemberCount() const;
    void setSubMemberCount(int32_t value);
    bool sub_member_countIsSet() const;
    void unsetSub_member_count();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTemplate() const;
    void setTemplate(utility::string_t value);
    bool templateIsSet() const;
    void unsetTemplate();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUniqueName() const;
    void setUniqueName(utility::string_t value);
    bool unique_nameIsSet() const;
    void unsetUnique_name();

protected:
    std::map<utility::string_t, std::shared_ptr<Property>> m_Additional_properties;
    bool m_Additional_propertiesIsSet;
utility::string_t m_Description;
    bool m_DescriptionIsSet;
int32_t m_Id;
    bool m_IdIsSet;
int32_t m_Member_count;
    bool m_Member_countIsSet;
utility::string_t m_Message_of_the_day;
    bool m_Message_of_the_dayIsSet;
utility::string_t m_Name;
    bool m_NameIsSet;
std::shared_ptr<Group> m_Parent;
    bool m_ParentIsSet;
utility::string_t m_Properties_string;
    bool m_Properties_stringIsSet;
utility::string_t m_Status;
    bool m_StatusIsSet;
int32_t m_Sub_member_count;
    bool m_Sub_member_countIsSet;
utility::string_t m_Template;
    bool m_TemplateIsSet;
utility::string_t m_Unique_name;
    bool m_Unique_nameIsSet;
};

}
}
}
}

#endif /* Group_H_ */
