/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SearchReferenceMapping.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

SearchReferenceMapping::SearchReferenceMapping()
{
    m_Id = U("");
    m_Ref_id_field = U("");
    m_Ref_type = U("");
    m_Type = U("");
    
}

SearchReferenceMapping::~SearchReferenceMapping()
{
}

void SearchReferenceMapping::validate()
{
    // TODO: implement validation
}

web::json::value SearchReferenceMapping::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("id")] = ModelBase::toJson(m_Id);
    val[U("ref_id_field")] = ModelBase::toJson(m_Ref_id_field);
    val[U("ref_type")] = ModelBase::toJson(m_Ref_type);
    val[U("source_field_to_destination_field")] = ModelBase::toJson(m_Source_field_to_destination_field);
    val[U("type")] = ModelBase::toJson(m_Type);
    

    return val;
}

void SearchReferenceMapping::fromJson(web::json::value& val)
{
    setId(ModelBase::stringFromJson(val[U("id")]));
    setRefIdField(ModelBase::stringFromJson(val[U("ref_id_field")]));
    setRefType(ModelBase::stringFromJson(val[U("ref_type")]));
    std::map<utility::string_t, utility::string_t> newSource_field_to_destination_field(std::map<utility::string_t, utility::string_t>());
    newSource_field_to_destination_field->fromJson(val[U("source_field_to_destination_field")]);
    setSourceFieldToDestinationField( newItem );
    setType(ModelBase::stringFromJson(val[U("type")]));
    
}

void SearchReferenceMapping::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("ref_id_field"), m_Ref_id_field));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("ref_type"), m_Ref_type));
    m_Source_field_to_destination_field->toMultipart(multipart, U("source_field_to_destination_field."));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("type"), m_Type));
    
}

void SearchReferenceMapping::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setId(ModelBase::stringFromHttpContent(multipart->getContent(U("id"))));
    setRefIdField(ModelBase::stringFromHttpContent(multipart->getContent(U("ref_id_field"))));
    setRefType(ModelBase::stringFromHttpContent(multipart->getContent(U("ref_type"))));
    std::map<utility::string_t, utility::string_t> newSource_field_to_destination_field(std::map<utility::string_t, utility::string_t>());
    newSource_field_to_destination_field->fromMultiPart(multipart, U("source_field_to_destination_field."));
    setSourceFieldToDestinationField( newSource_field_to_destination_field );
    setType(ModelBase::stringFromHttpContent(multipart->getContent(U("type"))));
    
}


utility::string_t SearchReferenceMapping::getId() const
{
    return m_Id;
}
void SearchReferenceMapping::setId(utility::string_t value)
{
    m_Id = value;
    
}
utility::string_t SearchReferenceMapping::getRefIdField() const
{
    return m_Ref_id_field;
}
void SearchReferenceMapping::setRefIdField(utility::string_t value)
{
    m_Ref_id_field = value;
    
}
utility::string_t SearchReferenceMapping::getRefType() const
{
    return m_Ref_type;
}
void SearchReferenceMapping::setRefType(utility::string_t value)
{
    m_Ref_type = value;
    
}
std::map<utility::string_t, utility::string_t>& SearchReferenceMapping::getSourceFieldToDestinationField()
{
    return m_Source_field_to_destination_field;
}
utility::string_t SearchReferenceMapping::getType() const
{
    return m_Type;
}
void SearchReferenceMapping::setType(utility::string_t value)
{
    m_Type = value;
    
}

}
}
}
}

