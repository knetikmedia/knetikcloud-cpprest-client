/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ImportJobResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

ImportJobResource::ImportJobResource()
{
    m_Category_id = U("");
    m_Created_date = 0L;
    m_Created_dateIsSet = false;
    m_Id = 0L;
    m_IdIsSet = false;
    m_Name = U("");
    m_OutputIsSet = false;
    m_Record_count = 0L;
    m_Record_countIsSet = false;
    m_Status = U("");
    m_StatusIsSet = false;
    m_Updated_date = 0L;
    m_Updated_dateIsSet = false;
    m_Url = U("");
    m_Vendor = U("");
}

ImportJobResource::~ImportJobResource()
{
}

void ImportJobResource::validate()
{
    // TODO: implement validation
}

web::json::value ImportJobResource::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("category_id")] = ModelBase::toJson(m_Category_id);
    if(m_Created_dateIsSet)
    {
        val[U("created_date")] = ModelBase::toJson(m_Created_date);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    val[U("name")] = ModelBase::toJson(m_Name);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Output )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("output")] = web::json::value::array(jsonArray);
        }
    }
    if(m_Record_countIsSet)
    {
        val[U("record_count")] = ModelBase::toJson(m_Record_count);
    }
    if(m_StatusIsSet)
    {
        val[U("status")] = ModelBase::toJson(m_Status);
    }
    if(m_Updated_dateIsSet)
    {
        val[U("updated_date")] = ModelBase::toJson(m_Updated_date);
    }
    val[U("url")] = ModelBase::toJson(m_Url);
    val[U("vendor")] = ModelBase::toJson(m_Vendor);

    return val;
}

void ImportJobResource::fromJson(web::json::value& val)
{
    setCategoryId(ModelBase::stringFromJson(val[U("category_id")]));
    if(val.has_field(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromJson(val[U("created_date")]));
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int64_tFromJson(val[U("id")]));
    }
    setName(ModelBase::stringFromJson(val[U("name")]));
    {
        m_Output.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("output")))
        {
        for( auto& item : val[U("output")].as_array() )
        {
            if(item.is_null())
            {
                m_Output.push_back( std::shared_ptr<ImportJobOutputResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<ImportJobOutputResource> newItem(new ImportJobOutputResource());
                newItem->fromJson(item);
                m_Output.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(U("record_count")))
    {
        setRecordCount(ModelBase::int64_tFromJson(val[U("record_count")]));
    }
    if(val.has_field(U("status")))
    {
        setStatus(ModelBase::stringFromJson(val[U("status")]));
    }
    if(val.has_field(U("updated_date")))
    {
        setUpdatedDate(ModelBase::int64_tFromJson(val[U("updated_date")]));
    }
    setUrl(ModelBase::stringFromJson(val[U("url")]));
    setVendor(ModelBase::stringFromJson(val[U("vendor")]));
}

void ImportJobResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("category_id"), m_Category_id));
    if(m_Created_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("created_date"), m_Created_date));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Output )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("output"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_Record_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("record_count"), m_Record_count));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("status"), m_Status));
        
    }
    if(m_Updated_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("updated_date"), m_Updated_date));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("url"), m_Url));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("vendor"), m_Vendor));
}

void ImportJobResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setCategoryId(ModelBase::stringFromHttpContent(multipart->getContent(U("category_id"))));
    if(multipart->hasContent(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("created_date"))));
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int64_tFromHttpContent(multipart->getContent(U("id"))));
    }
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    {
        m_Output.clear();
        if(multipart->hasContent(U("output")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("output"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Output.push_back( std::shared_ptr<ImportJobOutputResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<ImportJobOutputResource> newItem(new ImportJobOutputResource());
                newItem->fromJson(item);
                m_Output.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(U("record_count")))
    {
        setRecordCount(ModelBase::int64_tFromHttpContent(multipart->getContent(U("record_count"))));
    }
    if(multipart->hasContent(U("status")))
    {
        setStatus(ModelBase::stringFromHttpContent(multipart->getContent(U("status"))));
    }
    if(multipart->hasContent(U("updated_date")))
    {
        setUpdatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("updated_date"))));
    }
    setUrl(ModelBase::stringFromHttpContent(multipart->getContent(U("url"))));
    setVendor(ModelBase::stringFromHttpContent(multipart->getContent(U("vendor"))));
}

utility::string_t ImportJobResource::getCategoryId() const
{
    return m_Category_id;
}


void ImportJobResource::setCategoryId(utility::string_t value)
{
    m_Category_id = value;
    
}
int64_t ImportJobResource::getCreatedDate() const
{
    return m_Created_date;
}


void ImportJobResource::setCreatedDate(int64_t value)
{
    m_Created_date = value;
    m_Created_dateIsSet = true;
}
bool ImportJobResource::createdDateIsSet() const
{
    return m_Created_dateIsSet;
}

void ImportJobResource::unsetCreated_date()
{
    m_Created_dateIsSet = false;
}

int64_t ImportJobResource::getId() const
{
    return m_Id;
}


void ImportJobResource::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool ImportJobResource::idIsSet() const
{
    return m_IdIsSet;
}

void ImportJobResource::unsetId()
{
    m_IdIsSet = false;
}

utility::string_t ImportJobResource::getName() const
{
    return m_Name;
}


void ImportJobResource::setName(utility::string_t value)
{
    m_Name = value;
    
}
std::vector<std::shared_ptr<ImportJobOutputResource>>& ImportJobResource::getOutput()
{
    return m_Output;
}

void ImportJobResource::setOutput(std::vector<std::shared_ptr<ImportJobOutputResource>> value)
{
    m_Output = value;
    m_OutputIsSet = true;
}
bool ImportJobResource::outputIsSet() const
{
    return m_OutputIsSet;
}

void ImportJobResource::unsetOutput()
{
    m_OutputIsSet = false;
}

int64_t ImportJobResource::getRecordCount() const
{
    return m_Record_count;
}


void ImportJobResource::setRecordCount(int64_t value)
{
    m_Record_count = value;
    m_Record_countIsSet = true;
}
bool ImportJobResource::recordCountIsSet() const
{
    return m_Record_countIsSet;
}

void ImportJobResource::unsetRecord_count()
{
    m_Record_countIsSet = false;
}

utility::string_t ImportJobResource::getStatus() const
{
    return m_Status;
}


void ImportJobResource::setStatus(utility::string_t value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool ImportJobResource::statusIsSet() const
{
    return m_StatusIsSet;
}

void ImportJobResource::unsetStatus()
{
    m_StatusIsSet = false;
}

int64_t ImportJobResource::getUpdatedDate() const
{
    return m_Updated_date;
}


void ImportJobResource::setUpdatedDate(int64_t value)
{
    m_Updated_date = value;
    m_Updated_dateIsSet = true;
}
bool ImportJobResource::updatedDateIsSet() const
{
    return m_Updated_dateIsSet;
}

void ImportJobResource::unsetUpdated_date()
{
    m_Updated_dateIsSet = false;
}

utility::string_t ImportJobResource::getUrl() const
{
    return m_Url;
}


void ImportJobResource::setUrl(utility::string_t value)
{
    m_Url = value;
    
}
utility::string_t ImportJobResource::getVendor() const
{
    return m_Vendor;
}


void ImportJobResource::setVendor(utility::string_t value)
{
    m_Vendor = value;
    
}
}
}
}
}

