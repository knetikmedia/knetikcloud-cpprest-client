/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SearchApi.h
 *
 * 
 */

#ifndef SearchApi_H_
#define SearchApi_H_


#include "ApiClient.h"

#include "PageResource«Map«string,object»».h"
#include "Result.h"
#include "SearchReferenceMapping.h"
#include <vector>
#include <cpprest/details/basic_types.h>

namespace com {
namespace knetikcloud {
namespace client {
namespace api {

using namespace com::knetikcloud::client::model;

class  SearchApi
{
public:
    SearchApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~SearchApi();
    /// <summary>
    /// Add a new object to an index
    /// </summary>
    /// <remarks>
    /// Mainly intended for internal use.
    /// </remarks>
    /// <param name="type">The index type</param>/// <param name="id">The ID of the object</param>/// <param name="object">The object to add (optional)</param>
    pplx::task<void> addSearchIndex(utility::string_t type, utility::string_t id, std::shared_ptr<Object> object);
    /// <summary>
    /// Register reference mappings
    /// </summary>
    /// <remarks>
    /// Add a new type mapping to connect data from one index to another, or discover an exsting one. Mainly intended for internal use.
    /// </remarks>
    /// <param name="mappings">The mappings to add (optional)</param>
    pplx::task<void> addSearchMappings(std::vector<std::shared_ptr<SearchReferenceMapping>> mappings);
    /// <summary>
    /// Delete an object
    /// </summary>
    /// <remarks>
    /// Mainly intended for internal use. Requires SEARCH_ADMIN.
    /// </remarks>
    /// <param name="type">The index type</param>/// <param name="id">The ID of the object to delete</param>
    pplx::task<void> deleteSearchIndex(utility::string_t type, utility::string_t id);
    /// <summary>
    /// Delete all objects in an index
    /// </summary>
    /// <remarks>
    /// Mainly intended for internal use
    /// </remarks>
    /// <param name="type">The index type</param>
    pplx::task<void> deleteSearchIndexes(utility::string_t type);
    /// <summary>
    /// Search an index
    /// </summary>
    /// <remarks>
    /// The body is an ElasticSearch query in JSON format. Please see their &lt;a href&#x3D;&#39;https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html&#39;&gt;documentation&lt;/a&gt; for details on the format and search options. The searchable object&#39;s format depends on on the type. See individual search endpoints on other resources for details on their format.
    /// </remarks>
    /// <param name="type">The index type</param>/// <param name="query">The query to be used for the search (optional)</param>/// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
    pplx::task<std::shared_ptr<PageResource«Map«string,object»»>> searchIndex(utility::string_t type, std::shared_ptr<Object> query, int32_t size, int32_t page);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* SearchApi_H_ */

