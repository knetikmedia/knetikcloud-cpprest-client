/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "TierResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

TierResource::TierResource()
{
    m_Additional_propertiesIsSet = false;
    m_Name = U("");
    m_NameIsSet = false;
    m_Required_progress = 0;
    m_Trigger_event_name = U("");
    m_Trigger_event_nameIsSet = false;
    
}

TierResource::~TierResource()
{
}

void TierResource::validate()
{
    // TODO: implement validation
}

web::json::value TierResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Additional_propertiesIsSet)
    {
        val[U("additional_properties")] = ModelBase::toJson(m_Additional_properties);
    }
    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }
    val[U("required_progress")] = ModelBase::toJson(m_Required_progress);
    if(m_Trigger_event_nameIsSet)
    {
        val[U("trigger_event_name")] = ModelBase::toJson(m_Trigger_event_name);
    }
    

    return val;
}

void TierResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("additional_properties")))
    {
        if(!val[U("additional_properties")].is_null())
        {
            std::map<utility::string_t, std::shared_ptr<Property>> newItem(std::map<utility::string_t, Property>());
            newItem->fromJson(val[U("additional_properties")]);
            setAdditionalProperties( newItem );
        }
        
    }
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
        
    }
    setRequiredProgress(ModelBase::int32_tFromJson(val[U("required_progress")]));
    if(val.has_field(U("trigger_event_name")))
    {
        setTriggerEventName(ModelBase::stringFromJson(val[U("trigger_event_name")]));
        
    }
    
}

void TierResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Additional_propertiesIsSet)
    {
        if (m_Additional_properties.get())
        {
            m_Additional_properties->toMultipart(multipart, U("additional_properties."));
        }
        
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("required_progress"), m_Required_progress));
    if(m_Trigger_event_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("trigger_event_name"), m_Trigger_event_name));
        
    }
    
}

void TierResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("additional_properties")))
    {
        if(multipart->hasContent(U("additional_properties")))
        {
            std::map<utility::string_t, std::shared_ptr<Property>> newItem(std::map<utility::string_t, Property>());
            newItem->fromMultiPart(multipart, U("additional_properties."));
            setAdditionalProperties( newItem );
        }
        
    }
    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
        
    }
    setRequiredProgress(ModelBase::int32_tFromHttpContent(multipart->getContent(U("required_progress"))));
    if(multipart->hasContent(U("trigger_event_name")))
    {
        setTriggerEventName(ModelBase::stringFromHttpContent(multipart->getContent(U("trigger_event_name"))));
        
    }
    
}


std::map<utility::string_t, std::shared_ptr<Property>>& TierResource::getAdditionalProperties()
{
    return m_Additional_properties;
}
bool TierResource::additional_propertiesIsSet() const
{
    return m_Additional_propertiesIsSet;
}
void TierResource::unsetAdditional_properties()
{
    m_Additional_propertiesIsSet = false;
}
utility::string_t TierResource::getName() const
{
    return m_Name;
}
void TierResource::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool TierResource::nameIsSet() const
{
    return m_NameIsSet;
}
void TierResource::unsetName()
{
    m_NameIsSet = false;
}
int32_t TierResource::getRequiredProgress() const
{
    return m_Required_progress;
}
void TierResource::setRequiredProgress(int32_t value)
{
    m_Required_progress = value;
    
}
utility::string_t TierResource::getTriggerEventName() const
{
    return m_Trigger_event_name;
}
void TierResource::setTriggerEventName(utility::string_t value)
{
    m_Trigger_event_name = value;
    m_Trigger_event_nameIsSet = true;
}
bool TierResource::trigger_event_nameIsSet() const
{
    return m_Trigger_event_nameIsSet;
}
void TierResource::unsetTrigger_event_name()
{
    m_Trigger_event_nameIsSet = false;
}

}
}
}
}

