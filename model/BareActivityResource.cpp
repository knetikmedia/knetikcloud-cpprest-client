/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BareActivityResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

BareActivityResource::BareActivityResource()
{
    m_Created_date = 0L;
    m_Created_dateIsSet = false;
    m_Id = 0L;
    m_IdIsSet = false;
    m_Launch = U("");
    m_LaunchIsSet = false;
    m_Long_description = U("");
    m_Long_descriptionIsSet = false;
    m_Name = U("");
    m_Short_description = U("");
    m_Short_descriptionIsSet = false;
    m_Template = false;
    m_TemplateIsSet = false;
    m_Type = U("");
    m_Unique_key = U("");
    m_Unique_keyIsSet = false;
    m_Updated_date = 0L;
    m_Updated_dateIsSet = false;
}

BareActivityResource::~BareActivityResource()
{
}

void BareActivityResource::validate()
{
    // TODO: implement validation
}

web::json::value BareActivityResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Created_dateIsSet)
    {
        val[U("created_date")] = ModelBase::toJson(m_Created_date);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_LaunchIsSet)
    {
        val[U("launch")] = ModelBase::toJson(m_Launch);
    }
    if(m_Long_descriptionIsSet)
    {
        val[U("long_description")] = ModelBase::toJson(m_Long_description);
    }
    val[U("name")] = ModelBase::toJson(m_Name);
    if(m_Short_descriptionIsSet)
    {
        val[U("short_description")] = ModelBase::toJson(m_Short_description);
    }
    if(m_TemplateIsSet)
    {
        val[U("template")] = ModelBase::toJson(m_Template);
    }
    val[U("type")] = ModelBase::toJson(m_Type);
    if(m_Unique_keyIsSet)
    {
        val[U("unique_key")] = ModelBase::toJson(m_Unique_key);
    }
    if(m_Updated_dateIsSet)
    {
        val[U("updated_date")] = ModelBase::toJson(m_Updated_date);
    }

    return val;
}

void BareActivityResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromJson(val[U("created_date")]));
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int64_tFromJson(val[U("id")]));
    }
    if(val.has_field(U("launch")))
    {
        setLaunch(ModelBase::stringFromJson(val[U("launch")]));
    }
    if(val.has_field(U("long_description")))
    {
        setLongDescription(ModelBase::stringFromJson(val[U("long_description")]));
    }
    setName(ModelBase::stringFromJson(val[U("name")]));
    if(val.has_field(U("short_description")))
    {
        setShortDescription(ModelBase::stringFromJson(val[U("short_description")]));
    }
    if(val.has_field(U("template")))
    {
        setTemplate(ModelBase::boolFromJson(val[U("template")]));
    }
    setType(ModelBase::stringFromJson(val[U("type")]));
    if(val.has_field(U("unique_key")))
    {
        setUniqueKey(ModelBase::stringFromJson(val[U("unique_key")]));
    }
    if(val.has_field(U("updated_date")))
    {
        setUpdatedDate(ModelBase::int64_tFromJson(val[U("updated_date")]));
    }
}

void BareActivityResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Created_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("created_date"), m_Created_date));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    if(m_LaunchIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("launch"), m_Launch));
        
    }
    if(m_Long_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("long_description"), m_Long_description));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    if(m_Short_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("short_description"), m_Short_description));
        
    }
    if(m_TemplateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("template"), m_Template));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("type"), m_Type));
    if(m_Unique_keyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("unique_key"), m_Unique_key));
        
    }
    if(m_Updated_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("updated_date"), m_Updated_date));
    }
}

void BareActivityResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("created_date"))));
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int64_tFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("launch")))
    {
        setLaunch(ModelBase::stringFromHttpContent(multipart->getContent(U("launch"))));
    }
    if(multipart->hasContent(U("long_description")))
    {
        setLongDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("long_description"))));
    }
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    if(multipart->hasContent(U("short_description")))
    {
        setShortDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("short_description"))));
    }
    if(multipart->hasContent(U("template")))
    {
        setTemplate(ModelBase::boolFromHttpContent(multipart->getContent(U("template"))));
    }
    setType(ModelBase::stringFromHttpContent(multipart->getContent(U("type"))));
    if(multipart->hasContent(U("unique_key")))
    {
        setUniqueKey(ModelBase::stringFromHttpContent(multipart->getContent(U("unique_key"))));
    }
    if(multipart->hasContent(U("updated_date")))
    {
        setUpdatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("updated_date"))));
    }
}

int64_t BareActivityResource::getCreatedDate() const
{
    return m_Created_date;
}


void BareActivityResource::setCreatedDate(int64_t value)
{
    m_Created_date = value;
    m_Created_dateIsSet = true;
}
bool BareActivityResource::createdDateIsSet() const
{
    return m_Created_dateIsSet;
}

void BareActivityResource::unsetCreated_date()
{
    m_Created_dateIsSet = false;
}

int64_t BareActivityResource::getId() const
{
    return m_Id;
}


void BareActivityResource::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool BareActivityResource::idIsSet() const
{
    return m_IdIsSet;
}

void BareActivityResource::unsetId()
{
    m_IdIsSet = false;
}

utility::string_t BareActivityResource::getLaunch() const
{
    return m_Launch;
}


void BareActivityResource::setLaunch(utility::string_t value)
{
    m_Launch = value;
    m_LaunchIsSet = true;
}
bool BareActivityResource::launchIsSet() const
{
    return m_LaunchIsSet;
}

void BareActivityResource::unsetLaunch()
{
    m_LaunchIsSet = false;
}

utility::string_t BareActivityResource::getLongDescription() const
{
    return m_Long_description;
}


void BareActivityResource::setLongDescription(utility::string_t value)
{
    m_Long_description = value;
    m_Long_descriptionIsSet = true;
}
bool BareActivityResource::longDescriptionIsSet() const
{
    return m_Long_descriptionIsSet;
}

void BareActivityResource::unsetLong_description()
{
    m_Long_descriptionIsSet = false;
}

utility::string_t BareActivityResource::getName() const
{
    return m_Name;
}


void BareActivityResource::setName(utility::string_t value)
{
    m_Name = value;
    
}
utility::string_t BareActivityResource::getShortDescription() const
{
    return m_Short_description;
}


void BareActivityResource::setShortDescription(utility::string_t value)
{
    m_Short_description = value;
    m_Short_descriptionIsSet = true;
}
bool BareActivityResource::shortDescriptionIsSet() const
{
    return m_Short_descriptionIsSet;
}

void BareActivityResource::unsetShort_description()
{
    m_Short_descriptionIsSet = false;
}

bool BareActivityResource::getTemplate() const
{
    return m_Template;
}


void BareActivityResource::setTemplate(bool value)
{
    m_Template = value;
    m_TemplateIsSet = true;
}
bool BareActivityResource::templateIsSet() const
{
    return m_TemplateIsSet;
}

void BareActivityResource::unsetTemplate()
{
    m_TemplateIsSet = false;
}

utility::string_t BareActivityResource::getType() const
{
    return m_Type;
}


void BareActivityResource::setType(utility::string_t value)
{
    m_Type = value;
    
}
utility::string_t BareActivityResource::getUniqueKey() const
{
    return m_Unique_key;
}


void BareActivityResource::setUniqueKey(utility::string_t value)
{
    m_Unique_key = value;
    m_Unique_keyIsSet = true;
}
bool BareActivityResource::uniqueKeyIsSet() const
{
    return m_Unique_keyIsSet;
}

void BareActivityResource::unsetUnique_key()
{
    m_Unique_keyIsSet = false;
}

int64_t BareActivityResource::getUpdatedDate() const
{
    return m_Updated_date;
}


void BareActivityResource::setUpdatedDate(int64_t value)
{
    m_Updated_date = value;
    m_Updated_dateIsSet = true;
}
bool BareActivityResource::updatedDateIsSet() const
{
    return m_Updated_dateIsSet;
}

void BareActivityResource::unsetUpdated_date()
{
    m_Updated_dateIsSet = false;
}

}
}
}
}

