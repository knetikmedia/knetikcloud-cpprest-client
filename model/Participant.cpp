/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Participant.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

Participant::Participant()
{
    m_Host = false;
    m_HostIsSet = false;
    m_Status = U("");
    m_StatusIsSet = false;
}

Participant::~Participant()
{
}

void Participant::validate()
{
    // TODO: implement validation
}

web::json::value Participant::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_HostIsSet)
    {
        val[U("host")] = ModelBase::toJson(m_Host);
    }
    if(m_StatusIsSet)
    {
        val[U("status")] = ModelBase::toJson(m_Status);
    }
    val[U("user")] = ModelBase::toJson(m_User);

    return val;
}

void Participant::fromJson(web::json::value& val)
{
    if(val.has_field(U("host")))
    {
        setHost(ModelBase::boolFromJson(val[U("host")]));
    }
    if(val.has_field(U("status")))
    {
        setStatus(ModelBase::stringFromJson(val[U("status")]));
    }
    std::shared_ptr<IdRef> newUser(new IdRef());
    newUser->fromJson(val[U("user")]);
    setUser( newUser );
}

void Participant::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_HostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("host"), m_Host));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("status"), m_Status));
        
    }
    m_User->toMultipart(multipart, U("user."));
}

void Participant::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("host")))
    {
        setHost(ModelBase::boolFromHttpContent(multipart->getContent(U("host"))));
    }
    if(multipart->hasContent(U("status")))
    {
        setStatus(ModelBase::stringFromHttpContent(multipart->getContent(U("status"))));
    }
    std::shared_ptr<IdRef> newUser(new IdRef());
    newUser->fromMultiPart(multipart, U("user."));
    setUser( newUser );
}

bool Participant::getHost() const
{
    return m_Host;
}


void Participant::setHost(bool value)
{
    m_Host = value;
    m_HostIsSet = true;
}
bool Participant::hostIsSet() const
{
    return m_HostIsSet;
}

void Participant::unsetHost()
{
    m_HostIsSet = false;
}

utility::string_t Participant::getStatus() const
{
    return m_Status;
}


void Participant::setStatus(utility::string_t value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool Participant::statusIsSet() const
{
    return m_StatusIsSet;
}

void Participant::unsetStatus()
{
    m_StatusIsSet = false;
}

std::shared_ptr<IdRef> Participant::getUser() const
{
    return m_User;
}


void Participant::setUser(std::shared_ptr<IdRef> value)
{
    m_User = value;
    
}
}
}
}
}

