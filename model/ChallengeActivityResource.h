/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * ChallengeActivityResource.h
 *
 * 
 */

#ifndef ChallengeActivityResource_H_
#define ChallengeActivityResource_H_


#include "ModelBase.h"

#include "ActivityEntitlementResource.h"
#include "SelectedSettingResource.h"
#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>
#include "Property.h"
#include "RewardSetResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ChallengeActivityResource
    : public ModelBase
{
public:
    ChallengeActivityResource();
    virtual ~ChallengeActivityResource();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ChallengeActivityResource members

    /// <summary>
    /// The id of the activity
    /// </summary>
    int64_t getActivityId() const;
    void setActivityId(int64_t value);
        /// <summary>
    /// A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<Property>>& getAdditionalProperties();
    bool additional_propertiesIsSet() const;
    void unsetAdditional_properties();
    /// <summary>
    /// The id of the challenge
    /// </summary>
    int64_t getChallengeId() const;
    void setChallengeId(int64_t value);
    bool challenge_idIsSet() const;
    void unsetChallenge_id();
    /// <summary>
    /// The entitlement item needed to participate in the activity as part of this event. Null indicates free entry. When creating/updating only id is used. Item must be pre-existing
    /// </summary>
    std::shared_ptr<ActivityEntitlementResource> getEntitlement() const;
    void setEntitlement(std::shared_ptr<ActivityEntitlementResource> value);
    bool entitlementIsSet() const;
    void unsetEntitlement();
    /// <summary>
    /// The unique ID for this resource
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// The rewards to give at the end of each occurence of the activity. When creating/updating only id is used. Reward set must be pre-existing
    /// </summary>
    std::shared_ptr<RewardSetResource> getRewardSet() const;
    void setRewardSet(std::shared_ptr<RewardSetResource> value);
    bool reward_setIsSet() const;
    void unsetReward_set();
    /// <summary>
    /// The list of settings and the select options
    /// </summary>
    std::vector<std::shared_ptr<SelectedSettingResource>>& getSettings();
    bool settingsIsSet() const;
    void unsetSettings();
    /// <summary>
    /// A challenge activity template this challenge activity is validated against (private). May be null and no validation of additional_properties will be done
    /// </summary>
    utility::string_t getTemplate() const;
    void setTemplate(utility::string_t value);
    bool templateIsSet() const;
    void unsetTemplate();

protected:
    int64_t m_Activity_id;
    std::map<utility::string_t, std::shared_ptr<Property>> m_Additional_properties;
    bool m_Additional_propertiesIsSet;
int64_t m_Challenge_id;
    bool m_Challenge_idIsSet;
std::shared_ptr<ActivityEntitlementResource> m_Entitlement;
    bool m_EntitlementIsSet;
int64_t m_Id;
    bool m_IdIsSet;
std::shared_ptr<RewardSetResource> m_Reward_set;
    bool m_Reward_setIsSet;
std::vector<std::shared_ptr<SelectedSettingResource>> m_Settings;
    bool m_SettingsIsSet;
utility::string_t m_Template;
    bool m_TemplateIsSet;
};

}
}
}
}

#endif /* ChallengeActivityResource_H_ */
