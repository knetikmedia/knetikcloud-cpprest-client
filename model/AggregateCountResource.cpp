/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "AggregateCountResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

AggregateCountResource::AggregateCountResource()
{
    m_Count = 0L;
    m_CountIsSet = false;
    m_date = U("");
    m_dateIsSet = false;
}

AggregateCountResource::~AggregateCountResource()
{
}

void AggregateCountResource::validate()
{
    // TODO: implement validation
}

web::json::value AggregateCountResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CountIsSet)
    {
        val[U("count")] = ModelBase::toJson(m_Count);
    }
    if(m_dateIsSet)
    {
        val[U("date")] = ModelBase::toJson(m_date);
    }

    return val;
}

void AggregateCountResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("count")))
    {
        setCount(ModelBase::int64_tFromJson(val[U("count")]));
    }
    if(val.has_field(U("date")))
    {
        setDate(ModelBase::stringFromJson(val[U("date")]));
    }
}

void AggregateCountResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_CountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("count"), m_Count));
    }
    if(m_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("date"), m_date));
        
    }
}

void AggregateCountResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("count")))
    {
        setCount(ModelBase::int64_tFromHttpContent(multipart->getContent(U("count"))));
    }
    if(multipart->hasContent(U("date")))
    {
        setDate(ModelBase::stringFromHttpContent(multipart->getContent(U("date"))));
    }
}

int64_t AggregateCountResource::getCount() const
{
    return m_Count;
}


void AggregateCountResource::setCount(int64_t value)
{
    m_Count = value;
    m_CountIsSet = true;
}
bool AggregateCountResource::countIsSet() const
{
    return m_CountIsSet;
}

void AggregateCountResource::unsetCount()
{
    m_CountIsSet = false;
}

utility::string_t AggregateCountResource::getDate() const
{
    return m_date;
}


void AggregateCountResource::setDate(utility::string_t value)
{
    m_date = value;
    m_dateIsSet = true;
}
bool AggregateCountResource::dateIsSet() const
{
    return m_dateIsSet;
}

void AggregateCountResource::unsetdate()
{
    m_dateIsSet = false;
}

}
}
}
}

