/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "UserResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

UserResource::UserResource()
{
    m_Additional_propertiesIsSet = false;
    m_Address = U("");
    m_AddressIsSet = false;
    m_Address2 = U("");
    m_Address2IsSet = false;
    m_Avatar_url = U("");
    m_Avatar_urlIsSet = false;
    m_ChildrenIsSet = false;
    m_City = U("");
    m_CityIsSet = false;
    m_Country_code = U("");
    m_Country_codeIsSet = false;
    m_Currency_code = U("");
    m_Currency_codeIsSet = false;
    m_Date_of_birth = 0L;
    m_Date_of_birthIsSet = false;
    m_Description = U("");
    m_DescriptionIsSet = false;
    m_Display_name = U("");
    m_Display_nameIsSet = false;
    m_Email = U("");
    m_First_name = U("");
    m_First_nameIsSet = false;
    m_Fullname = U("");
    m_FullnameIsSet = false;
    m_Gender = U("");
    m_GenderIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_Language_code = U("");
    m_Language_codeIsSet = false;
    m_Last_activity = 0L;
    m_Last_activityIsSet = false;
    m_Last_name = U("");
    m_Last_nameIsSet = false;
    m_Last_updated = 0L;
    m_Last_updatedIsSet = false;
    m_Member_since = 0L;
    m_Member_sinceIsSet = false;
    m_Mobile_number = U("");
    m_Mobile_numberIsSet = false;
    m_ParentsIsSet = false;
    m_Password = U("");
    m_PasswordIsSet = false;
    m_Postal_code = U("");
    m_Postal_codeIsSet = false;
    m_State = U("");
    m_StateIsSet = false;
    m_TagsIsSet = false;
    m_Template = U("");
    m_TemplateIsSet = false;
    m_Timezone_code = U("");
    m_Timezone_codeIsSet = false;
    m_Username = U("");
}

UserResource::~UserResource()
{
}

void UserResource::validate()
{
    // TODO: implement validation
}

web::json::value UserResource::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Additional_properties )
        {
            web::json::value tmp = web::json::value::object();
            tmp[U("key")] = ModelBase::toJson(item.first);
            tmp[U("value")] = ModelBase::toJson(item.second);
            jsonArray.push_back(tmp);
        }
        if(jsonArray.size() > 0)
        {
            val[U("additional_properties")] = web::json::value::array(jsonArray);
        }
    }
    if(m_AddressIsSet)
    {
        val[U("address")] = ModelBase::toJson(m_Address);
    }
    if(m_Address2IsSet)
    {
        val[U("address2")] = ModelBase::toJson(m_Address2);
    }
    if(m_Avatar_urlIsSet)
    {
        val[U("avatar_url")] = ModelBase::toJson(m_Avatar_url);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Children )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("children")] = web::json::value::array(jsonArray);
        }
    }
    if(m_CityIsSet)
    {
        val[U("city")] = ModelBase::toJson(m_City);
    }
    if(m_Country_codeIsSet)
    {
        val[U("country_code")] = ModelBase::toJson(m_Country_code);
    }
    if(m_Currency_codeIsSet)
    {
        val[U("currency_code")] = ModelBase::toJson(m_Currency_code);
    }
    if(m_Date_of_birthIsSet)
    {
        val[U("date_of_birth")] = ModelBase::toJson(m_Date_of_birth);
    }
    if(m_DescriptionIsSet)
    {
        val[U("description")] = ModelBase::toJson(m_Description);
    }
    if(m_Display_nameIsSet)
    {
        val[U("display_name")] = ModelBase::toJson(m_Display_name);
    }
    val[U("email")] = ModelBase::toJson(m_Email);
    if(m_First_nameIsSet)
    {
        val[U("first_name")] = ModelBase::toJson(m_First_name);
    }
    if(m_FullnameIsSet)
    {
        val[U("fullname")] = ModelBase::toJson(m_Fullname);
    }
    if(m_GenderIsSet)
    {
        val[U("gender")] = ModelBase::toJson(m_Gender);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_Language_codeIsSet)
    {
        val[U("language_code")] = ModelBase::toJson(m_Language_code);
    }
    if(m_Last_activityIsSet)
    {
        val[U("last_activity")] = ModelBase::toJson(m_Last_activity);
    }
    if(m_Last_nameIsSet)
    {
        val[U("last_name")] = ModelBase::toJson(m_Last_name);
    }
    if(m_Last_updatedIsSet)
    {
        val[U("last_updated")] = ModelBase::toJson(m_Last_updated);
    }
    if(m_Member_sinceIsSet)
    {
        val[U("member_since")] = ModelBase::toJson(m_Member_since);
    }
    if(m_Mobile_numberIsSet)
    {
        val[U("mobile_number")] = ModelBase::toJson(m_Mobile_number);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Parents )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("parents")] = web::json::value::array(jsonArray);
        }
    }
    if(m_PasswordIsSet)
    {
        val[U("password")] = ModelBase::toJson(m_Password);
    }
    if(m_Postal_codeIsSet)
    {
        val[U("postal_code")] = ModelBase::toJson(m_Postal_code);
    }
    if(m_StateIsSet)
    {
        val[U("state")] = ModelBase::toJson(m_State);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("tags")] = web::json::value::array(jsonArray);
        }
    }
    if(m_TemplateIsSet)
    {
        val[U("template")] = ModelBase::toJson(m_Template);
    }
    if(m_Timezone_codeIsSet)
    {
        val[U("timezone_code")] = ModelBase::toJson(m_Timezone_code);
    }
    val[U("username")] = ModelBase::toJson(m_Username);

    return val;
}

void UserResource::fromJson(web::json::value& val)
{
    {
        m_Additional_properties.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("additional_properties")))
        {
        for( auto& item : val[U("additional_properties")].as_array() )
        {  
            utility::string_t key;
            if(item.has_field(U("key")))
            {
                key = ModelBase::stringFromJson(item[U("key")]);
            }
            if(item.is_null())
            {
                m_Additional_properties.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, std::shared_ptr<Property>(nullptr) ));
            }
            else
            {
                std::shared_ptr<Property> newItem(new Property());
                newItem->fromJson(item[U("value")]);
                m_Additional_properties.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, newItem ));
            }
        }
        }
    }
    if(val.has_field(U("address")))
    {
        setAddress(ModelBase::stringFromJson(val[U("address")]));
    }
    if(val.has_field(U("address2")))
    {
        setAddress2(ModelBase::stringFromJson(val[U("address2")]));
    }
    if(val.has_field(U("avatar_url")))
    {
        setAvatarUrl(ModelBase::stringFromJson(val[U("avatar_url")]));
    }
    {
        m_Children.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("children")))
        {
        for( auto& item : val[U("children")].as_array() )
        {
            if(item.is_null())
            {
                m_Children.push_back( std::shared_ptr<UserRelationshipReferenceResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<UserRelationshipReferenceResource> newItem(new UserRelationshipReferenceResource());
                newItem->fromJson(item);
                m_Children.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(U("city")))
    {
        setCity(ModelBase::stringFromJson(val[U("city")]));
    }
    if(val.has_field(U("country_code")))
    {
        setCountryCode(ModelBase::stringFromJson(val[U("country_code")]));
    }
    if(val.has_field(U("currency_code")))
    {
        setCurrencyCode(ModelBase::stringFromJson(val[U("currency_code")]));
    }
    if(val.has_field(U("date_of_birth")))
    {
        setDateOfBirth(ModelBase::int64_tFromJson(val[U("date_of_birth")]));
    }
    if(val.has_field(U("description")))
    {
        setDescription(ModelBase::stringFromJson(val[U("description")]));
    }
    if(val.has_field(U("display_name")))
    {
        setDisplayName(ModelBase::stringFromJson(val[U("display_name")]));
    }
    setEmail(ModelBase::stringFromJson(val[U("email")]));
    if(val.has_field(U("first_name")))
    {
        setFirstName(ModelBase::stringFromJson(val[U("first_name")]));
    }
    if(val.has_field(U("fullname")))
    {
        setFullname(ModelBase::stringFromJson(val[U("fullname")]));
    }
    if(val.has_field(U("gender")))
    {
        setGender(ModelBase::stringFromJson(val[U("gender")]));
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int32_tFromJson(val[U("id")]));
    }
    if(val.has_field(U("language_code")))
    {
        setLanguageCode(ModelBase::stringFromJson(val[U("language_code")]));
    }
    if(val.has_field(U("last_activity")))
    {
        setLastActivity(ModelBase::int64_tFromJson(val[U("last_activity")]));
    }
    if(val.has_field(U("last_name")))
    {
        setLastName(ModelBase::stringFromJson(val[U("last_name")]));
    }
    if(val.has_field(U("last_updated")))
    {
        setLastUpdated(ModelBase::int64_tFromJson(val[U("last_updated")]));
    }
    if(val.has_field(U("member_since")))
    {
        setMemberSince(ModelBase::int64_tFromJson(val[U("member_since")]));
    }
    if(val.has_field(U("mobile_number")))
    {
        setMobileNumber(ModelBase::stringFromJson(val[U("mobile_number")]));
    }
    {
        m_Parents.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("parents")))
        {
        for( auto& item : val[U("parents")].as_array() )
        {
            if(item.is_null())
            {
                m_Parents.push_back( std::shared_ptr<UserRelationshipReferenceResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<UserRelationshipReferenceResource> newItem(new UserRelationshipReferenceResource());
                newItem->fromJson(item);
                m_Parents.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(U("password")))
    {
        setPassword(ModelBase::stringFromJson(val[U("password")]));
    }
    if(val.has_field(U("postal_code")))
    {
        setPostalCode(ModelBase::stringFromJson(val[U("postal_code")]));
    }
    if(val.has_field(U("state")))
    {
        setState(ModelBase::stringFromJson(val[U("state")]));
    }
    {
        m_Tags.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("tags")))
        {
        for( auto& item : val[U("tags")].as_array() )
        {
            m_Tags.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(val.has_field(U("template")))
    {
        setTemplate(ModelBase::stringFromJson(val[U("template")]));
    }
    if(val.has_field(U("timezone_code")))
    {
        setTimezoneCode(ModelBase::stringFromJson(val[U("timezone_code")]));
    }
    setUsername(ModelBase::stringFromJson(val[U("username")]));
}

void UserResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Additional_properties )
        {
            web::json::value tmp = web::json::value::object();
            tmp[U("key")] = ModelBase::toJson(item.first);
            tmp[U("value")] = ModelBase::toJson(item.second);
            jsonArray.push_back(tmp);
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("additional_properties"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_AddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("address"), m_Address));
        
    }
    if(m_Address2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("address2"), m_Address2));
        
    }
    if(m_Avatar_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("avatar_url"), m_Avatar_url));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Children )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("children"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_CityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("city"), m_City));
        
    }
    if(m_Country_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("country_code"), m_Country_code));
        
    }
    if(m_Currency_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("currency_code"), m_Currency_code));
        
    }
    if(m_Date_of_birthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("date_of_birth"), m_Date_of_birth));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("description"), m_Description));
        
    }
    if(m_Display_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("display_name"), m_Display_name));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("email"), m_Email));
    if(m_First_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("first_name"), m_First_name));
        
    }
    if(m_FullnameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("fullname"), m_Fullname));
        
    }
    if(m_GenderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("gender"), m_Gender));
        
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    if(m_Language_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("language_code"), m_Language_code));
        
    }
    if(m_Last_activityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("last_activity"), m_Last_activity));
    }
    if(m_Last_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("last_name"), m_Last_name));
        
    }
    if(m_Last_updatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("last_updated"), m_Last_updated));
    }
    if(m_Member_sinceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("member_since"), m_Member_since));
    }
    if(m_Mobile_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("mobile_number"), m_Mobile_number));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Parents )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("parents"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_PasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("password"), m_Password));
        
    }
    if(m_Postal_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("postal_code"), m_Postal_code));
        
    }
    if(m_StateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("state"), m_State));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("tags"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_TemplateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("template"), m_Template));
        
    }
    if(m_Timezone_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("timezone_code"), m_Timezone_code));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("username"), m_Username));
}

void UserResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        m_Additional_properties.clear();
        if(multipart->hasContent(U("additional_properties")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("additional_properties"))));
        for( auto& item : jsonArray.as_array() )
        {
            utility::string_t key;
            if(item.has_field(U("key")))
            {
                key = ModelBase::stringFromJson(item[U("key")]);
            }
            if(item.is_null())
            {
                m_Additional_properties.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, std::shared_ptr<Property>(nullptr) ));
            }
            else
            {
                std::shared_ptr<Property> newItem(new Property());
                newItem->fromJson(item[U("value")]);
                m_Additional_properties.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, newItem ));
            }
        }
        }
    }
    if(multipart->hasContent(U("address")))
    {
        setAddress(ModelBase::stringFromHttpContent(multipart->getContent(U("address"))));
    }
    if(multipart->hasContent(U("address2")))
    {
        setAddress2(ModelBase::stringFromHttpContent(multipart->getContent(U("address2"))));
    }
    if(multipart->hasContent(U("avatar_url")))
    {
        setAvatarUrl(ModelBase::stringFromHttpContent(multipart->getContent(U("avatar_url"))));
    }
    {
        m_Children.clear();
        if(multipart->hasContent(U("children")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("children"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Children.push_back( std::shared_ptr<UserRelationshipReferenceResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<UserRelationshipReferenceResource> newItem(new UserRelationshipReferenceResource());
                newItem->fromJson(item);
                m_Children.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(U("city")))
    {
        setCity(ModelBase::stringFromHttpContent(multipart->getContent(U("city"))));
    }
    if(multipart->hasContent(U("country_code")))
    {
        setCountryCode(ModelBase::stringFromHttpContent(multipart->getContent(U("country_code"))));
    }
    if(multipart->hasContent(U("currency_code")))
    {
        setCurrencyCode(ModelBase::stringFromHttpContent(multipart->getContent(U("currency_code"))));
    }
    if(multipart->hasContent(U("date_of_birth")))
    {
        setDateOfBirth(ModelBase::int64_tFromHttpContent(multipart->getContent(U("date_of_birth"))));
    }
    if(multipart->hasContent(U("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("description"))));
    }
    if(multipart->hasContent(U("display_name")))
    {
        setDisplayName(ModelBase::stringFromHttpContent(multipart->getContent(U("display_name"))));
    }
    setEmail(ModelBase::stringFromHttpContent(multipart->getContent(U("email"))));
    if(multipart->hasContent(U("first_name")))
    {
        setFirstName(ModelBase::stringFromHttpContent(multipart->getContent(U("first_name"))));
    }
    if(multipart->hasContent(U("fullname")))
    {
        setFullname(ModelBase::stringFromHttpContent(multipart->getContent(U("fullname"))));
    }
    if(multipart->hasContent(U("gender")))
    {
        setGender(ModelBase::stringFromHttpContent(multipart->getContent(U("gender"))));
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("language_code")))
    {
        setLanguageCode(ModelBase::stringFromHttpContent(multipart->getContent(U("language_code"))));
    }
    if(multipart->hasContent(U("last_activity")))
    {
        setLastActivity(ModelBase::int64_tFromHttpContent(multipart->getContent(U("last_activity"))));
    }
    if(multipart->hasContent(U("last_name")))
    {
        setLastName(ModelBase::stringFromHttpContent(multipart->getContent(U("last_name"))));
    }
    if(multipart->hasContent(U("last_updated")))
    {
        setLastUpdated(ModelBase::int64_tFromHttpContent(multipart->getContent(U("last_updated"))));
    }
    if(multipart->hasContent(U("member_since")))
    {
        setMemberSince(ModelBase::int64_tFromHttpContent(multipart->getContent(U("member_since"))));
    }
    if(multipart->hasContent(U("mobile_number")))
    {
        setMobileNumber(ModelBase::stringFromHttpContent(multipart->getContent(U("mobile_number"))));
    }
    {
        m_Parents.clear();
        if(multipart->hasContent(U("parents")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("parents"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Parents.push_back( std::shared_ptr<UserRelationshipReferenceResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<UserRelationshipReferenceResource> newItem(new UserRelationshipReferenceResource());
                newItem->fromJson(item);
                m_Parents.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(U("password")))
    {
        setPassword(ModelBase::stringFromHttpContent(multipart->getContent(U("password"))));
    }
    if(multipart->hasContent(U("postal_code")))
    {
        setPostalCode(ModelBase::stringFromHttpContent(multipart->getContent(U("postal_code"))));
    }
    if(multipart->hasContent(U("state")))
    {
        setState(ModelBase::stringFromHttpContent(multipart->getContent(U("state"))));
    }
    {
        m_Tags.clear();
        if(multipart->hasContent(U("tags")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("tags"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Tags.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(multipart->hasContent(U("template")))
    {
        setTemplate(ModelBase::stringFromHttpContent(multipart->getContent(U("template"))));
    }
    if(multipart->hasContent(U("timezone_code")))
    {
        setTimezoneCode(ModelBase::stringFromHttpContent(multipart->getContent(U("timezone_code"))));
    }
    setUsername(ModelBase::stringFromHttpContent(multipart->getContent(U("username"))));
}

std::map<utility::string_t, std::shared_ptr<Property>>& UserResource::getAdditionalProperties()
{
    return m_Additional_properties;
}

void UserResource::setAdditionalProperties(std::map<utility::string_t, std::shared_ptr<Property>> value)
{
    m_Additional_properties = value;
    m_Additional_propertiesIsSet = true;
}
bool UserResource::additionalPropertiesIsSet() const
{
    return m_Additional_propertiesIsSet;
}

void UserResource::unsetAdditional_properties()
{
    m_Additional_propertiesIsSet = false;
}

utility::string_t UserResource::getAddress() const
{
    return m_Address;
}


void UserResource::setAddress(utility::string_t value)
{
    m_Address = value;
    m_AddressIsSet = true;
}
bool UserResource::addressIsSet() const
{
    return m_AddressIsSet;
}

void UserResource::unsetAddress()
{
    m_AddressIsSet = false;
}

utility::string_t UserResource::getAddress2() const
{
    return m_Address2;
}


void UserResource::setAddress2(utility::string_t value)
{
    m_Address2 = value;
    m_Address2IsSet = true;
}
bool UserResource::address2IsSet() const
{
    return m_Address2IsSet;
}

void UserResource::unsetAddress2()
{
    m_Address2IsSet = false;
}

utility::string_t UserResource::getAvatarUrl() const
{
    return m_Avatar_url;
}


void UserResource::setAvatarUrl(utility::string_t value)
{
    m_Avatar_url = value;
    m_Avatar_urlIsSet = true;
}
bool UserResource::avatarUrlIsSet() const
{
    return m_Avatar_urlIsSet;
}

void UserResource::unsetAvatar_url()
{
    m_Avatar_urlIsSet = false;
}

std::vector<std::shared_ptr<UserRelationshipReferenceResource>>& UserResource::getChildren()
{
    return m_Children;
}

void UserResource::setChildren(std::vector<std::shared_ptr<UserRelationshipReferenceResource>> value)
{
    m_Children = value;
    m_ChildrenIsSet = true;
}
bool UserResource::childrenIsSet() const
{
    return m_ChildrenIsSet;
}

void UserResource::unsetChildren()
{
    m_ChildrenIsSet = false;
}

utility::string_t UserResource::getCity() const
{
    return m_City;
}


void UserResource::setCity(utility::string_t value)
{
    m_City = value;
    m_CityIsSet = true;
}
bool UserResource::cityIsSet() const
{
    return m_CityIsSet;
}

void UserResource::unsetCity()
{
    m_CityIsSet = false;
}

utility::string_t UserResource::getCountryCode() const
{
    return m_Country_code;
}


void UserResource::setCountryCode(utility::string_t value)
{
    m_Country_code = value;
    m_Country_codeIsSet = true;
}
bool UserResource::countryCodeIsSet() const
{
    return m_Country_codeIsSet;
}

void UserResource::unsetCountry_code()
{
    m_Country_codeIsSet = false;
}

utility::string_t UserResource::getCurrencyCode() const
{
    return m_Currency_code;
}


void UserResource::setCurrencyCode(utility::string_t value)
{
    m_Currency_code = value;
    m_Currency_codeIsSet = true;
}
bool UserResource::currencyCodeIsSet() const
{
    return m_Currency_codeIsSet;
}

void UserResource::unsetCurrency_code()
{
    m_Currency_codeIsSet = false;
}

int64_t UserResource::getDateOfBirth() const
{
    return m_Date_of_birth;
}


void UserResource::setDateOfBirth(int64_t value)
{
    m_Date_of_birth = value;
    m_Date_of_birthIsSet = true;
}
bool UserResource::dateOfBirthIsSet() const
{
    return m_Date_of_birthIsSet;
}

void UserResource::unsetDate_of_birth()
{
    m_Date_of_birthIsSet = false;
}

utility::string_t UserResource::getDescription() const
{
    return m_Description;
}


void UserResource::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool UserResource::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void UserResource::unsetDescription()
{
    m_DescriptionIsSet = false;
}

utility::string_t UserResource::getDisplayName() const
{
    return m_Display_name;
}


void UserResource::setDisplayName(utility::string_t value)
{
    m_Display_name = value;
    m_Display_nameIsSet = true;
}
bool UserResource::displayNameIsSet() const
{
    return m_Display_nameIsSet;
}

void UserResource::unsetDisplay_name()
{
    m_Display_nameIsSet = false;
}

utility::string_t UserResource::getEmail() const
{
    return m_Email;
}


void UserResource::setEmail(utility::string_t value)
{
    m_Email = value;
    
}
utility::string_t UserResource::getFirstName() const
{
    return m_First_name;
}


void UserResource::setFirstName(utility::string_t value)
{
    m_First_name = value;
    m_First_nameIsSet = true;
}
bool UserResource::firstNameIsSet() const
{
    return m_First_nameIsSet;
}

void UserResource::unsetFirst_name()
{
    m_First_nameIsSet = false;
}

utility::string_t UserResource::getFullname() const
{
    return m_Fullname;
}


void UserResource::setFullname(utility::string_t value)
{
    m_Fullname = value;
    m_FullnameIsSet = true;
}
bool UserResource::fullnameIsSet() const
{
    return m_FullnameIsSet;
}

void UserResource::unsetFullname()
{
    m_FullnameIsSet = false;
}

utility::string_t UserResource::getGender() const
{
    return m_Gender;
}


void UserResource::setGender(utility::string_t value)
{
    m_Gender = value;
    m_GenderIsSet = true;
}
bool UserResource::genderIsSet() const
{
    return m_GenderIsSet;
}

void UserResource::unsetGender()
{
    m_GenderIsSet = false;
}

int32_t UserResource::getId() const
{
    return m_Id;
}


void UserResource::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool UserResource::idIsSet() const
{
    return m_IdIsSet;
}

void UserResource::unsetId()
{
    m_IdIsSet = false;
}

utility::string_t UserResource::getLanguageCode() const
{
    return m_Language_code;
}


void UserResource::setLanguageCode(utility::string_t value)
{
    m_Language_code = value;
    m_Language_codeIsSet = true;
}
bool UserResource::languageCodeIsSet() const
{
    return m_Language_codeIsSet;
}

void UserResource::unsetLanguage_code()
{
    m_Language_codeIsSet = false;
}

int64_t UserResource::getLastActivity() const
{
    return m_Last_activity;
}


void UserResource::setLastActivity(int64_t value)
{
    m_Last_activity = value;
    m_Last_activityIsSet = true;
}
bool UserResource::lastActivityIsSet() const
{
    return m_Last_activityIsSet;
}

void UserResource::unsetLast_activity()
{
    m_Last_activityIsSet = false;
}

utility::string_t UserResource::getLastName() const
{
    return m_Last_name;
}


void UserResource::setLastName(utility::string_t value)
{
    m_Last_name = value;
    m_Last_nameIsSet = true;
}
bool UserResource::lastNameIsSet() const
{
    return m_Last_nameIsSet;
}

void UserResource::unsetLast_name()
{
    m_Last_nameIsSet = false;
}

int64_t UserResource::getLastUpdated() const
{
    return m_Last_updated;
}


void UserResource::setLastUpdated(int64_t value)
{
    m_Last_updated = value;
    m_Last_updatedIsSet = true;
}
bool UserResource::lastUpdatedIsSet() const
{
    return m_Last_updatedIsSet;
}

void UserResource::unsetLast_updated()
{
    m_Last_updatedIsSet = false;
}

int64_t UserResource::getMemberSince() const
{
    return m_Member_since;
}


void UserResource::setMemberSince(int64_t value)
{
    m_Member_since = value;
    m_Member_sinceIsSet = true;
}
bool UserResource::memberSinceIsSet() const
{
    return m_Member_sinceIsSet;
}

void UserResource::unsetMember_since()
{
    m_Member_sinceIsSet = false;
}

utility::string_t UserResource::getMobileNumber() const
{
    return m_Mobile_number;
}


void UserResource::setMobileNumber(utility::string_t value)
{
    m_Mobile_number = value;
    m_Mobile_numberIsSet = true;
}
bool UserResource::mobileNumberIsSet() const
{
    return m_Mobile_numberIsSet;
}

void UserResource::unsetMobile_number()
{
    m_Mobile_numberIsSet = false;
}

std::vector<std::shared_ptr<UserRelationshipReferenceResource>>& UserResource::getParents()
{
    return m_Parents;
}

void UserResource::setParents(std::vector<std::shared_ptr<UserRelationshipReferenceResource>> value)
{
    m_Parents = value;
    m_ParentsIsSet = true;
}
bool UserResource::parentsIsSet() const
{
    return m_ParentsIsSet;
}

void UserResource::unsetParents()
{
    m_ParentsIsSet = false;
}

utility::string_t UserResource::getPassword() const
{
    return m_Password;
}


void UserResource::setPassword(utility::string_t value)
{
    m_Password = value;
    m_PasswordIsSet = true;
}
bool UserResource::passwordIsSet() const
{
    return m_PasswordIsSet;
}

void UserResource::unsetPassword()
{
    m_PasswordIsSet = false;
}

utility::string_t UserResource::getPostalCode() const
{
    return m_Postal_code;
}


void UserResource::setPostalCode(utility::string_t value)
{
    m_Postal_code = value;
    m_Postal_codeIsSet = true;
}
bool UserResource::postalCodeIsSet() const
{
    return m_Postal_codeIsSet;
}

void UserResource::unsetPostal_code()
{
    m_Postal_codeIsSet = false;
}

utility::string_t UserResource::getState() const
{
    return m_State;
}


void UserResource::setState(utility::string_t value)
{
    m_State = value;
    m_StateIsSet = true;
}
bool UserResource::stateIsSet() const
{
    return m_StateIsSet;
}

void UserResource::unsetState()
{
    m_StateIsSet = false;
}

std::vector<utility::string_t>& UserResource::getTags()
{
    return m_Tags;
}

void UserResource::setTags(std::vector<utility::string_t> value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}
bool UserResource::tagsIsSet() const
{
    return m_TagsIsSet;
}

void UserResource::unsetTags()
{
    m_TagsIsSet = false;
}

utility::string_t UserResource::getTemplate() const
{
    return m_Template;
}


void UserResource::setTemplate(utility::string_t value)
{
    m_Template = value;
    m_TemplateIsSet = true;
}
bool UserResource::templateIsSet() const
{
    return m_TemplateIsSet;
}

void UserResource::unsetTemplate()
{
    m_TemplateIsSet = false;
}

utility::string_t UserResource::getTimezoneCode() const
{
    return m_Timezone_code;
}


void UserResource::setTimezoneCode(utility::string_t value)
{
    m_Timezone_code = value;
    m_Timezone_codeIsSet = true;
}
bool UserResource::timezoneCodeIsSet() const
{
    return m_Timezone_codeIsSet;
}

void UserResource::unsetTimezone_code()
{
    m_Timezone_codeIsSet = false;
}

utility::string_t UserResource::getUsername() const
{
    return m_Username;
}


void UserResource::setUsername(utility::string_t value)
{
    m_Username = value;
    
}
}
}
}
}

