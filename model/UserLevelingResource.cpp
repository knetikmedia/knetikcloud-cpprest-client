/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "UserLevelingResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

UserLevelingResource::UserLevelingResource()
{
    m_Last_tier_name = U("");
    m_Last_tier_progress = 0;
    m_Level_name = U("");
    m_Next_tier_name = U("");
    m_Next_tier_progress = 0;
    m_Progress = 0;
    m_User_id = 0;
}

UserLevelingResource::~UserLevelingResource()
{
}

void UserLevelingResource::validate()
{
    // TODO: implement validation
}

web::json::value UserLevelingResource::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("last_tier_name")] = ModelBase::toJson(m_Last_tier_name);
    val[U("last_tier_progress")] = ModelBase::toJson(m_Last_tier_progress);
    val[U("level_name")] = ModelBase::toJson(m_Level_name);
    val[U("next_tier_name")] = ModelBase::toJson(m_Next_tier_name);
    val[U("next_tier_progress")] = ModelBase::toJson(m_Next_tier_progress);
    val[U("progress")] = ModelBase::toJson(m_Progress);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tier_names )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[U("tier_names")] = web::json::value::array(jsonArray);
    }
    val[U("user_id")] = ModelBase::toJson(m_User_id);

    return val;
}

void UserLevelingResource::fromJson(web::json::value& val)
{
    setLastTierName(ModelBase::stringFromJson(val[U("last_tier_name")]));
    setLastTierProgress(ModelBase::int32_tFromJson(val[U("last_tier_progress")]));
    setLevelName(ModelBase::stringFromJson(val[U("level_name")]));
    setNextTierName(ModelBase::stringFromJson(val[U("next_tier_name")]));
    setNextTierProgress(ModelBase::int32_tFromJson(val[U("next_tier_progress")]));
    setProgress(ModelBase::int32_tFromJson(val[U("progress")]));
    {
        m_Tier_names.clear();
        std::vector<web::json::value> jsonArray;
        for( auto& item : val[U("tier_names")].as_array() )
        {
            m_Tier_names.push_back(ModelBase::stringFromJson(item));
        }
    }
    setUserId(ModelBase::int32_tFromJson(val[U("user_id")]));
}

void UserLevelingResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("last_tier_name"), m_Last_tier_name));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("last_tier_progress"), m_Last_tier_progress));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("level_name"), m_Level_name));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("next_tier_name"), m_Next_tier_name));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("next_tier_progress"), m_Next_tier_progress));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("progress"), m_Progress));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tier_names )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + U("tier_names"), web::json::value::array(jsonArray), U("application/json")));
            }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("user_id"), m_User_id));
}

void UserLevelingResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setLastTierName(ModelBase::stringFromHttpContent(multipart->getContent(U("last_tier_name"))));
    setLastTierProgress(ModelBase::int32_tFromHttpContent(multipart->getContent(U("last_tier_progress"))));
    setLevelName(ModelBase::stringFromHttpContent(multipart->getContent(U("level_name"))));
    setNextTierName(ModelBase::stringFromHttpContent(multipart->getContent(U("next_tier_name"))));
    setNextTierProgress(ModelBase::int32_tFromHttpContent(multipart->getContent(U("next_tier_progress"))));
    setProgress(ModelBase::int32_tFromHttpContent(multipart->getContent(U("progress"))));
    {
        m_Tier_names.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("tier_names"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Tier_names.push_back(ModelBase::stringFromJson(item));
        }
    }
    setUserId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("user_id"))));
}

utility::string_t UserLevelingResource::getLastTierName() const
{
    return m_Last_tier_name;
}


void UserLevelingResource::setLastTierName(utility::string_t value)
{
    m_Last_tier_name = value;
    
}
int32_t UserLevelingResource::getLastTierProgress() const
{
    return m_Last_tier_progress;
}


void UserLevelingResource::setLastTierProgress(int32_t value)
{
    m_Last_tier_progress = value;
    
}
utility::string_t UserLevelingResource::getLevelName() const
{
    return m_Level_name;
}


void UserLevelingResource::setLevelName(utility::string_t value)
{
    m_Level_name = value;
    
}
utility::string_t UserLevelingResource::getNextTierName() const
{
    return m_Next_tier_name;
}


void UserLevelingResource::setNextTierName(utility::string_t value)
{
    m_Next_tier_name = value;
    
}
int32_t UserLevelingResource::getNextTierProgress() const
{
    return m_Next_tier_progress;
}


void UserLevelingResource::setNextTierProgress(int32_t value)
{
    m_Next_tier_progress = value;
    
}
int32_t UserLevelingResource::getProgress() const
{
    return m_Progress;
}


void UserLevelingResource::setProgress(int32_t value)
{
    m_Progress = value;
    
}
std::vector<utility::string_t>& UserLevelingResource::getTierNames()
{
    return m_Tier_names;
}

void UserLevelingResource::setTierNames(std::vector<utility::string_t> value)
{
    m_Tier_names = value;
    
}
int32_t UserLevelingResource::getUserId() const
{
    return m_User_id;
}


void UserLevelingResource::setUserId(int32_t value)
{
    m_User_id = value;
    
}
}
}
}
}

