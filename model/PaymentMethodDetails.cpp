/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PaymentMethodDetails.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

PaymentMethodDetails::PaymentMethodDetails()
{
    m_Default = false;
    m_DefaultIsSet = false;
    m_Expiration_date = 0L;
    m_Expiration_dateIsSet = false;
    m_Expiration_month = 0;
    m_Expiration_monthIsSet = false;
    m_Expiration_year = 0;
    m_Expiration_yearIsSet = false;
    m_Last4 = U("");
    m_Last4IsSet = false;
    m_Sort = 0;
    m_SortIsSet = false;
    m_Unique_key = U("");
    m_Unique_keyIsSet = false;
    m_Verified = false;
    m_VerifiedIsSet = false;
}

PaymentMethodDetails::~PaymentMethodDetails()
{
}

void PaymentMethodDetails::validate()
{
    // TODO: implement validation
}

web::json::value PaymentMethodDetails::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_DefaultIsSet)
    {
        val[U("default")] = ModelBase::toJson(m_Default);
    }
    if(m_Expiration_dateIsSet)
    {
        val[U("expiration_date")] = ModelBase::toJson(m_Expiration_date);
    }
    if(m_Expiration_monthIsSet)
    {
        val[U("expiration_month")] = ModelBase::toJson(m_Expiration_month);
    }
    if(m_Expiration_yearIsSet)
    {
        val[U("expiration_year")] = ModelBase::toJson(m_Expiration_year);
    }
    if(m_Last4IsSet)
    {
        val[U("last4")] = ModelBase::toJson(m_Last4);
    }
    if(m_SortIsSet)
    {
        val[U("sort")] = ModelBase::toJson(m_Sort);
    }
    if(m_Unique_keyIsSet)
    {
        val[U("unique_key")] = ModelBase::toJson(m_Unique_key);
    }
    if(m_VerifiedIsSet)
    {
        val[U("verified")] = ModelBase::toJson(m_Verified);
    }

    return val;
}

void PaymentMethodDetails::fromJson(web::json::value& val)
{
    if(val.has_field(U("default")))
    {
        setDefault(ModelBase::boolFromJson(val[U("default")]));
    }
    if(val.has_field(U("expiration_date")))
    {
        setExpirationDate(ModelBase::int64_tFromJson(val[U("expiration_date")]));
    }
    if(val.has_field(U("expiration_month")))
    {
        setExpirationMonth(ModelBase::int32_tFromJson(val[U("expiration_month")]));
    }
    if(val.has_field(U("expiration_year")))
    {
        setExpirationYear(ModelBase::int32_tFromJson(val[U("expiration_year")]));
    }
    if(val.has_field(U("last4")))
    {
        setLast4(ModelBase::stringFromJson(val[U("last4")]));
    }
    if(val.has_field(U("sort")))
    {
        setSort(ModelBase::int32_tFromJson(val[U("sort")]));
    }
    if(val.has_field(U("unique_key")))
    {
        setUniqueKey(ModelBase::stringFromJson(val[U("unique_key")]));
    }
    if(val.has_field(U("verified")))
    {
        setVerified(ModelBase::boolFromJson(val[U("verified")]));
    }
}

void PaymentMethodDetails::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_DefaultIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("default"), m_Default));
    }
    if(m_Expiration_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("expiration_date"), m_Expiration_date));
    }
    if(m_Expiration_monthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("expiration_month"), m_Expiration_month));
    }
    if(m_Expiration_yearIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("expiration_year"), m_Expiration_year));
    }
    if(m_Last4IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("last4"), m_Last4));
        
    }
    if(m_SortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("sort"), m_Sort));
    }
    if(m_Unique_keyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("unique_key"), m_Unique_key));
        
    }
    if(m_VerifiedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("verified"), m_Verified));
    }
}

void PaymentMethodDetails::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("default")))
    {
        setDefault(ModelBase::boolFromHttpContent(multipart->getContent(U("default"))));
    }
    if(multipart->hasContent(U("expiration_date")))
    {
        setExpirationDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("expiration_date"))));
    }
    if(multipart->hasContent(U("expiration_month")))
    {
        setExpirationMonth(ModelBase::int32_tFromHttpContent(multipart->getContent(U("expiration_month"))));
    }
    if(multipart->hasContent(U("expiration_year")))
    {
        setExpirationYear(ModelBase::int32_tFromHttpContent(multipart->getContent(U("expiration_year"))));
    }
    if(multipart->hasContent(U("last4")))
    {
        setLast4(ModelBase::stringFromHttpContent(multipart->getContent(U("last4"))));
    }
    if(multipart->hasContent(U("sort")))
    {
        setSort(ModelBase::int32_tFromHttpContent(multipart->getContent(U("sort"))));
    }
    if(multipart->hasContent(U("unique_key")))
    {
        setUniqueKey(ModelBase::stringFromHttpContent(multipart->getContent(U("unique_key"))));
    }
    if(multipart->hasContent(U("verified")))
    {
        setVerified(ModelBase::boolFromHttpContent(multipart->getContent(U("verified"))));
    }
}

bool PaymentMethodDetails::getDefault() const
{
    return m_Default;
}


void PaymentMethodDetails::setDefault(bool value)
{
    m_Default = value;
    m_DefaultIsSet = true;
}
bool PaymentMethodDetails::defaultIsSet() const
{
    return m_DefaultIsSet;
}

void PaymentMethodDetails::unsetDefault()
{
    m_DefaultIsSet = false;
}

int64_t PaymentMethodDetails::getExpirationDate() const
{
    return m_Expiration_date;
}


void PaymentMethodDetails::setExpirationDate(int64_t value)
{
    m_Expiration_date = value;
    m_Expiration_dateIsSet = true;
}
bool PaymentMethodDetails::expirationDateIsSet() const
{
    return m_Expiration_dateIsSet;
}

void PaymentMethodDetails::unsetExpiration_date()
{
    m_Expiration_dateIsSet = false;
}

int32_t PaymentMethodDetails::getExpirationMonth() const
{
    return m_Expiration_month;
}


void PaymentMethodDetails::setExpirationMonth(int32_t value)
{
    m_Expiration_month = value;
    m_Expiration_monthIsSet = true;
}
bool PaymentMethodDetails::expirationMonthIsSet() const
{
    return m_Expiration_monthIsSet;
}

void PaymentMethodDetails::unsetExpiration_month()
{
    m_Expiration_monthIsSet = false;
}

int32_t PaymentMethodDetails::getExpirationYear() const
{
    return m_Expiration_year;
}


void PaymentMethodDetails::setExpirationYear(int32_t value)
{
    m_Expiration_year = value;
    m_Expiration_yearIsSet = true;
}
bool PaymentMethodDetails::expirationYearIsSet() const
{
    return m_Expiration_yearIsSet;
}

void PaymentMethodDetails::unsetExpiration_year()
{
    m_Expiration_yearIsSet = false;
}

utility::string_t PaymentMethodDetails::getLast4() const
{
    return m_Last4;
}


void PaymentMethodDetails::setLast4(utility::string_t value)
{
    m_Last4 = value;
    m_Last4IsSet = true;
}
bool PaymentMethodDetails::last4IsSet() const
{
    return m_Last4IsSet;
}

void PaymentMethodDetails::unsetLast4()
{
    m_Last4IsSet = false;
}

int32_t PaymentMethodDetails::getSort() const
{
    return m_Sort;
}


void PaymentMethodDetails::setSort(int32_t value)
{
    m_Sort = value;
    m_SortIsSet = true;
}
bool PaymentMethodDetails::sortIsSet() const
{
    return m_SortIsSet;
}

void PaymentMethodDetails::unsetSort()
{
    m_SortIsSet = false;
}

utility::string_t PaymentMethodDetails::getUniqueKey() const
{
    return m_Unique_key;
}


void PaymentMethodDetails::setUniqueKey(utility::string_t value)
{
    m_Unique_key = value;
    m_Unique_keyIsSet = true;
}
bool PaymentMethodDetails::uniqueKeyIsSet() const
{
    return m_Unique_keyIsSet;
}

void PaymentMethodDetails::unsetUnique_key()
{
    m_Unique_keyIsSet = false;
}

bool PaymentMethodDetails::getVerified() const
{
    return m_Verified;
}


void PaymentMethodDetails::setVerified(bool value)
{
    m_Verified = value;
    m_VerifiedIsSet = true;
}
bool PaymentMethodDetails::verifiedIsSet() const
{
    return m_VerifiedIsSet;
}

void PaymentMethodDetails::unsetVerified()
{
    m_VerifiedIsSet = false;
}

}
}
}
}

