/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "MapResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

MapResource::MapResource()
{
    m_mapIsSet = false;
    m_Type = U("");
    m_TypeIsSet = false;
    
}

MapResource::~MapResource()
{
}

void MapResource::validate()
{
    // TODO: implement validation
}

web::json::value MapResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_mapIsSet)
    {
        val[U("map")] = ModelBase::toJson(m_map);
    }
    if(m_TypeIsSet)
    {
        val[U("type")] = ModelBase::toJson(m_Type);
    }
    

    return val;
}

void MapResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("map")))
    {
        if(!val[U("map")].is_null())
        {
            std::map<utility::string_t, std::shared_ptr<ExpressionResource>> newItem(std::map<utility::string_t, ExpressionResource>());
            newItem->fromJson(val[U("map")]);
            setMap( newItem );
        }
        
    }
    if(val.has_field(U("type")))
    {
        setType(ModelBase::stringFromJson(val[U("type")]));
        
    }
    
}

void MapResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_mapIsSet)
    {
        if (m_map.get())
        {
            m_map->toMultipart(multipart, U("map."));
        }
        
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("type"), m_Type));
        
    }
    
}

void MapResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("map")))
    {
        if(multipart->hasContent(U("map")))
        {
            std::map<utility::string_t, std::shared_ptr<ExpressionResource>> newItem(std::map<utility::string_t, ExpressionResource>());
            newItem->fromMultiPart(multipart, U("map."));
            setMap( newItem );
        }
        
    }
    if(multipart->hasContent(U("type")))
    {
        setType(ModelBase::stringFromHttpContent(multipart->getContent(U("type"))));
        
    }
    
}


std::map<utility::string_t, std::shared_ptr<ExpressionResource>>& MapResource::getMap()
{
    return m_map;
}
bool MapResource::mapIsSet() const
{
    return m_mapIsSet;
}
void MapResource::unsetmap()
{
    m_mapIsSet = false;
}
utility::string_t MapResource::getType() const
{
    return m_Type;
}
void MapResource::setType(utility::string_t value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool MapResource::typeIsSet() const
{
    return m_TypeIsSet;
}
void MapResource::unsetType()
{
    m_TypeIsSet = false;
}

}
}
}
}

