/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * ActivityOccurrenceSettingsResource.h
 *
 * 
 */

#ifndef ActivityOccurrenceSettingsResource_H_
#define ActivityOccurrenceSettingsResource_H_


#include "ModelBase.h"

#include "SelectedSettingRequest.h"
#include "CoreActivityOccurrenceSettings.h"
#include <vector>

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ActivityOccurrenceSettingsResource
    : public ModelBase
{
public:
    ActivityOccurrenceSettingsResource();
    virtual ~ActivityOccurrenceSettingsResource();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ActivityOccurrenceSettingsResource members

    /// <summary>
    /// Defines core settings about the activity occurrence that affect how it behaves in the system. Validated against core settings in activity/challenge-activity.
    /// </summary>
    std::shared_ptr<CoreActivityOccurrenceSettings> getCoreSettings() const;
    bool coreSettingsIsSet() const;
    void unsetCore_settings();
    void setCoreSettings(std::shared_ptr<CoreActivityOccurrenceSettings> value);
    /// <summary>
    /// The values selected from the available settings defined for the activity. Ex: difficulty: hard. Can be left out if the activity is played during an event and the settings are already set at the event level. Ex: every monday, difficulty: hard, number of questions: 10, category: sport. Otherwise, the set must exactly match those of the activity.
    /// </summary>
    std::vector<std::shared_ptr<SelectedSettingRequest>>& getSettings();
    bool settingsIsSet() const;
    void unsetSettings();
    void setSettings(std::vector<std::shared_ptr<SelectedSettingRequest>> value);

protected:
    std::shared_ptr<CoreActivityOccurrenceSettings> m_Core_settings;
    bool m_Core_settingsIsSet;
    std::vector<std::shared_ptr<SelectedSettingRequest>> m_Settings;
    bool m_SettingsIsSet;
};

}
}
}
}

#endif /* ActivityOccurrenceSettingsResource_H_ */
