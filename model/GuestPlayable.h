/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * GuestPlayable.h
 *
 * 
 */

#ifndef GuestPlayable_H_
#define GuestPlayable_H_


#include "ModelBase.h"

#include "Behavior.h"
#include <cpprest/details/basic_types.h>

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  GuestPlayable
    : public ModelBase
{
public:
    GuestPlayable();
    virtual ~GuestPlayable();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// GuestPlayable members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    void setDescription(utility::string_t value);
    bool descriptionIsSet() const;
    void unsetDescription();
    /// <summary>
    /// Used for polymorphic type recognition and thus must match an expected type with additional properties
    /// </summary>
    utility::string_t getTypeHint() const;
    void setTypeHint(utility::string_t value);
    bool type_hintIsSet() const;
    void unsetType_hint();
    /// <summary>
    /// Whether guests are allowed to use items
    /// </summary>
    bool getAllowed() const;
    void setAllowed(bool value);
    bool allowedIsSet() const;
    void unsetAllowed();
    /// <summary>
    /// Whether guests are allowed on the leaderboard
    /// </summary>
    bool getLeaderboard() const;
    void setLeaderboard(bool value);
    bool leaderboardIsSet() const;
    void unsetLeaderboard();

protected:
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
utility::string_t m_Type_hint;
    bool m_Type_hintIsSet;
bool m_Allowed;
    bool m_AllowedIsSet;
bool m_Leaderboard;
    bool m_LeaderboardIsSet;
};

}
}
}
}

#endif /* GuestPlayable_H_ */
