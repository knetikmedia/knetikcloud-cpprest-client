/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * ActivityOccurrenceResource.h
 *
 * A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings
 */

#ifndef ActivityOccurrenceResource_H_
#define ActivityOccurrenceResource_H_


#include "ModelBase.h"

#include "ActivityUserResource.h"
#include "ActivityEntitlementResource.h"
#include "SelectedSettingResource.h"
#include <cpprest/details/basic_types.h>
#include "SimpleUserResource.h"
#include "CoreActivityOccurrenceSettings.h"
#include <vector>

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings
/// </summary>
class  ActivityOccurrenceResource
    : public ModelBase
{
public:
    ActivityOccurrenceResource();
    virtual ~ActivityOccurrenceResource();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ActivityOccurrenceResource members

    /// <summary>
    /// The id of the activity
    /// </summary>
    int64_t getActivityId() const;
        void setActivityId(int64_t value);
    /// <summary>
    /// The ids of banned users that cannot join the occurrence. See occurrence-user delete endpoint
    /// </summary>
    std::vector<int32_t>& getBans();
    bool bansIsSet() const;
    void unsetBans();
    void setBans(std::vector<int32_t> value);
    /// <summary>
    /// The id of the challenge activity (as part of the event, required if eventId set)
    /// </summary>
    int64_t getChallengeActivityId() const;
    bool challengeActivityIdIsSet() const;
    void unsetChallenge_activity_id();
    void setChallengeActivityId(int64_t value);
    /// <summary>
    /// Defines core settings about the activity occurrence that affect how it behaves in the system. Validated against core settings in activity/challenge-activity.
    /// </summary>
    std::shared_ptr<CoreActivityOccurrenceSettings> getCoreSettings() const;
    bool coreSettingsIsSet() const;
    void unsetCore_settings();
    void setCoreSettings(std::shared_ptr<CoreActivityOccurrenceSettings> value);
    /// <summary>
    /// The date this occurrence was created, unix timestamp in seconds
    /// </summary>
    int64_t getCreatedDate() const;
    bool createdDateIsSet() const;
    void unsetCreated_date();
    void setCreatedDate(int64_t value);
    /// <summary>
    /// The entitlement item required to enter the occurrence. Required if not part of an event. Must come from the set of entitlement items listed in the activity
    /// </summary>
    std::shared_ptr<ActivityEntitlementResource> getEntitlement() const;
    bool entitlementIsSet() const;
    void unsetEntitlement();
    void setEntitlement(std::shared_ptr<ActivityEntitlementResource> value);
    /// <summary>
    /// The id of the event
    /// </summary>
    int64_t getEventId() const;
    bool eventIdIsSet() const;
    void unsetEvent_id();
    void setEventId(int64_t value);
    /// <summary>
    /// The host of the occurrence, if not a participant (will be left out of users array). Must be the caller that creates the occurrence unless admin. Requires activity/challenge to allow host_option of &#39;non_player&#39; if not admin as well
    /// </summary>
    std::shared_ptr<SimpleUserResource> getHost() const;
    bool hostIsSet() const;
    void unsetHost();
    void setHost(std::shared_ptr<SimpleUserResource> value);
    /// <summary>
    /// The id of the activity occurrence
    /// </summary>
    int64_t getId() const;
    bool idIsSet() const;
    void unsetId();
    void setId(int64_t value);
    /// <summary>
    /// Indicate if the rewards have been given out already
    /// </summary>
    utility::string_t getRewardStatus() const;
    bool rewardStatusIsSet() const;
    void unsetReward_status();
    void setRewardStatus(utility::string_t value);
    /// <summary>
    /// The values selected from the available settings defined for the activity. Ex: difficulty: hard. Can be left out if the activity is played during an event and the settings are already set at the event level. Ex: every monday, difficulty: hard, number of questions: 10, category: sport. Otherwise, the set must exactly match those of the activity.
    /// </summary>
    std::vector<std::shared_ptr<SelectedSettingResource>>& getSettings();
    bool settingsIsSet() const;
    void unsetSettings();
    void setSettings(std::vector<std::shared_ptr<SelectedSettingResource>> value);
    /// <summary>
    /// Whether this occurrence will be ran as a simulation. Simulations will not be rewarded. Useful for bot play or trials
    /// </summary>
    bool getSimulated() const;
    bool simulatedIsSet() const;
    void unsetSimulated();
    void setSimulated(bool value);
    /// <summary>
    /// The date this occurrence was started, unix timestamp in seconds. null if not yet started
    /// </summary>
    int64_t getStartDate() const;
    bool startDateIsSet() const;
    void unsetStart_date();
    void setStartDate(int64_t value);
    /// <summary>
    /// The current status of the occurrence (default: OPEN)
    /// </summary>
    utility::string_t getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();
    void setStatus(utility::string_t value);
    /// <summary>
    /// The date this occurrence was last updated, unix timestamp in seconds
    /// </summary>
    int64_t getUpdatedDate() const;
    bool updatedDateIsSet() const;
    void unsetUpdated_date();
    void setUpdatedDate(int64_t value);
    /// <summary>
    /// The list of users participating in this occurrence. Can only be set directly with ACTIVITIES_ADMIN permission
    /// </summary>
    std::vector<std::shared_ptr<ActivityUserResource>>& getUsers();
    bool usersIsSet() const;
    void unsetUsers();
    void setUsers(std::vector<std::shared_ptr<ActivityUserResource>> value);

protected:
    int64_t m_Activity_id;
        std::vector<int32_t> m_Bans;
    bool m_BansIsSet;
    int64_t m_Challenge_activity_id;
    bool m_Challenge_activity_idIsSet;
    std::shared_ptr<CoreActivityOccurrenceSettings> m_Core_settings;
    bool m_Core_settingsIsSet;
    int64_t m_Created_date;
    bool m_Created_dateIsSet;
    std::shared_ptr<ActivityEntitlementResource> m_Entitlement;
    bool m_EntitlementIsSet;
    int64_t m_Event_id;
    bool m_Event_idIsSet;
    std::shared_ptr<SimpleUserResource> m_Host;
    bool m_HostIsSet;
    int64_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Reward_status;
    bool m_Reward_statusIsSet;
    std::vector<std::shared_ptr<SelectedSettingResource>> m_Settings;
    bool m_SettingsIsSet;
    bool m_Simulated;
    bool m_SimulatedIsSet;
    int64_t m_Start_date;
    bool m_Start_dateIsSet;
    utility::string_t m_Status;
    bool m_StatusIsSet;
    int64_t m_Updated_date;
    bool m_Updated_dateIsSet;
    std::vector<std::shared_ptr<ActivityUserResource>> m_Users;
    bool m_UsersIsSet;
};

}
}
}
}

#endif /* ActivityOccurrenceResource_H_ */
