/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PaymentMethodTypeResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

PaymentMethodTypeResource::PaymentMethodTypeResource()
{
    m_Id = 0;
    m_Invoice_processing_hours = 0;
    m_Invoice_processing_hoursIsSet = false;
    m_Name = U("");
    m_Supports_capture = false;
    m_Supports_captureIsSet = false;
    m_Supports_partial = false;
    m_Supports_partialIsSet = false;
    m_Supports_rebill = false;
    m_Supports_rebillIsSet = false;
    m_Supports_refunds = false;
    m_Supports_refundsIsSet = false;
}

PaymentMethodTypeResource::~PaymentMethodTypeResource()
{
}

void PaymentMethodTypeResource::validate()
{
    // TODO: implement validation
}

web::json::value PaymentMethodTypeResource::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("id")] = ModelBase::toJson(m_Id);
    if(m_Invoice_processing_hoursIsSet)
    {
        val[U("invoice_processing_hours")] = ModelBase::toJson(m_Invoice_processing_hours);
    }
    val[U("name")] = ModelBase::toJson(m_Name);
    if(m_Supports_captureIsSet)
    {
        val[U("supports_capture")] = ModelBase::toJson(m_Supports_capture);
    }
    if(m_Supports_partialIsSet)
    {
        val[U("supports_partial")] = ModelBase::toJson(m_Supports_partial);
    }
    if(m_Supports_rebillIsSet)
    {
        val[U("supports_rebill")] = ModelBase::toJson(m_Supports_rebill);
    }
    if(m_Supports_refundsIsSet)
    {
        val[U("supports_refunds")] = ModelBase::toJson(m_Supports_refunds);
    }

    return val;
}

void PaymentMethodTypeResource::fromJson(web::json::value& val)
{
    setId(ModelBase::int32_tFromJson(val[U("id")]));
    if(val.has_field(U("invoice_processing_hours")))
    {
        setInvoiceProcessingHours(ModelBase::int32_tFromJson(val[U("invoice_processing_hours")]));
    }
    setName(ModelBase::stringFromJson(val[U("name")]));
    if(val.has_field(U("supports_capture")))
    {
        setSupportsCapture(ModelBase::boolFromJson(val[U("supports_capture")]));
    }
    if(val.has_field(U("supports_partial")))
    {
        setSupportsPartial(ModelBase::boolFromJson(val[U("supports_partial")]));
    }
    if(val.has_field(U("supports_rebill")))
    {
        setSupportsRebill(ModelBase::boolFromJson(val[U("supports_rebill")]));
    }
    if(val.has_field(U("supports_refunds")))
    {
        setSupportsRefunds(ModelBase::boolFromJson(val[U("supports_refunds")]));
    }
}

void PaymentMethodTypeResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    if(m_Invoice_processing_hoursIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("invoice_processing_hours"), m_Invoice_processing_hours));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    if(m_Supports_captureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("supports_capture"), m_Supports_capture));
    }
    if(m_Supports_partialIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("supports_partial"), m_Supports_partial));
    }
    if(m_Supports_rebillIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("supports_rebill"), m_Supports_rebill));
    }
    if(m_Supports_refundsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("supports_refunds"), m_Supports_refunds));
    }
}

void PaymentMethodTypeResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("id"))));
    if(multipart->hasContent(U("invoice_processing_hours")))
    {
        setInvoiceProcessingHours(ModelBase::int32_tFromHttpContent(multipart->getContent(U("invoice_processing_hours"))));
    }
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    if(multipart->hasContent(U("supports_capture")))
    {
        setSupportsCapture(ModelBase::boolFromHttpContent(multipart->getContent(U("supports_capture"))));
    }
    if(multipart->hasContent(U("supports_partial")))
    {
        setSupportsPartial(ModelBase::boolFromHttpContent(multipart->getContent(U("supports_partial"))));
    }
    if(multipart->hasContent(U("supports_rebill")))
    {
        setSupportsRebill(ModelBase::boolFromHttpContent(multipart->getContent(U("supports_rebill"))));
    }
    if(multipart->hasContent(U("supports_refunds")))
    {
        setSupportsRefunds(ModelBase::boolFromHttpContent(multipart->getContent(U("supports_refunds"))));
    }
}

int32_t PaymentMethodTypeResource::getId() const
{
    return m_Id;
}


void PaymentMethodTypeResource::setId(int32_t value)
{
    m_Id = value;
    
}
int32_t PaymentMethodTypeResource::getInvoiceProcessingHours() const
{
    return m_Invoice_processing_hours;
}


void PaymentMethodTypeResource::setInvoiceProcessingHours(int32_t value)
{
    m_Invoice_processing_hours = value;
    m_Invoice_processing_hoursIsSet = true;
}
bool PaymentMethodTypeResource::invoiceProcessingHoursIsSet() const
{
    return m_Invoice_processing_hoursIsSet;
}

void PaymentMethodTypeResource::unsetInvoice_processing_hours()
{
    m_Invoice_processing_hoursIsSet = false;
}

utility::string_t PaymentMethodTypeResource::getName() const
{
    return m_Name;
}


void PaymentMethodTypeResource::setName(utility::string_t value)
{
    m_Name = value;
    
}
bool PaymentMethodTypeResource::getSupportsCapture() const
{
    return m_Supports_capture;
}


void PaymentMethodTypeResource::setSupportsCapture(bool value)
{
    m_Supports_capture = value;
    m_Supports_captureIsSet = true;
}
bool PaymentMethodTypeResource::supportsCaptureIsSet() const
{
    return m_Supports_captureIsSet;
}

void PaymentMethodTypeResource::unsetSupports_capture()
{
    m_Supports_captureIsSet = false;
}

bool PaymentMethodTypeResource::getSupportsPartial() const
{
    return m_Supports_partial;
}


void PaymentMethodTypeResource::setSupportsPartial(bool value)
{
    m_Supports_partial = value;
    m_Supports_partialIsSet = true;
}
bool PaymentMethodTypeResource::supportsPartialIsSet() const
{
    return m_Supports_partialIsSet;
}

void PaymentMethodTypeResource::unsetSupports_partial()
{
    m_Supports_partialIsSet = false;
}

bool PaymentMethodTypeResource::getSupportsRebill() const
{
    return m_Supports_rebill;
}


void PaymentMethodTypeResource::setSupportsRebill(bool value)
{
    m_Supports_rebill = value;
    m_Supports_rebillIsSet = true;
}
bool PaymentMethodTypeResource::supportsRebillIsSet() const
{
    return m_Supports_rebillIsSet;
}

void PaymentMethodTypeResource::unsetSupports_rebill()
{
    m_Supports_rebillIsSet = false;
}

bool PaymentMethodTypeResource::getSupportsRefunds() const
{
    return m_Supports_refunds;
}


void PaymentMethodTypeResource::setSupportsRefunds(bool value)
{
    m_Supports_refunds = value;
    m_Supports_refundsIsSet = true;
}
bool PaymentMethodTypeResource::supportsRefundsIsSet() const
{
    return m_Supports_refundsIsSet;
}

void PaymentMethodTypeResource::unsetSupports_refunds()
{
    m_Supports_refundsIsSet = false;
}

}
}
}
}

