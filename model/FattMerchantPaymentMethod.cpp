/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "FattMerchantPaymentMethod.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

FattMerchantPaymentMethod::FattMerchantPaymentMethod()
{
    m_Address1 = U("");
    m_Address1IsSet = false;
    m_Address2 = U("");
    m_Address2IsSet = false;
    m_Address_city = U("");
    m_Address_cityIsSet = false;
    m_Address_country = U("");
    m_Address_countryIsSet = false;
    m_Address_state = U("");
    m_Address_stateIsSet = false;
    m_Address_zip = U("");
    m_Address_zipIsSet = false;
    m_Card_last_four = U("");
    m_Created_at = U("");
    m_Created_atIsSet = false;
    m_Customer_id = U("");
    m_Deleted_at = U("");
    m_Deleted_atIsSet = false;
    m_Id = U("");
    m_IdIsSet = false;
    m_Nickname = U("");
    m_Updated_at = U("");
    m_Updated_atIsSet = false;
}

FattMerchantPaymentMethod::~FattMerchantPaymentMethod()
{
}

void FattMerchantPaymentMethod::validate()
{
    // TODO: implement validation
}

web::json::value FattMerchantPaymentMethod::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Address1IsSet)
    {
        val[U("address1")] = ModelBase::toJson(m_Address1);
    }
    if(m_Address2IsSet)
    {
        val[U("address2")] = ModelBase::toJson(m_Address2);
    }
    if(m_Address_cityIsSet)
    {
        val[U("address_city")] = ModelBase::toJson(m_Address_city);
    }
    if(m_Address_countryIsSet)
    {
        val[U("address_country")] = ModelBase::toJson(m_Address_country);
    }
    if(m_Address_stateIsSet)
    {
        val[U("address_state")] = ModelBase::toJson(m_Address_state);
    }
    if(m_Address_zipIsSet)
    {
        val[U("address_zip")] = ModelBase::toJson(m_Address_zip);
    }
    val[U("card_last_four")] = ModelBase::toJson(m_Card_last_four);
    if(m_Created_atIsSet)
    {
        val[U("created_at")] = ModelBase::toJson(m_Created_at);
    }
    val[U("customer_id")] = ModelBase::toJson(m_Customer_id);
    if(m_Deleted_atIsSet)
    {
        val[U("deleted_at")] = ModelBase::toJson(m_Deleted_at);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    val[U("nickname")] = ModelBase::toJson(m_Nickname);
    if(m_Updated_atIsSet)
    {
        val[U("updated_at")] = ModelBase::toJson(m_Updated_at);
    }

    return val;
}

void FattMerchantPaymentMethod::fromJson(web::json::value& val)
{
    if(val.has_field(U("address1")))
    {
        setAddress1(ModelBase::stringFromJson(val[U("address1")]));
    }
    if(val.has_field(U("address2")))
    {
        setAddress2(ModelBase::stringFromJson(val[U("address2")]));
    }
    if(val.has_field(U("address_city")))
    {
        setAddressCity(ModelBase::stringFromJson(val[U("address_city")]));
    }
    if(val.has_field(U("address_country")))
    {
        setAddressCountry(ModelBase::stringFromJson(val[U("address_country")]));
    }
    if(val.has_field(U("address_state")))
    {
        setAddressState(ModelBase::stringFromJson(val[U("address_state")]));
    }
    if(val.has_field(U("address_zip")))
    {
        setAddressZip(ModelBase::stringFromJson(val[U("address_zip")]));
    }
    setCardLastFour(ModelBase::stringFromJson(val[U("card_last_four")]));
    if(val.has_field(U("created_at")))
    {
        setCreatedAt(ModelBase::stringFromJson(val[U("created_at")]));
    }
    setCustomerId(ModelBase::stringFromJson(val[U("customer_id")]));
    if(val.has_field(U("deleted_at")))
    {
        setDeletedAt(ModelBase::stringFromJson(val[U("deleted_at")]));
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::stringFromJson(val[U("id")]));
    }
    setNickname(ModelBase::stringFromJson(val[U("nickname")]));
    if(val.has_field(U("updated_at")))
    {
        setUpdatedAt(ModelBase::stringFromJson(val[U("updated_at")]));
    }
}

void FattMerchantPaymentMethod::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Address1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("address1"), m_Address1));
        
    }
    if(m_Address2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("address2"), m_Address2));
        
    }
    if(m_Address_cityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("address_city"), m_Address_city));
        
    }
    if(m_Address_countryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("address_country"), m_Address_country));
        
    }
    if(m_Address_stateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("address_state"), m_Address_state));
        
    }
    if(m_Address_zipIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("address_zip"), m_Address_zip));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("card_last_four"), m_Card_last_four));
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("created_at"), m_Created_at));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("customer_id"), m_Customer_id));
    if(m_Deleted_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("deleted_at"), m_Deleted_at));
        
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("nickname"), m_Nickname));
    if(m_Updated_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("updated_at"), m_Updated_at));
        
    }
}

void FattMerchantPaymentMethod::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("address1")))
    {
        setAddress1(ModelBase::stringFromHttpContent(multipart->getContent(U("address1"))));
    }
    if(multipart->hasContent(U("address2")))
    {
        setAddress2(ModelBase::stringFromHttpContent(multipart->getContent(U("address2"))));
    }
    if(multipart->hasContent(U("address_city")))
    {
        setAddressCity(ModelBase::stringFromHttpContent(multipart->getContent(U("address_city"))));
    }
    if(multipart->hasContent(U("address_country")))
    {
        setAddressCountry(ModelBase::stringFromHttpContent(multipart->getContent(U("address_country"))));
    }
    if(multipart->hasContent(U("address_state")))
    {
        setAddressState(ModelBase::stringFromHttpContent(multipart->getContent(U("address_state"))));
    }
    if(multipart->hasContent(U("address_zip")))
    {
        setAddressZip(ModelBase::stringFromHttpContent(multipart->getContent(U("address_zip"))));
    }
    setCardLastFour(ModelBase::stringFromHttpContent(multipart->getContent(U("card_last_four"))));
    if(multipart->hasContent(U("created_at")))
    {
        setCreatedAt(ModelBase::stringFromHttpContent(multipart->getContent(U("created_at"))));
    }
    setCustomerId(ModelBase::stringFromHttpContent(multipart->getContent(U("customer_id"))));
    if(multipart->hasContent(U("deleted_at")))
    {
        setDeletedAt(ModelBase::stringFromHttpContent(multipart->getContent(U("deleted_at"))));
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(U("id"))));
    }
    setNickname(ModelBase::stringFromHttpContent(multipart->getContent(U("nickname"))));
    if(multipart->hasContent(U("updated_at")))
    {
        setUpdatedAt(ModelBase::stringFromHttpContent(multipart->getContent(U("updated_at"))));
    }
}

utility::string_t FattMerchantPaymentMethod::getAddress1() const
{
    return m_Address1;
}


void FattMerchantPaymentMethod::setAddress1(utility::string_t value)
{
    m_Address1 = value;
    m_Address1IsSet = true;
}
bool FattMerchantPaymentMethod::address1IsSet() const
{
    return m_Address1IsSet;
}

void FattMerchantPaymentMethod::unsetAddress1()
{
    m_Address1IsSet = false;
}

utility::string_t FattMerchantPaymentMethod::getAddress2() const
{
    return m_Address2;
}


void FattMerchantPaymentMethod::setAddress2(utility::string_t value)
{
    m_Address2 = value;
    m_Address2IsSet = true;
}
bool FattMerchantPaymentMethod::address2IsSet() const
{
    return m_Address2IsSet;
}

void FattMerchantPaymentMethod::unsetAddress2()
{
    m_Address2IsSet = false;
}

utility::string_t FattMerchantPaymentMethod::getAddressCity() const
{
    return m_Address_city;
}


void FattMerchantPaymentMethod::setAddressCity(utility::string_t value)
{
    m_Address_city = value;
    m_Address_cityIsSet = true;
}
bool FattMerchantPaymentMethod::addressCityIsSet() const
{
    return m_Address_cityIsSet;
}

void FattMerchantPaymentMethod::unsetAddress_city()
{
    m_Address_cityIsSet = false;
}

utility::string_t FattMerchantPaymentMethod::getAddressCountry() const
{
    return m_Address_country;
}


void FattMerchantPaymentMethod::setAddressCountry(utility::string_t value)
{
    m_Address_country = value;
    m_Address_countryIsSet = true;
}
bool FattMerchantPaymentMethod::addressCountryIsSet() const
{
    return m_Address_countryIsSet;
}

void FattMerchantPaymentMethod::unsetAddress_country()
{
    m_Address_countryIsSet = false;
}

utility::string_t FattMerchantPaymentMethod::getAddressState() const
{
    return m_Address_state;
}


void FattMerchantPaymentMethod::setAddressState(utility::string_t value)
{
    m_Address_state = value;
    m_Address_stateIsSet = true;
}
bool FattMerchantPaymentMethod::addressStateIsSet() const
{
    return m_Address_stateIsSet;
}

void FattMerchantPaymentMethod::unsetAddress_state()
{
    m_Address_stateIsSet = false;
}

utility::string_t FattMerchantPaymentMethod::getAddressZip() const
{
    return m_Address_zip;
}


void FattMerchantPaymentMethod::setAddressZip(utility::string_t value)
{
    m_Address_zip = value;
    m_Address_zipIsSet = true;
}
bool FattMerchantPaymentMethod::addressZipIsSet() const
{
    return m_Address_zipIsSet;
}

void FattMerchantPaymentMethod::unsetAddress_zip()
{
    m_Address_zipIsSet = false;
}

utility::string_t FattMerchantPaymentMethod::getCardLastFour() const
{
    return m_Card_last_four;
}


void FattMerchantPaymentMethod::setCardLastFour(utility::string_t value)
{
    m_Card_last_four = value;
    
}
utility::string_t FattMerchantPaymentMethod::getCreatedAt() const
{
    return m_Created_at;
}


void FattMerchantPaymentMethod::setCreatedAt(utility::string_t value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}
bool FattMerchantPaymentMethod::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void FattMerchantPaymentMethod::unsetCreated_at()
{
    m_Created_atIsSet = false;
}

utility::string_t FattMerchantPaymentMethod::getCustomerId() const
{
    return m_Customer_id;
}


void FattMerchantPaymentMethod::setCustomerId(utility::string_t value)
{
    m_Customer_id = value;
    
}
utility::string_t FattMerchantPaymentMethod::getDeletedAt() const
{
    return m_Deleted_at;
}


void FattMerchantPaymentMethod::setDeletedAt(utility::string_t value)
{
    m_Deleted_at = value;
    m_Deleted_atIsSet = true;
}
bool FattMerchantPaymentMethod::deletedAtIsSet() const
{
    return m_Deleted_atIsSet;
}

void FattMerchantPaymentMethod::unsetDeleted_at()
{
    m_Deleted_atIsSet = false;
}

utility::string_t FattMerchantPaymentMethod::getId() const
{
    return m_Id;
}


void FattMerchantPaymentMethod::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool FattMerchantPaymentMethod::idIsSet() const
{
    return m_IdIsSet;
}

void FattMerchantPaymentMethod::unsetId()
{
    m_IdIsSet = false;
}

utility::string_t FattMerchantPaymentMethod::getNickname() const
{
    return m_Nickname;
}


void FattMerchantPaymentMethod::setNickname(utility::string_t value)
{
    m_Nickname = value;
    
}
utility::string_t FattMerchantPaymentMethod::getUpdatedAt() const
{
    return m_Updated_at;
}


void FattMerchantPaymentMethod::setUpdatedAt(utility::string_t value)
{
    m_Updated_at = value;
    m_Updated_atIsSet = true;
}
bool FattMerchantPaymentMethod::updatedAtIsSet() const
{
    return m_Updated_atIsSet;
}

void FattMerchantPaymentMethod::unsetUpdated_at()
{
    m_Updated_atIsSet = false;
}

}
}
}
}

