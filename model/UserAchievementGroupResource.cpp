/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "UserAchievementGroupResource.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

UserAchievementGroupResource::UserAchievementGroupResource()
{
    m_Group_name = U("");
    m_Id = U("");
    m_IdIsSet = false;
    m_Progress = 0;
    m_User_id = 0;
    
}

UserAchievementGroupResource::~UserAchievementGroupResource()
{
}

void UserAchievementGroupResource::validate()
{
    // TODO: implement validation
}

web::json::value UserAchievementGroupResource::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Achievements )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[U("achievements")] = web::json::value::array(jsonArray);
            }
    val[U("group_name")] = ModelBase::toJson(m_Group_name);
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    val[U("progress")] = ModelBase::toJson(m_Progress);
    val[U("user_id")] = ModelBase::toJson(m_User_id);
    

    return val;
}

void UserAchievementGroupResource::fromJson(web::json::value& val)
{
    {
        m_Achievements.clear();
        std::vector<web::json::value> jsonArray;
                for( auto& item : val[U("achievements")].as_array() )
        {
            
            if(item.is_null())
            {
                m_Achievements.push_back( std::shared_ptr<UserAchievementResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<UserAchievementResource> newItem(new UserAchievementResource());
                newItem->fromJson(item);
                m_Achievements.push_back( newItem );
            }
            
        }
    }
    setGroupName(ModelBase::stringFromJson(val[U("group_name")]));
    if(val.has_field(U("id")))
    {
        setId(ModelBase::stringFromJson(val[U("id")]));
        
    }
    setProgress(ModelBase::int32_tFromJson(val[U("progress")]));
    setUserId(ModelBase::int32_tFromJson(val[U("user_id")]));
    
}

void UserAchievementGroupResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Achievements )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + U("achievements"), web::json::value::array(jsonArray), U("application/json")));
            }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("group_name"), m_Group_name));
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("progress"), m_Progress));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("user_id"), m_User_id));
    
}

void UserAchievementGroupResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        m_Achievements.clear();
        
        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("achievements"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_Achievements.push_back( std::shared_ptr<UserAchievementResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<UserAchievementResource> newItem(new UserAchievementResource());
                newItem->fromJson(item);
                m_Achievements.push_back( newItem );
            }
            
        }
    }
    setGroupName(ModelBase::stringFromHttpContent(multipart->getContent(U("group_name"))));
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(U("id"))));
        
    }
    setProgress(ModelBase::int32_tFromHttpContent(multipart->getContent(U("progress"))));
    setUserId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("user_id"))));
    
}


std::vector<std::shared_ptr<UserAchievementResource>>& UserAchievementGroupResource::getAchievements()
{
    return m_Achievements;
}
utility::string_t UserAchievementGroupResource::getGroupName() const
{
    return m_Group_name;
}
void UserAchievementGroupResource::setGroupName(utility::string_t value)
{
    m_Group_name = value;
    
}
utility::string_t UserAchievementGroupResource::getId() const
{
    return m_Id;
}
void UserAchievementGroupResource::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool UserAchievementGroupResource::idIsSet() const
{
    return m_IdIsSet;
}
void UserAchievementGroupResource::unsetId()
{
    m_IdIsSet = false;
}
int32_t UserAchievementGroupResource::getProgress() const
{
    return m_Progress;
}
void UserAchievementGroupResource::setProgress(int32_t value)
{
    m_Progress = value;
    
}
int32_t UserAchievementGroupResource::getUserId() const
{
    return m_User_id;
}
void UserAchievementGroupResource::setUserId(int32_t value)
{
    m_User_id = value;
    
}

}
}
}
}

