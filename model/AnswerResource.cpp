/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "AnswerResource.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

AnswerResource::AnswerResource()
{
    m_Correct = false;
    m_Id = U("");
    m_IdIsSet = false;
    
}

AnswerResource::~AnswerResource()
{
}

void AnswerResource::validate()
{
    // TODO: implement validation
}

web::json::value AnswerResource::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("answer")] = ModelBase::toJson(m_Answer);
    val[U("correct")] = ModelBase::toJson(m_Correct);
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    

    return val;
}

void AnswerResource::fromJson(web::json::value& val)
{
    std::shared_ptr<Property> newAnswer(new Property());
    newAnswer->fromJson(val[U("answer")]);
    setAnswer( newItem );
    setCorrect(ModelBase::boolFromJson(val[U("correct")]));
    if(val.has_field(U("id")))
    {
        setId(ModelBase::stringFromJson(val[U("id")]));
        
    }
    
}

void AnswerResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    m_Answer->toMultipart(multipart, U("answer."));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("correct"), m_Correct));
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
        
    }
    
}

void AnswerResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    std::shared_ptr<Property> newAnswer(new Property());
    newAnswer->fromMultiPart(multipart, U("answer."));
    setAnswer( newAnswer );
    setCorrect(ModelBase::boolFromHttpContent(multipart->getContent(U("correct"))));
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(U("id"))));
        
    }
    
}


std::shared_ptr<Property> AnswerResource::getAnswer() const
{
    return m_Answer;
}
void AnswerResource::setAnswer(std::shared_ptr<Property> value)
{
    m_Answer = value;
    
}
bool AnswerResource::getCorrect() const
{
    return m_Correct;
}
void AnswerResource::setCorrect(bool value)
{
    m_Correct = value;
    
}
utility::string_t AnswerResource::getId() const
{
    return m_Id;
}
void AnswerResource::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool AnswerResource::idIsSet() const
{
    return m_IdIsSet;
}
void AnswerResource::unsetId()
{
    m_IdIsSet = false;
}

}
}
}
}

