/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "IOConfig.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

IOConfig::IOConfig()
{
    m_Customer = U("");
    m_CustomerIsSet = false;
    m_Enabled = false;
    m_EnabledIsSet = false;
    m_Environment = U("");
    m_EnvironmentIsSet = false;
    m_Product = U("");
    m_ProductIsSet = false;
}

IOConfig::~IOConfig()
{
}

void IOConfig::validate()
{
    // TODO: implement validation
}

web::json::value IOConfig::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CustomerIsSet)
    {
        val[U("customer")] = ModelBase::toJson(m_Customer);
    }
    if(m_EnabledIsSet)
    {
        val[U("enabled")] = ModelBase::toJson(m_Enabled);
    }
    if(m_EnvironmentIsSet)
    {
        val[U("environment")] = ModelBase::toJson(m_Environment);
    }
    if(m_ProductIsSet)
    {
        val[U("product")] = ModelBase::toJson(m_Product);
    }

    return val;
}

void IOConfig::fromJson(web::json::value& val)
{
    if(val.has_field(U("customer")))
    {
        setCustomer(ModelBase::stringFromJson(val[U("customer")]));
    }
    if(val.has_field(U("enabled")))
    {
        setEnabled(ModelBase::boolFromJson(val[U("enabled")]));
    }
    if(val.has_field(U("environment")))
    {
        setEnvironment(ModelBase::stringFromJson(val[U("environment")]));
    }
    if(val.has_field(U("product")))
    {
        setProduct(ModelBase::stringFromJson(val[U("product")]));
    }
}

void IOConfig::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_CustomerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("customer"), m_Customer));
        
    }
    if(m_EnabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("enabled"), m_Enabled));
    }
    if(m_EnvironmentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("environment"), m_Environment));
        
    }
    if(m_ProductIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("product"), m_Product));
        
    }
}

void IOConfig::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("customer")))
    {
        setCustomer(ModelBase::stringFromHttpContent(multipart->getContent(U("customer"))));
    }
    if(multipart->hasContent(U("enabled")))
    {
        setEnabled(ModelBase::boolFromHttpContent(multipart->getContent(U("enabled"))));
    }
    if(multipart->hasContent(U("environment")))
    {
        setEnvironment(ModelBase::stringFromHttpContent(multipart->getContent(U("environment"))));
    }
    if(multipart->hasContent(U("product")))
    {
        setProduct(ModelBase::stringFromHttpContent(multipart->getContent(U("product"))));
    }
}

utility::string_t IOConfig::getCustomer() const
{
    return m_Customer;
}


void IOConfig::setCustomer(utility::string_t value)
{
    m_Customer = value;
    m_CustomerIsSet = true;
}
bool IOConfig::customerIsSet() const
{
    return m_CustomerIsSet;
}

void IOConfig::unsetCustomer()
{
    m_CustomerIsSet = false;
}

bool IOConfig::getEnabled() const
{
    return m_Enabled;
}


void IOConfig::setEnabled(bool value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}
bool IOConfig::enabledIsSet() const
{
    return m_EnabledIsSet;
}

void IOConfig::unsetEnabled()
{
    m_EnabledIsSet = false;
}

utility::string_t IOConfig::getEnvironment() const
{
    return m_Environment;
}


void IOConfig::setEnvironment(utility::string_t value)
{
    m_Environment = value;
    m_EnvironmentIsSet = true;
}
bool IOConfig::environmentIsSet() const
{
    return m_EnvironmentIsSet;
}

void IOConfig::unsetEnvironment()
{
    m_EnvironmentIsSet = false;
}

utility::string_t IOConfig::getProduct() const
{
    return m_Product;
}


void IOConfig::setProduct(utility::string_t value)
{
    m_Product = value;
    m_ProductIsSet = true;
}
bool IOConfig::productIsSet() const
{
    return m_ProductIsSet;
}

void IOConfig::unsetProduct()
{
    m_ProductIsSet = false;
}

}
}
}
}

