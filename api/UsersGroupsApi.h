/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * UsersGroupsApi.h
 *
 * 
 */

#ifndef UsersGroupsApi_H_
#define UsersGroupsApi_H_


#include "ApiClient.h"

#include "ChatMessageRequest.h"
#include "ChatMessageResource.h"
#include "GroupMemberResource.h"
#include "GroupResource.h"
#include "Object.h"
#include "PageResource«ChatMessageResource».h"
#include "PageResource«GroupMemberResource».h"
#include "PageResource«GroupResource».h"
#include "PageResource«TemplateResource».h"
#include "Result.h"
#include "StringWrapper.h"
#include "TemplateResource.h"
#include "ValueWrapper«boolean».h"
#include <vector>
#include <cpprest/details/basic_types.h>

namespace com {
namespace knetikcloud {
namespace client {
namespace api {

using namespace com::knetikcloud::client::model;

class  UsersGroupsApi
{
public:
    UsersGroupsApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~UsersGroupsApi();
    /// <summary>
    /// Adds a new member to the group
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; GROUP_ADMIN or self if open
    /// </remarks>
    /// <param name="uniqueName">The group unique name</param>/// <param name="user">The id and status for a user to add to the group</param>
    pplx::task<std::shared_ptr<GroupMemberResource>> addMemberToGroup(utility::string_t uniqueName, std::shared_ptr<GroupMemberResource> user);
    /// <summary>
    /// Adds multiple members to the group
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; GROUP_ADMIN
    /// </remarks>
    /// <param name="uniqueName">The group unique name</param>/// <param name="users">The id and status for a list of users to add to the group</param>
    pplx::task<std::vector<std::shared_ptr<GroupMemberResource>>> addMembersToGroup(utility::string_t uniqueName, std::vector<std::shared_ptr<GroupMemberResource>> users);
    /// <summary>
    /// Create a group
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; GROUP_ADMIN
    /// </remarks>
    /// <param name="groupResource">The new group (optional)</param>
    pplx::task<std::shared_ptr<GroupResource>> createGroup(std::shared_ptr<GroupResource> groupResource);
    /// <summary>
    /// Create an group member template
    /// </summary>
    /// <remarks>
    /// GroupMember Templates define a type of group member and the properties they have. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
    /// </remarks>
    /// <param name="groupMemberTemplateResource">The group member template resource object (optional)</param>
    pplx::task<std::shared_ptr<TemplateResource>> createGroupMemberTemplate(std::shared_ptr<TemplateResource> groupMemberTemplateResource);
    /// <summary>
    /// Create a group template
    /// </summary>
    /// <remarks>
    /// Group Templates define a type of group and the properties they have. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
    /// </remarks>
    /// <param name="groupTemplateResource">The group template resource object (optional)</param>
    pplx::task<std::shared_ptr<TemplateResource>> createGroupTemplate(std::shared_ptr<TemplateResource> groupTemplateResource);
    /// <summary>
    /// Removes a group from the system
    /// </summary>
    /// <remarks>
    /// All groups listing this as the parent are also removed and users are in turn removed from this and those groups. This may result in users no longer being in this group&#39;s parent if they were not added to it directly as well. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; GROUP_ADMIN
    /// </remarks>
    /// <param name="uniqueName">The group unique name</param>
    pplx::task<void> deleteGroup(utility::string_t uniqueName);
    /// <summary>
    /// Delete an group member template
    /// </summary>
    /// <remarks>
    /// If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
    /// </remarks>
    /// <param name="id">The id of the template</param>/// <param name="cascade">The value needed to delete used templates (optional)</param>
    pplx::task<void> deleteGroupMemberTemplate(utility::string_t id, utility::string_t cascade);
    /// <summary>
    /// Delete a group template
    /// </summary>
    /// <remarks>
    /// If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
    /// </remarks>
    /// <param name="id">The id of the template</param>/// <param name="cascade">The value needed to delete used templates (optional)</param>
    pplx::task<void> deleteGroupTemplate(utility::string_t id, utility::string_t cascade);
    /// <summary>
    /// Enable or disable notification of group messages
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="uniqueName">The group unique name</param>/// <param name="userId">The user id of the member or &#39;me&#39;</param>/// <param name="disabled">disabled</param>
    pplx::task<void> disableGroupNotification(utility::string_t uniqueName, utility::string_t userId, std::shared_ptr<ValueWrapper«boolean»> disabled);
    /// <summary>
    /// Loads a specific group&#39;s details
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
    /// </remarks>
    /// <param name="uniqueName">The group unique name</param>
    pplx::task<std::shared_ptr<GroupResource>> getGroup(utility::string_t uniqueName);
    /// <summary>
    /// Get group ancestors
    /// </summary>
    /// <remarks>
    /// Returns a list of ancestor groups in reverse order (parent, then grandparent, etc). &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
    /// </remarks>
    /// <param name="uniqueName">The group unique name</param>
    pplx::task<std::vector<std::shared_ptr<GroupResource>>> getGroupAncestors(utility::string_t uniqueName);
    /// <summary>
    /// Get a user from a group
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
    /// </remarks>
    /// <param name="uniqueName">The group unique name</param>/// <param name="userId">The id of the user</param>
    pplx::task<std::shared_ptr<GroupMemberResource>> getGroupMember(utility::string_t uniqueName, int32_t userId);
    /// <summary>
    /// Get a single group member template
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or GROUP_ADMIN
    /// </remarks>
    /// <param name="id">The id of the template</param>
    pplx::task<std::shared_ptr<TemplateResource>> getGroupMemberTemplate(utility::string_t id);
    /// <summary>
    /// List and search group member templates
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or GROUP_ADMIN
    /// </remarks>
    /// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
    pplx::task<std::shared_ptr<PageResource«TemplateResource»>> getGroupMemberTemplates(int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// Lists members of the group
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
    /// </remarks>
    /// <param name="uniqueName">The group unique name</param>/// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to order:ASC)</param>
    pplx::task<std::shared_ptr<PageResource«GroupMemberResource»>> getGroupMembers(utility::string_t uniqueName, int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// Get a list of group messages
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
    /// </remarks>
    /// <param name="uniqueName">The group unique name</param>/// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
    pplx::task<std::shared_ptr<PageResource«ChatMessageResource»>> getGroupMessages(utility::string_t uniqueName, int32_t size, int32_t page);
    /// <summary>
    /// Get a single group template
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or GROUP_ADMIN
    /// </remarks>
    /// <param name="id">The id of the template</param>
    pplx::task<std::shared_ptr<TemplateResource>> getGroupTemplate(utility::string_t id);
    /// <summary>
    /// List and search group templates
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or GROUP_ADMIN
    /// </remarks>
    /// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>/// <param name="order">a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
    pplx::task<std::shared_ptr<PageResource«TemplateResource»>> getGroupTemplates(int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// List groups a user is in
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
    /// </remarks>
    /// <param name="userId">The id of the user</param>/// <param name="filterChildren">Whether to limit group list to children of groups only. If true, shows only groups with parents. If false, shows only groups with no parent. (optional)</param>
    pplx::task<std::vector<utility::string_t>> getGroupsForUser(int32_t userId, bool filterChildren);
    /// <summary>
    /// List and search groups
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
    /// </remarks>
    /// <param name="filterTemplate">Filter for groups using a specific template, by id (optional)</param>/// <param name="filterMemberCount">Filters groups by member count. Multiple values possible for range search. Format: filter_member_count&#x3D;OP,ts&amp;... where OP in (GT, LT, GOE, LOE, EQ). Ex: filter_member_count&#x3D;GT,14,LT,17 (optional)</param>/// <param name="filterName">Filter for groups with names starting with the given string (optional)</param>/// <param name="filterUniqueName">Filter for groups whose unique_name starts with provided string (optional)</param>/// <param name="filterParent">Filter for groups with a specific parent, by unique name (optional)</param>/// <param name="filterStatus">Filter for groups with a certain status (optional)</param>/// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)</param>
    pplx::task<std::shared_ptr<PageResource«GroupResource»>> listGroups(utility::string_t filterTemplate, utility::string_t filterMemberCount, utility::string_t filterName, utility::string_t filterUniqueName, utility::string_t filterParent, utility::string_t filterStatus, int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// Send a group message
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="uniqueName">The group unique name</param>/// <param name="chatMessageRequest">The chat message request (optional)</param>
    pplx::task<std::shared_ptr<ChatMessageResource>> postGroupMessage(utility::string_t uniqueName, std::shared_ptr<ChatMessageRequest> chatMessageRequest);
    /// <summary>
    /// Removes a user from a group
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; GROUP_ADMIN or self if open
    /// </remarks>
    /// <param name="uniqueName">The group unique name</param>/// <param name="userId">The id of the user to remove</param>
    pplx::task<void> removeGroupMember(utility::string_t uniqueName, int32_t userId);
    /// <summary>
    /// Update a group
    /// </summary>
    /// <remarks>
    /// If adding/removing/changing parent, user membership in group/new parent groups may be modified. The parent being removed will remove members from this sub group unless they were added explicitly to the parent and the new parent will gain members unless they were already a part of it. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; GROUP_ADMIN or admin of the group
    /// </remarks>
    /// <param name="uniqueName">The group unique name</param>/// <param name="groupResource">The updated group (optional)</param>
    pplx::task<void> updateGroup(utility::string_t uniqueName, std::shared_ptr<GroupResource> groupResource);
    /// <summary>
    /// Change a user&#39;s order
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; GROUP_ADMIN
    /// </remarks>
    /// <param name="uniqueName">The group unique name</param>/// <param name="userId">The user id of the member to modify</param>/// <param name="order">The new order for the membership</param>
    pplx::task<void> updateGroupMemberProperties(utility::string_t uniqueName, int32_t userId, std::shared_ptr<StringWrapper> order);
    /// <summary>
    /// Change a user&#39;s membership properties
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; GROUP_ADMIN
    /// </remarks>
    /// <param name="uniqueName">The group unique name</param>/// <param name="userId">The user id of the member to modify</param>/// <param name="properties">The new properties for the membership</param>
    pplx::task<void> updateGroupMemberProperties1(utility::string_t uniqueName, int32_t userId, std::shared_ptr<Object> properties);
    /// <summary>
    /// Change a user&#39;s status
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; GROUP_ADMIN
    /// </remarks>
    /// <param name="uniqueName">The group unique name</param>/// <param name="userId">The user id of the member to modify</param>/// <param name="status">The new status for the user</param>
    pplx::task<void> updateGroupMemberStatus(utility::string_t uniqueName, int32_t userId, utility::string_t status);
    /// <summary>
    /// Update an group member template
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
    /// </remarks>
    /// <param name="id">The id of the template</param>/// <param name="groupMemberTemplateResource">The group member template resource object (optional)</param>
    pplx::task<std::shared_ptr<TemplateResource>> updateGroupMemberTemplate(utility::string_t id, std::shared_ptr<TemplateResource> groupMemberTemplateResource);
    /// <summary>
    /// Update a group template
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
    /// </remarks>
    /// <param name="id">The id of the template</param>/// <param name="groupTemplateResource">The group template resource object (optional)</param>
    pplx::task<std::shared_ptr<TemplateResource>> updateGroupTemplate(utility::string_t id, std::shared_ptr<TemplateResource> groupTemplateResource);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* UsersGroupsApi_H_ */

