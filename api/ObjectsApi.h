/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * ObjectsApi.h
 *
 * 
 */

#ifndef ObjectsApi_H_
#define ObjectsApi_H_


#include "ApiClient.h"

#include "ItemTemplateResource.h"
#include "ObjectResource.h"
#include "PageResource«ItemTemplateResource».h"
#include "PageResource«ObjectResource».h"
#include "Result.h"
#include <cpprest/details/basic_types.h>

namespace com {
namespace knetikcloud {
namespace client {
namespace api {

using namespace com::knetikcloud::client::model;

class  ObjectsApi
{
public:
    ObjectsApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~ObjectsApi();
    /// <summary>
    /// Create an object
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; INVENTORY_ADMIN
    /// </remarks>
    /// <param name="templateId">The id of the template this object is to be part of</param>/// <param name="cascade">Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (optional, default to false)</param>/// <param name="objectItem">The object item object (optional)</param>
    pplx::task<std::shared_ptr<ObjectResource>> createObjectItem(utility::string_t templateId, bool cascade, std::shared_ptr<ObjectResource> objectItem);
    /// <summary>
    /// Create an object template
    /// </summary>
    /// <remarks>
    /// Object templates define a type of entitlement and the properties they have. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
    /// </remarks>
    /// <param name="template">The entitlement template to be created (optional)</param>
    pplx::task<std::shared_ptr<ItemTemplateResource>> createObjectTemplate(std::shared_ptr<ItemTemplateResource> template);
    /// <summary>
    /// Delete an object
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; INVENTORY_ADMIN
    /// </remarks>
    /// <param name="templateId">The id of the template this object is part of</param>/// <param name="objectId">The id of the object</param>
    pplx::task<void> deleteObjectItem(utility::string_t templateId, int32_t objectId);
    /// <summary>
    /// Delete an entitlement template
    /// </summary>
    /// <remarks>
    /// If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
    /// </remarks>
    /// <param name="id">The id of the template</param>/// <param name="cascade">The value needed to delete used templates (optional)</param>
    pplx::task<void> deleteObjectTemplate(utility::string_t id, utility::string_t cascade);
    /// <summary>
    /// Get a single object
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
    /// </remarks>
    /// <param name="templateId">The id of the template this object is part of</param>/// <param name="objectId">The id of the object</param>
    pplx::task<std::shared_ptr<ObjectResource>> getObjectItem(utility::string_t templateId, int32_t objectId);
    /// <summary>
    /// List and search objects
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
    /// </remarks>
    /// <param name="templateId">The id of the template to get objects for</param>/// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
    pplx::task<std::shared_ptr<PageResource«ObjectResource»>> getObjectItems(utility::string_t templateId, int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// Get a single entitlement template
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or ACHIEVEMENTS_ADMIN
    /// </remarks>
    /// <param name="id">The id of the template</param>
    pplx::task<std::shared_ptr<ItemTemplateResource>> getObjectTemplate(utility::string_t id);
    /// <summary>
    /// List and search entitlement templates
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or ACHIEVEMENTS_ADMIN
    /// </remarks>
    /// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
    pplx::task<std::shared_ptr<PageResource«ItemTemplateResource»>> getObjectTemplates(int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// Update an object
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; INVENTORY_ADMIN
    /// </remarks>
    /// <param name="templateId">The id of the template this object is part of</param>/// <param name="objectId">The id of the object</param>/// <param name="cascade">Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (optional, default to false)</param>/// <param name="objectItem">The object item object (optional)</param>
    pplx::task<void> updateObjectItem(utility::string_t templateId, int32_t objectId, bool cascade, std::shared_ptr<ObjectResource> objectItem);
    /// <summary>
    /// Update an entitlement template
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
    /// </remarks>
    /// <param name="id">The id of the template</param>/// <param name="template">The updated template (optional)</param>
    pplx::task<std::shared_ptr<ItemTemplateResource>> updateObjectTemplate(utility::string_t id, std::shared_ptr<ItemTemplateResource> template);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ObjectsApi_H_ */

