/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Config.h
 *
 * 
 */

#ifndef Config_H_
#define Config_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Config
    : public ModelBase
{
public:
    Config();
    virtual ~Config();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Config members

    /// <summary>
    /// The description of the config.  Max 140 characters
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();
    void setDescription(utility::string_t value);
    /// <summary>
    /// The name of the config
    /// </summary>
    utility::string_t getName() const;
        void setName(utility::string_t value);
    /// <summary>
    /// Whether the config is public for viewing. True means that it can be publicly viewed by all. Default: false
    /// </summary>
    bool getPublicRead() const;
    bool publicReadIsSet() const;
    void unsetPublic_read();
    void setPublicRead(bool value);
    /// <summary>
    /// The value of the config
    /// </summary>
    utility::string_t getValue() const;
    bool valueIsSet() const;
    void unsetValue();
    void setValue(utility::string_t value);

protected:
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    utility::string_t m_Name;
        bool m_Public_read;
    bool m_Public_readIsSet;
    utility::string_t m_Value;
    bool m_ValueIsSet;
};

}
}
}
}

#endif /* Config_H_ */
