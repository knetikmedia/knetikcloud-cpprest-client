/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * UserAchievementGroupResource.h
 *
 * 
 */

#ifndef UserAchievementGroupResource_H_
#define UserAchievementGroupResource_H_


#include "ModelBase.h"

#include "UserAchievementResource.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  UserAchievementGroupResource
    : public ModelBase
{
public:
    UserAchievementGroupResource();
    virtual ~UserAchievementGroupResource();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UserAchievementGroupResource members

    /// <summary>
    /// The list of achievements associated with the group
    /// </summary>
    std::vector<std::shared_ptr<UserAchievementResource>>& getAchievements();
        /// <summary>
    /// The name of the group.  If used by Leveling, this will represent the level name
    /// </summary>
    utility::string_t getGroupName() const;
    void setGroupName(utility::string_t value);
        /// <summary>
    /// The id of the achievement progress
    /// </summary>
    utility::string_t getId() const;
    void setId(utility::string_t value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// The current progress of the user on the group
    /// </summary>
    int32_t getProgress() const;
    void setProgress(int32_t value);
        /// <summary>
    /// The id of the user whose progress is being tracked
    /// </summary>
    int32_t getUserId() const;
    void setUserId(int32_t value);
    
protected:
    std::vector<std::shared_ptr<UserAchievementResource>> m_Achievements;
    utility::string_t m_Group_name;
    utility::string_t m_Id;
    bool m_IdIsSet;
int32_t m_Progress;
    int32_t m_User_id;
    };

}
}
}
}

#endif /* UserAchievementGroupResource_H_ */
