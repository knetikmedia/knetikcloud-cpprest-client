/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Represents an activity that can be parameterized and tracked through metrics (scores, etc).h
 *
 * 
 */

#ifndef Represents an activity that can be parameterized and tracked through metrics (scores, etc)_H_
#define Represents an activity that can be parameterized and tracked through metrics (scores, etc)_H_


#include "ModelBase.h"

#include "ActivityEntitlementResource.h"
#include "The definition of an activity parameters: ex: difficulty level.h"
#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>
#include "Property.h"
#include "RewardSetResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Represents an activity that can be parameterized and tracked through metrics (scores, etc)
    : public ModelBase
{
public:
    Represents an activity that can be parameterized and tracked through metrics (scores, etc)();
    virtual ~Represents an activity that can be parameterized and tracked through metrics (scores, etc)();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Represents an activity that can be parameterized and tracked through metrics (scores, etc) members

    /// <summary>
    /// A map of additional properties keyed on the property name. Used to further describe an activity. While settings will vary from one activity occurrence (a game) to another, additional properties are shared by all the occurrences of this activity. Ex: Activity Logo, Disclaimer, Greeting, etc. Validated against template if one exists for activities
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<Property>>& getAdditionalProperties();
    bool additional_propertiesIsSet() const;
    void unsetAdditional_properties();
    /// <summary>
    /// The date/time this resource was created in seconds since unix epoch
    /// </summary>
    int64_t getCreatedDate() const;
    void setCreatedDate(int64_t value);
    bool created_dateIsSet() const;
    void unsetCreated_date();
    /// <summary>
    /// The list of items that can be used for entitlement (wager amounts/etc)
    /// </summary>
    std::vector<std::shared_ptr<ActivityEntitlementResource>>& getEntitlements();
    bool entitlementsIsSet() const;
    void unsetEntitlements();
    /// <summary>
    /// The unique ID for that resource
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// Details about how to launch the activity
    /// </summary>
    utility::string_t getLaunch() const;
    void setLaunch(utility::string_t value);
    bool launchIsSet() const;
    void unsetLaunch();
    /// <summary>
    /// The user friendly name of that resource. Defaults to blank string
    /// </summary>
    utility::string_t getLongDescription() const;
    void setLongDescription(utility::string_t value);
    bool long_descriptionIsSet() const;
    void unsetLong_description();
    /// <summary>
    /// The user friendly name of that resource
    /// </summary>
    utility::string_t getName() const;
    void setName(utility::string_t value);
        /// <summary>
    /// The rewards to give at the end of each occurence of the activity. When creating/updating only id is used. Reward set must be pre-existing
    /// </summary>
    std::shared_ptr<RewardSetResource> getRewardSet() const;
    void setRewardSet(std::shared_ptr<RewardSetResource> value);
    bool reward_setIsSet() const;
    void unsetReward_set();
    /// <summary>
    /// Define what parameters are required/available to start and run an activity. For example: Difficulty, Number of Questions, Character name, Avatar, Duration, etc. Not populated when getting listing
    /// </summary>
    std::vector<std::shared_ptr<The definition of an activity parameters: ex: difficulty level>>& getSettings();
    bool settingsIsSet() const;
    void unsetSettings();
    /// <summary>
    /// The user friendly name of that resource. Defaults to blank string
    /// </summary>
    utility::string_t getShortDescription() const;
    void setShortDescription(utility::string_t value);
    bool short_descriptionIsSet() const;
    void unsetShort_description();
    /// <summary>
    /// Whether this activity is a template for other activities. Default: false
    /// </summary>
    bool getTemplate() const;
    void setTemplate(bool value);
    bool templateIsSet() const;
    void unsetTemplate();
    /// <summary>
    /// An activity template this activity is validated against (private). May be null and no validation of additional_properties will be done
    /// </summary>
    utility::string_t getTemplateId() const;
    void setTemplateId(utility::string_t value);
    bool template_idIsSet() const;
    void unsetTemplate_id();
    /// <summary>
    /// The type of the activity
    /// </summary>
    utility::string_t getType() const;
    void setType(utility::string_t value);
        /// <summary>
    /// The unique key (for static reference in code) of the activity
    /// </summary>
    utility::string_t getUniqueKey() const;
    void setUniqueKey(utility::string_t value);
    bool unique_keyIsSet() const;
    void unsetUnique_key();
    /// <summary>
    /// The date/time this resource was last updated in seconds since unix epoch
    /// </summary>
    int64_t getUpdatedDate() const;
    void setUpdatedDate(int64_t value);
    bool updated_dateIsSet() const;
    void unsetUpdated_date();

protected:
    std::map<utility::string_t, std::shared_ptr<Property>> m_Additional_properties;
    bool m_Additional_propertiesIsSet;
int64_t m_Created_date;
    bool m_Created_dateIsSet;
std::vector<std::shared_ptr<ActivityEntitlementResource>> m_Entitlements;
    bool m_EntitlementsIsSet;
int64_t m_Id;
    bool m_IdIsSet;
utility::string_t m_Launch;
    bool m_LaunchIsSet;
utility::string_t m_Long_description;
    bool m_Long_descriptionIsSet;
utility::string_t m_Name;
    std::shared_ptr<RewardSetResource> m_Reward_set;
    bool m_Reward_setIsSet;
std::vector<std::shared_ptr<The definition of an activity parameters: ex: difficulty level>> m_Settings;
    bool m_SettingsIsSet;
utility::string_t m_Short_description;
    bool m_Short_descriptionIsSet;
bool m_Template;
    bool m_TemplateIsSet;
utility::string_t m_Template_id;
    bool m_Template_idIsSet;
utility::string_t m_Type;
    utility::string_t m_Unique_key;
    bool m_Unique_keyIsSet;
int64_t m_Updated_date;
    bool m_Updated_dateIsSet;
};

}
}
}
}

#endif /* Represents an activity that can be parameterized and tracked through metrics (scores, etc)_H_ */
