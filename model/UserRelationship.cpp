/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "UserRelationship.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

UserRelationship::UserRelationship()
{
    m_ChildIsSet = false;
    m_Context = U("");
    m_ContextIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_ParentIsSet = false;
    
}

UserRelationship::~UserRelationship()
{
}

void UserRelationship::validate()
{
    // TODO: implement validation
}

web::json::value UserRelationship::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ChildIsSet)
    {
        val[U("child")] = ModelBase::toJson(m_Child);
    }
    if(m_ContextIsSet)
    {
        val[U("context")] = ModelBase::toJson(m_Context);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_ParentIsSet)
    {
        val[U("parent")] = ModelBase::toJson(m_Parent);
    }
    

    return val;
}

void UserRelationship::fromJson(web::json::value& val)
{
    if(val.has_field(U("child")))
    {
        if(!val[U("child")].is_null())
        {
            std::shared_ptr<User> newItem(new User());
            newItem->fromJson(val[U("child")]);
            setChild( newItem );
        }
        
    }
    if(val.has_field(U("context")))
    {
        setContext(ModelBase::stringFromJson(val[U("context")]));
        
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int64_tFromJson(val[U("id")]));
    }
    if(val.has_field(U("parent")))
    {
        if(!val[U("parent")].is_null())
        {
            std::shared_ptr<User> newItem(new User());
            newItem->fromJson(val[U("parent")]);
            setParent( newItem );
        }
        
    }
    
}

void UserRelationship::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_ChildIsSet)
    {
        if (m_Child.get())
        {
            m_Child->toMultipart(multipart, U("child."));
        }
        
    }
    if(m_ContextIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("context"), m_Context));
        
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    if(m_ParentIsSet)
    {
        if (m_Parent.get())
        {
            m_Parent->toMultipart(multipart, U("parent."));
        }
        
    }
    
}

void UserRelationship::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("child")))
    {
        if(multipart->hasContent(U("child")))
        {
            std::shared_ptr<User> newItem(new User());
            newItem->fromMultiPart(multipart, U("child."));
            setChild( newItem );
        }
        
    }
    if(multipart->hasContent(U("context")))
    {
        setContext(ModelBase::stringFromHttpContent(multipart->getContent(U("context"))));
        
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int64_tFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("parent")))
    {
        if(multipart->hasContent(U("parent")))
        {
            std::shared_ptr<User> newItem(new User());
            newItem->fromMultiPart(multipart, U("parent."));
            setParent( newItem );
        }
        
    }
    
}


std::shared_ptr<User> UserRelationship::getChild() const
{
    return m_Child;
}
void UserRelationship::setChild(std::shared_ptr<User> value)
{
    m_Child = value;
    m_ChildIsSet = true;
}
bool UserRelationship::childIsSet() const
{
    return m_ChildIsSet;
}
void UserRelationship::unsetChild()
{
    m_ChildIsSet = false;
}
utility::string_t UserRelationship::getContext() const
{
    return m_Context;
}
void UserRelationship::setContext(utility::string_t value)
{
    m_Context = value;
    m_ContextIsSet = true;
}
bool UserRelationship::contextIsSet() const
{
    return m_ContextIsSet;
}
void UserRelationship::unsetContext()
{
    m_ContextIsSet = false;
}
int64_t UserRelationship::getId() const
{
    return m_Id;
}
void UserRelationship::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool UserRelationship::idIsSet() const
{
    return m_IdIsSet;
}
void UserRelationship::unsetId()
{
    m_IdIsSet = false;
}
std::shared_ptr<User> UserRelationship::getParent() const
{
    return m_Parent;
}
void UserRelationship::setParent(std::shared_ptr<User> value)
{
    m_Parent = value;
    m_ParentIsSet = true;
}
bool UserRelationship::parentIsSet() const
{
    return m_ParentIsSet;
}
void UserRelationship::unsetParent()
{
    m_ParentIsSet = false;
}

}
}
}
}

