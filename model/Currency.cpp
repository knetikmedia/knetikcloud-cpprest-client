/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Currency.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Currency::Currency()
{
    m_Active = false;
    m_ActiveIsSet = false;
    m_Code = U("");
    m_CodeIsSet = false;
    m_Date_created = 0;
    m_Date_createdIsSet = false;
    m_Date_updated = 0;
    m_Date_updatedIsSet = false;
    m_Factor = 0.0;
    m_FactorIsSet = false;
    m_Icon = U("");
    m_IconIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_Name = U("");
    m_NameIsSet = false;
    m_Type = U("");
    m_TypeIsSet = false;
    m_Virtual = false;
    m_VirtualIsSet = false;
    
}

Currency::~Currency()
{
}

void Currency::validate()
{
    // TODO: implement validation
}

web::json::value Currency::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ActiveIsSet)
    {
        val[U("active")] = ModelBase::toJson(m_Active);
    }
    if(m_CodeIsSet)
    {
        val[U("code")] = ModelBase::toJson(m_Code);
    }
    if(m_Date_createdIsSet)
    {
        val[U("date_created")] = ModelBase::toJson(m_Date_created);
    }
    if(m_Date_updatedIsSet)
    {
        val[U("date_updated")] = ModelBase::toJson(m_Date_updated);
    }
    if(m_FactorIsSet)
    {
        val[U("factor")] = ModelBase::toJson(m_Factor);
    }
    if(m_IconIsSet)
    {
        val[U("icon")] = ModelBase::toJson(m_Icon);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }
    if(m_TypeIsSet)
    {
        val[U("type")] = ModelBase::toJson(m_Type);
    }
    if(m_VirtualIsSet)
    {
        val[U("virtual")] = ModelBase::toJson(m_Virtual);
    }
    

    return val;
}

void Currency::fromJson(web::json::value& val)
{
    if(val.has_field(U("active")))
    {
        setActive(ModelBase::boolFromJson(val[U("active")]));
    }
    if(val.has_field(U("code")))
    {
        setCode(ModelBase::stringFromJson(val[U("code")]));
        
    }
    if(val.has_field(U("date_created")))
    {
        setDateCreated(ModelBase::int64_tFromJson(val[U("date_created")]));
    }
    if(val.has_field(U("date_updated")))
    {
        setDateUpdated(ModelBase::int64_tFromJson(val[U("date_updated")]));
    }
    if(val.has_field(U("factor")))
    {
        setFactor(ModelBase::doubleFromJson(val[U("factor")]));
    }
    if(val.has_field(U("icon")))
    {
        setIcon(ModelBase::stringFromJson(val[U("icon")]));
        
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int32_tFromJson(val[U("id")]));
    }
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
        
    }
    if(val.has_field(U("type")))
    {
        setType(ModelBase::stringFromJson(val[U("type")]));
        
    }
    if(val.has_field(U("virtual")))
    {
        setVirtual(ModelBase::boolFromJson(val[U("virtual")]));
    }
    
}

void Currency::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_ActiveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("active"), m_Active));
    }
    if(m_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("code"), m_Code));
        
    }
    if(m_Date_createdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("date_created"), m_Date_created));
    }
    if(m_Date_updatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("date_updated"), m_Date_updated));
    }
    if(m_FactorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("factor"), m_Factor));
    }
    if(m_IconIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("icon"), m_Icon));
        
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("type"), m_Type));
        
    }
    if(m_VirtualIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("virtual"), m_Virtual));
    }
    
}

void Currency::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("active")))
    {
        setActive(ModelBase::boolFromHttpContent(multipart->getContent(U("active"))));
    }
    if(multipart->hasContent(U("code")))
    {
        setCode(ModelBase::stringFromHttpContent(multipart->getContent(U("code"))));
        
    }
    if(multipart->hasContent(U("date_created")))
    {
        setDateCreated(ModelBase::int64_tFromHttpContent(multipart->getContent(U("date_created"))));
    }
    if(multipart->hasContent(U("date_updated")))
    {
        setDateUpdated(ModelBase::int64_tFromHttpContent(multipart->getContent(U("date_updated"))));
    }
    if(multipart->hasContent(U("factor")))
    {
        setFactor(ModelBase::doubleFromHttpContent(multipart->getContent(U("factor"))));
    }
    if(multipart->hasContent(U("icon")))
    {
        setIcon(ModelBase::stringFromHttpContent(multipart->getContent(U("icon"))));
        
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
        
    }
    if(multipart->hasContent(U("type")))
    {
        setType(ModelBase::stringFromHttpContent(multipart->getContent(U("type"))));
        
    }
    if(multipart->hasContent(U("virtual")))
    {
        setVirtual(ModelBase::boolFromHttpContent(multipart->getContent(U("virtual"))));
    }
    
}


bool Currency::getActive() const
{
    return m_Active;
}
void Currency::setActive(bool value)
{
    m_Active = value;
    m_ActiveIsSet = true;
}
bool Currency::activeIsSet() const
{
    return m_ActiveIsSet;
}
void Currency::unsetActive()
{
    m_ActiveIsSet = false;
}
utility::string_t Currency::getCode() const
{
    return m_Code;
}
void Currency::setCode(utility::string_t value)
{
    m_Code = value;
    m_CodeIsSet = true;
}
bool Currency::codeIsSet() const
{
    return m_CodeIsSet;
}
void Currency::unsetCode()
{
    m_CodeIsSet = false;
}
int64_t Currency::getDateCreated() const
{
    return m_Date_created;
}
void Currency::setDateCreated(int64_t value)
{
    m_Date_created = value;
    m_Date_createdIsSet = true;
}
bool Currency::date_createdIsSet() const
{
    return m_Date_createdIsSet;
}
void Currency::unsetDate_created()
{
    m_Date_createdIsSet = false;
}
int64_t Currency::getDateUpdated() const
{
    return m_Date_updated;
}
void Currency::setDateUpdated(int64_t value)
{
    m_Date_updated = value;
    m_Date_updatedIsSet = true;
}
bool Currency::date_updatedIsSet() const
{
    return m_Date_updatedIsSet;
}
void Currency::unsetDate_updated()
{
    m_Date_updatedIsSet = false;
}
double Currency::getFactor() const
{
    return m_Factor;
}
void Currency::setFactor(double value)
{
    m_Factor = value;
    m_FactorIsSet = true;
}
bool Currency::factorIsSet() const
{
    return m_FactorIsSet;
}
void Currency::unsetFactor()
{
    m_FactorIsSet = false;
}
utility::string_t Currency::getIcon() const
{
    return m_Icon;
}
void Currency::setIcon(utility::string_t value)
{
    m_Icon = value;
    m_IconIsSet = true;
}
bool Currency::iconIsSet() const
{
    return m_IconIsSet;
}
void Currency::unsetIcon()
{
    m_IconIsSet = false;
}
int32_t Currency::getId() const
{
    return m_Id;
}
void Currency::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Currency::idIsSet() const
{
    return m_IdIsSet;
}
void Currency::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Currency::getName() const
{
    return m_Name;
}
void Currency::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool Currency::nameIsSet() const
{
    return m_NameIsSet;
}
void Currency::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t Currency::getType() const
{
    return m_Type;
}
void Currency::setType(utility::string_t value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool Currency::typeIsSet() const
{
    return m_TypeIsSet;
}
void Currency::unsetType()
{
    m_TypeIsSet = false;
}
bool Currency::getVirtual() const
{
    return m_Virtual;
}
void Currency::setVirtual(bool value)
{
    m_Virtual = value;
    m_VirtualIsSet = true;
}
bool Currency::virtualIsSet() const
{
    return m_VirtualIsSet;
}
void Currency::unsetVirtual()
{
    m_VirtualIsSet = false;
}

}
}
}
}

