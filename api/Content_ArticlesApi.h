/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Content_ArticlesApi.h
 *
 * 
 */

#ifndef Content_ArticlesApi_H_
#define Content_ArticlesApi_H_


#include "ApiClient.h"

#include "ArticleResource.h"
#include "BasicTemplatedResource.h"
#include "PageResource«ArticleResource».h"
#include "PageResource«TemplateResource».h"
#include "Result.h"
#include "TemplateResource.h"
#include <cpprest/details/basic_types.h>

namespace com {
namespace knetikcloud {
namespace client {
namespace api {

using namespace com::knetikcloud::client::model;

class  Content_ArticlesApi
{
public:
    Content_ArticlesApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~Content_ArticlesApi();
    /// <summary>
    /// Create a new article
    /// </summary>
    /// <remarks>
    /// Articles are blobs of text with titles, a category and assets. Formatting and display of the text is in the hands of the front end.&lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions:&lt;/b&gt; ARTICLES_ADMIN
    /// </remarks>
    /// <param name="articleResource">The new article (optional)</param>
    pplx::task<std::shared_ptr<ArticleResource>> createArticle(std::shared_ptr<ArticleResource> articleResource);
    /// <summary>
    /// Create an article template
    /// </summary>
    /// <remarks>
    /// Article Templates define a type of article and the properties they have. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
    /// </remarks>
    /// <param name="articleTemplateResource">The article template resource object (optional)</param>
    pplx::task<std::shared_ptr<TemplateResource>> createArticleTemplate(std::shared_ptr<TemplateResource> articleTemplateResource);
    /// <summary>
    /// Create a template
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATES_ADMIN
    /// </remarks>
    /// <param name="typeHint">The type for the resource this template applies to</param>/// <param name="template">The template (optional)</param>
    pplx::task<std::shared_ptr<TemplateResource>> createTemplate(utility::string_t typeHint, std::shared_ptr<TemplateResource> template);
    /// <summary>
    /// Delete an existing article
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; ARTICLES_ADMIN
    /// </remarks>
    /// <param name="id">The article id</param>
    pplx::task<void> deleteArticle(utility::string_t id);
    /// <summary>
    /// Delete an article template
    /// </summary>
    /// <remarks>
    /// If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
    /// </remarks>
    /// <param name="id">The id of the template</param>/// <param name="cascade">The value needed to delete used templates (optional)</param>
    pplx::task<void> deleteArticleTemplate(utility::string_t id, utility::string_t cascade);
    /// <summary>
    /// Delete a template
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATES_ADMIN
    /// </remarks>
    /// <param name="typeHint">The type for the resource this template applies to</param>/// <param name="id">The id of the template</param>/// <param name="cascade">How to cascade the delete (optional)</param>
    pplx::task<void> deleteTemplate(utility::string_t typeHint, utility::string_t id, utility::string_t cascade);
    /// <summary>
    /// Get a single article
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
    /// </remarks>
    /// <param name="id">The article id</param>
    pplx::task<std::shared_ptr<ArticleResource>> getArticle(utility::string_t id);
    /// <summary>
    /// Get a single article template
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or ARTICLES_ADMIN
    /// </remarks>
    /// <param name="id">The id of the template</param>
    pplx::task<std::shared_ptr<TemplateResource>> getArticleTemplate(utility::string_t id);
    /// <summary>
    /// List and search article templates
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or ARTICLES_ADMIN
    /// </remarks>
    /// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
    pplx::task<std::shared_ptr<PageResource«TemplateResource»>> getArticleTemplates(int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// List and search articles
    /// </summary>
    /// <remarks>
    /// Get a list of articles with optional filtering. Assets will not be filled in on the resources returned. Use &#39;Get a single article&#39; to retrieve the full resource with assets for a given item as needed. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
    /// </remarks>
    /// <param name="filterActiveOnly">Filter for articles that are active (true) or inactive (false) (optional)</param>/// <param name="filterCategory">Filter for articles from a specific category by id (optional)</param>/// <param name="filterTagset">Filter for articles with at least one of a specified set of tags (separated by comma) (optional)</param>/// <param name="filterTagIntersection">Filter for articles with all of a specified set of tags (separated by comma) (optional)</param>/// <param name="filterTagExclusion">Filter for articles with none of a specified set of tags (separated by comma) (optional)</param>/// <param name="filterTitle">Filter for articles whose title contains a string (optional)</param>/// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
    pplx::task<std::shared_ptr<PageResource«ArticleResource»>> getArticles(bool filterActiveOnly, utility::string_t filterCategory, utility::string_t filterTagset, utility::string_t filterTagIntersection, utility::string_t filterTagExclusion, utility::string_t filterTitle, int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// Get a template
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATES_ADMIN
    /// </remarks>
    /// <param name="typeHint">The type for the resource this template applies to</param>/// <param name="id">The id of the template</param>
    pplx::task<std::shared_ptr<TemplateResource>> getTemplate(utility::string_t typeHint, utility::string_t id);
    /// <summary>
    /// List and search templates
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATES_ADMIN
    /// </remarks>
    /// <param name="typeHint">The type for the resource this template applies to</param>/// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
    pplx::task<std::shared_ptr<PageResource«TemplateResource»>> getTemplates(utility::string_t typeHint, int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// Update an existing article
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; ARTICLES_ADMIN
    /// </remarks>
    /// <param name="id">The article id</param>/// <param name="articleResource">The article object (optional)</param>
    pplx::task<std::shared_ptr<ArticleResource>> updateArticle(utility::string_t id, std::shared_ptr<ArticleResource> articleResource);
    /// <summary>
    /// Update an article template
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
    /// </remarks>
    /// <param name="id">The id of the template</param>/// <param name="articleTemplateResource">The article template resource object (optional)</param>
    pplx::task<std::shared_ptr<TemplateResource>> updateArticleTemplate(utility::string_t id, std::shared_ptr<TemplateResource> articleTemplateResource);
    /// <summary>
    /// Update a template
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATES_ADMIN
    /// </remarks>
    /// <param name="typeHint">The type for the resource this template applies to</param>/// <param name="id">The id of the template</param>/// <param name="template">The template (optional)</param>
    pplx::task<std::shared_ptr<TemplateResource>> updateTemplate(utility::string_t typeHint, utility::string_t id, std::shared_ptr<TemplateResource> template);
    /// <summary>
    /// Validate a templated resource
    /// </summary>
    /// <remarks>
    /// Error code thrown if invalid.&lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATES_ADMIN
    /// </remarks>
    /// <param name="typeHint">The type for the resource this template applies to</param>/// <param name="resource">The resource to validate (optional)</param>
    pplx::task<void> validate(utility::string_t typeHint, std::shared_ptr<BasicTemplatedResource> resource);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* Content_ArticlesApi_H_ */

