/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "CampaignResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

CampaignResource::CampaignResource()
{
    m_Active = false;
    m_ActiveIsSet = false;
    m_Additional_propertiesIsSet = false;
    m_Created_date = 0;
    m_Created_dateIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_Leaderboard_strategy = U("");
    m_Leaderboard_strategyIsSet = false;
    m_Long_description = U("");
    m_Long_descriptionIsSet = false;
    m_Name = U("");
    m_Next_challenge = U("");
    m_Next_challengeIsSet = false;
    m_Next_challenge_date = 0;
    m_Next_challenge_dateIsSet = false;
    m_Reward_setIsSet = false;
    m_Reward_status = U("");
    m_Reward_statusIsSet = false;
    m_Short_description = U("");
    m_Short_descriptionIsSet = false;
    m_Template = U("");
    m_TemplateIsSet = false;
    m_Updated_date = 0;
    m_Updated_dateIsSet = false;
    
}

CampaignResource::~CampaignResource()
{
}

void CampaignResource::validate()
{
    // TODO: implement validation
}

web::json::value CampaignResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ActiveIsSet)
    {
        val[U("active")] = ModelBase::toJson(m_Active);
    }
    if(m_Additional_propertiesIsSet)
    {
        val[U("additional_properties")] = ModelBase::toJson(m_Additional_properties);
    }
    if(m_Created_dateIsSet)
    {
        val[U("created_date")] = ModelBase::toJson(m_Created_date);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_Leaderboard_strategyIsSet)
    {
        val[U("leaderboard_strategy")] = ModelBase::toJson(m_Leaderboard_strategy);
    }
    if(m_Long_descriptionIsSet)
    {
        val[U("long_description")] = ModelBase::toJson(m_Long_description);
    }
    val[U("name")] = ModelBase::toJson(m_Name);
    if(m_Next_challengeIsSet)
    {
        val[U("next_challenge")] = ModelBase::toJson(m_Next_challenge);
    }
    if(m_Next_challenge_dateIsSet)
    {
        val[U("next_challenge_date")] = ModelBase::toJson(m_Next_challenge_date);
    }
    if(m_Reward_setIsSet)
    {
        val[U("reward_set")] = ModelBase::toJson(m_Reward_set);
    }
    if(m_Reward_statusIsSet)
    {
        val[U("reward_status")] = ModelBase::toJson(m_Reward_status);
    }
    if(m_Short_descriptionIsSet)
    {
        val[U("short_description")] = ModelBase::toJson(m_Short_description);
    }
    if(m_TemplateIsSet)
    {
        val[U("template")] = ModelBase::toJson(m_Template);
    }
    if(m_Updated_dateIsSet)
    {
        val[U("updated_date")] = ModelBase::toJson(m_Updated_date);
    }
    

    return val;
}

void CampaignResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("active")))
    {
        setActive(ModelBase::boolFromJson(val[U("active")]));
    }
    if(val.has_field(U("additional_properties")))
    {
        if(!val[U("additional_properties")].is_null())
        {
            std::map<utility::string_t, std::shared_ptr<Property>> newItem(std::map<utility::string_t, Property>());
            newItem->fromJson(val[U("additional_properties")]);
            setAdditionalProperties( newItem );
        }
        
    }
    if(val.has_field(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromJson(val[U("created_date")]));
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int64_tFromJson(val[U("id")]));
    }
    if(val.has_field(U("leaderboard_strategy")))
    {
        setLeaderboardStrategy(ModelBase::stringFromJson(val[U("leaderboard_strategy")]));
        
    }
    if(val.has_field(U("long_description")))
    {
        setLongDescription(ModelBase::stringFromJson(val[U("long_description")]));
        
    }
    setName(ModelBase::stringFromJson(val[U("name")]));
    if(val.has_field(U("next_challenge")))
    {
        setNextChallenge(ModelBase::stringFromJson(val[U("next_challenge")]));
        
    }
    if(val.has_field(U("next_challenge_date")))
    {
        setNextChallengeDate(ModelBase::int64_tFromJson(val[U("next_challenge_date")]));
    }
    if(val.has_field(U("reward_set")))
    {
        if(!val[U("reward_set")].is_null())
        {
            std::shared_ptr<RewardSetResource> newItem(new RewardSetResource());
            newItem->fromJson(val[U("reward_set")]);
            setRewardSet( newItem );
        }
        
    }
    if(val.has_field(U("reward_status")))
    {
        setRewardStatus(ModelBase::stringFromJson(val[U("reward_status")]));
        
    }
    if(val.has_field(U("short_description")))
    {
        setShortDescription(ModelBase::stringFromJson(val[U("short_description")]));
        
    }
    if(val.has_field(U("template")))
    {
        setTemplate(ModelBase::stringFromJson(val[U("template")]));
        
    }
    if(val.has_field(U("updated_date")))
    {
        setUpdatedDate(ModelBase::int64_tFromJson(val[U("updated_date")]));
    }
    
}

void CampaignResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_ActiveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("active"), m_Active));
    }
    if(m_Additional_propertiesIsSet)
    {
        if (m_Additional_properties.get())
        {
            m_Additional_properties->toMultipart(multipart, U("additional_properties."));
        }
        
    }
    if(m_Created_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("created_date"), m_Created_date));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    if(m_Leaderboard_strategyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("leaderboard_strategy"), m_Leaderboard_strategy));
        
    }
    if(m_Long_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("long_description"), m_Long_description));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    if(m_Next_challengeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("next_challenge"), m_Next_challenge));
        
    }
    if(m_Next_challenge_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("next_challenge_date"), m_Next_challenge_date));
    }
    if(m_Reward_setIsSet)
    {
        if (m_Reward_set.get())
        {
            m_Reward_set->toMultipart(multipart, U("reward_set."));
        }
        
    }
    if(m_Reward_statusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("reward_status"), m_Reward_status));
        
    }
    if(m_Short_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("short_description"), m_Short_description));
        
    }
    if(m_TemplateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("template"), m_Template));
        
    }
    if(m_Updated_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("updated_date"), m_Updated_date));
    }
    
}

void CampaignResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("active")))
    {
        setActive(ModelBase::boolFromHttpContent(multipart->getContent(U("active"))));
    }
    if(multipart->hasContent(U("additional_properties")))
    {
        if(multipart->hasContent(U("additional_properties")))
        {
            std::map<utility::string_t, std::shared_ptr<Property>> newItem(std::map<utility::string_t, Property>());
            newItem->fromMultiPart(multipart, U("additional_properties."));
            setAdditionalProperties( newItem );
        }
        
    }
    if(multipart->hasContent(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("created_date"))));
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int64_tFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("leaderboard_strategy")))
    {
        setLeaderboardStrategy(ModelBase::stringFromHttpContent(multipart->getContent(U("leaderboard_strategy"))));
        
    }
    if(multipart->hasContent(U("long_description")))
    {
        setLongDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("long_description"))));
        
    }
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    if(multipart->hasContent(U("next_challenge")))
    {
        setNextChallenge(ModelBase::stringFromHttpContent(multipart->getContent(U("next_challenge"))));
        
    }
    if(multipart->hasContent(U("next_challenge_date")))
    {
        setNextChallengeDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("next_challenge_date"))));
    }
    if(multipart->hasContent(U("reward_set")))
    {
        if(multipart->hasContent(U("reward_set")))
        {
            std::shared_ptr<RewardSetResource> newItem(new RewardSetResource());
            newItem->fromMultiPart(multipart, U("reward_set."));
            setRewardSet( newItem );
        }
        
    }
    if(multipart->hasContent(U("reward_status")))
    {
        setRewardStatus(ModelBase::stringFromHttpContent(multipart->getContent(U("reward_status"))));
        
    }
    if(multipart->hasContent(U("short_description")))
    {
        setShortDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("short_description"))));
        
    }
    if(multipart->hasContent(U("template")))
    {
        setTemplate(ModelBase::stringFromHttpContent(multipart->getContent(U("template"))));
        
    }
    if(multipart->hasContent(U("updated_date")))
    {
        setUpdatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("updated_date"))));
    }
    
}


bool CampaignResource::getActive() const
{
    return m_Active;
}
void CampaignResource::setActive(bool value)
{
    m_Active = value;
    m_ActiveIsSet = true;
}
bool CampaignResource::activeIsSet() const
{
    return m_ActiveIsSet;
}
void CampaignResource::unsetActive()
{
    m_ActiveIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<Property>>& CampaignResource::getAdditionalProperties()
{
    return m_Additional_properties;
}
bool CampaignResource::additional_propertiesIsSet() const
{
    return m_Additional_propertiesIsSet;
}
void CampaignResource::unsetAdditional_properties()
{
    m_Additional_propertiesIsSet = false;
}
int64_t CampaignResource::getCreatedDate() const
{
    return m_Created_date;
}
void CampaignResource::setCreatedDate(int64_t value)
{
    m_Created_date = value;
    m_Created_dateIsSet = true;
}
bool CampaignResource::created_dateIsSet() const
{
    return m_Created_dateIsSet;
}
void CampaignResource::unsetCreated_date()
{
    m_Created_dateIsSet = false;
}
int64_t CampaignResource::getId() const
{
    return m_Id;
}
void CampaignResource::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool CampaignResource::idIsSet() const
{
    return m_IdIsSet;
}
void CampaignResource::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t CampaignResource::getLeaderboardStrategy() const
{
    return m_Leaderboard_strategy;
}
void CampaignResource::setLeaderboardStrategy(utility::string_t value)
{
    m_Leaderboard_strategy = value;
    m_Leaderboard_strategyIsSet = true;
}
bool CampaignResource::leaderboard_strategyIsSet() const
{
    return m_Leaderboard_strategyIsSet;
}
void CampaignResource::unsetLeaderboard_strategy()
{
    m_Leaderboard_strategyIsSet = false;
}
utility::string_t CampaignResource::getLongDescription() const
{
    return m_Long_description;
}
void CampaignResource::setLongDescription(utility::string_t value)
{
    m_Long_description = value;
    m_Long_descriptionIsSet = true;
}
bool CampaignResource::long_descriptionIsSet() const
{
    return m_Long_descriptionIsSet;
}
void CampaignResource::unsetLong_description()
{
    m_Long_descriptionIsSet = false;
}
utility::string_t CampaignResource::getName() const
{
    return m_Name;
}
void CampaignResource::setName(utility::string_t value)
{
    m_Name = value;
    
}
utility::string_t CampaignResource::getNextChallenge() const
{
    return m_Next_challenge;
}
void CampaignResource::setNextChallenge(utility::string_t value)
{
    m_Next_challenge = value;
    m_Next_challengeIsSet = true;
}
bool CampaignResource::next_challengeIsSet() const
{
    return m_Next_challengeIsSet;
}
void CampaignResource::unsetNext_challenge()
{
    m_Next_challengeIsSet = false;
}
int64_t CampaignResource::getNextChallengeDate() const
{
    return m_Next_challenge_date;
}
void CampaignResource::setNextChallengeDate(int64_t value)
{
    m_Next_challenge_date = value;
    m_Next_challenge_dateIsSet = true;
}
bool CampaignResource::next_challenge_dateIsSet() const
{
    return m_Next_challenge_dateIsSet;
}
void CampaignResource::unsetNext_challenge_date()
{
    m_Next_challenge_dateIsSet = false;
}
std::shared_ptr<RewardSetResource> CampaignResource::getRewardSet() const
{
    return m_Reward_set;
}
void CampaignResource::setRewardSet(std::shared_ptr<RewardSetResource> value)
{
    m_Reward_set = value;
    m_Reward_setIsSet = true;
}
bool CampaignResource::reward_setIsSet() const
{
    return m_Reward_setIsSet;
}
void CampaignResource::unsetReward_set()
{
    m_Reward_setIsSet = false;
}
utility::string_t CampaignResource::getRewardStatus() const
{
    return m_Reward_status;
}
void CampaignResource::setRewardStatus(utility::string_t value)
{
    m_Reward_status = value;
    m_Reward_statusIsSet = true;
}
bool CampaignResource::reward_statusIsSet() const
{
    return m_Reward_statusIsSet;
}
void CampaignResource::unsetReward_status()
{
    m_Reward_statusIsSet = false;
}
utility::string_t CampaignResource::getShortDescription() const
{
    return m_Short_description;
}
void CampaignResource::setShortDescription(utility::string_t value)
{
    m_Short_description = value;
    m_Short_descriptionIsSet = true;
}
bool CampaignResource::short_descriptionIsSet() const
{
    return m_Short_descriptionIsSet;
}
void CampaignResource::unsetShort_description()
{
    m_Short_descriptionIsSet = false;
}
utility::string_t CampaignResource::getTemplate() const
{
    return m_Template;
}
void CampaignResource::setTemplate(utility::string_t value)
{
    m_Template = value;
    m_TemplateIsSet = true;
}
bool CampaignResource::templateIsSet() const
{
    return m_TemplateIsSet;
}
void CampaignResource::unsetTemplate()
{
    m_TemplateIsSet = false;
}
int64_t CampaignResource::getUpdatedDate() const
{
    return m_Updated_date;
}
void CampaignResource::setUpdatedDate(int64_t value)
{
    m_Updated_date = value;
    m_Updated_dateIsSet = true;
}
bool CampaignResource::updated_dateIsSet() const
{
    return m_Updated_dateIsSet;
}
void CampaignResource::unsetUpdated_date()
{
    m_Updated_dateIsSet = false;
}

}
}
}
}

