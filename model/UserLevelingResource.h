/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * UserLevelingResource.h
 *
 * 
 */

#ifndef UserLevelingResource_H_
#define UserLevelingResource_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  UserLevelingResource
    : public ModelBase
{
public:
    UserLevelingResource();
    virtual ~UserLevelingResource();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UserLevelingResource members

    /// <summary>
    /// The name of the last tier the user has qualified for
    /// </summary>
    utility::string_t getLastTierName() const;
    void setLastTierName(utility::string_t value);
        /// <summary>
    /// The progress level of the last tier the user has qualified for
    /// </summary>
    int32_t getLastTierProgress() const;
    void setLastTierProgress(int32_t value);
        /// <summary>
    /// The name of the level schema
    /// </summary>
    utility::string_t getLevelName() const;
    void setLevelName(utility::string_t value);
        /// <summary>
    /// The name of the next tier the user can qualify for
    /// </summary>
    utility::string_t getNextTierName() const;
    void setNextTierName(utility::string_t value);
        /// <summary>
    /// The progress needed to qualify for the next tier
    /// </summary>
    int32_t getNextTierProgress() const;
    void setNextTierProgress(int32_t value);
        /// <summary>
    /// The amount of progress the user has
    /// </summary>
    int32_t getProgress() const;
    void setProgress(int32_t value);
        /// <summary>
    /// The names of the tiers the user has qualified for
    /// </summary>
    std::vector<utility::string_t>& getTierNames();
        /// <summary>
    /// The ID of the user
    /// </summary>
    int32_t getUserId() const;
    void setUserId(int32_t value);
    
protected:
    utility::string_t m_Last_tier_name;
    int32_t m_Last_tier_progress;
    utility::string_t m_Level_name;
    utility::string_t m_Next_tier_name;
    int32_t m_Next_tier_progress;
    int32_t m_Progress;
    std::vector<utility::string_t> m_Tier_names;
    int32_t m_User_id;
    };

}
}
}
}

#endif /* UserLevelingResource_H_ */
