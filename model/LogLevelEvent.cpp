/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "LogLevelEvent.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

LogLevelEvent::LogLevelEvent()
{
    m_Level = U("");
    m_LevelIsSet = false;
    m_Name = U("");
    m_NameIsSet = false;
}

LogLevelEvent::~LogLevelEvent()
{
}

void LogLevelEvent::validate()
{
    // TODO: implement validation
}

web::json::value LogLevelEvent::toJson() const
{
    web::json::value val = this->BroadcastableEvent::toJson();

    if(m_LevelIsSet)
    {
        val[U("level")] = ModelBase::toJson(m_Level);
    }
    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }

    return val;
}

void LogLevelEvent::fromJson(web::json::value& val)
{
    this->BroadcastableEvent::fromJson(val);

    if(val.has_field(U("level")))
    {
        setLevel(ModelBase::stringFromJson(val[U("level")]));
    }
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
    }
}

void LogLevelEvent::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_ClientIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("client"), m_Client));
        
    }
    if(m_CustomerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("customer"), m_Customer));
        
    }
    if(m_Do_not_broadcastIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("do_not_broadcast"), m_Do_not_broadcast));
    }
    if(m_SectionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("section"), m_Section));
        
    }
    if(m_SourceIsSet)
    {
        if (m_Source.get())
        {
            m_Source->toMultipart(multipart, U("source."));
        }
        
    }
    if(m_SpecificsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("specifics"), m_Specifics));
        
    }
    if(m_SynchronousIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("synchronous"), m_Synchronous));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("timestamp"), m_Timestamp));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("type"), m_Type));
    if(m_LevelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("level"), m_Level));
        
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
}

void LogLevelEvent::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("client")))
    {
        setClient(ModelBase::stringFromHttpContent(multipart->getContent(U("client"))));
    }
    if(multipart->hasContent(U("customer")))
    {
        setCustomer(ModelBase::stringFromHttpContent(multipart->getContent(U("customer"))));
    }
    if(multipart->hasContent(U("do_not_broadcast")))
    {
        setDoNotBroadcast(ModelBase::boolFromHttpContent(multipart->getContent(U("do_not_broadcast"))));
    }
    if(multipart->hasContent(U("section")))
    {
        setSection(ModelBase::stringFromHttpContent(multipart->getContent(U("section"))));
    }
    if(multipart->hasContent(U("source")))
    {
        if(multipart->hasContent(U("source")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, U("source."));
            setSource( newItem );
        }
    }
    if(multipart->hasContent(U("specifics")))
    {
        setSpecifics(ModelBase::stringFromHttpContent(multipart->getContent(U("specifics"))));
    }
    if(multipart->hasContent(U("synchronous")))
    {
        setSynchronous(ModelBase::boolFromHttpContent(multipart->getContent(U("synchronous"))));
    }
    if(multipart->hasContent(U("timestamp")))
    {
        setTimestamp(ModelBase::int64_tFromHttpContent(multipart->getContent(U("timestamp"))));
    }
    setType(ModelBase::stringFromHttpContent(multipart->getContent(U("type"))));
    if(multipart->hasContent(U("level")))
    {
        setLevel(ModelBase::stringFromHttpContent(multipart->getContent(U("level"))));
    }
    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    }
}

utility::string_t LogLevelEvent::getLevel() const
{
    return m_Level;
}


void LogLevelEvent::setLevel(utility::string_t value)
{
    m_Level = value;
    m_LevelIsSet = true;
}
bool LogLevelEvent::levelIsSet() const
{
    return m_LevelIsSet;
}

void LogLevelEvent::unsetLevel()
{
    m_LevelIsSet = false;
}

utility::string_t LogLevelEvent::getName() const
{
    return m_Name;
}


void LogLevelEvent::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool LogLevelEvent::nameIsSet() const
{
    return m_NameIsSet;
}

void LogLevelEvent::unsetName()
{
    m_NameIsSet = false;
}

}
}
}
}

