/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "OperationDefinitionResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

OperationDefinitionResource::OperationDefinitionResource()
{
    m_ArgumentsIsSet = false;
    m_Description = U("");
    m_DescriptionIsSet = false;
    m_OperatorIsSet = false;
    m_Return_type = U("");
    m_Return_typeIsSet = false;
    m_Template = U("");
    m_TemplateIsSet = false;
}

OperationDefinitionResource::~OperationDefinitionResource()
{
}

void OperationDefinitionResource::validate()
{
    // TODO: implement validation
}

web::json::value OperationDefinitionResource::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Arguments )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("arguments")] = web::json::value::array(jsonArray);
        }
    }
    if(m_DescriptionIsSet)
    {
        val[U("description")] = ModelBase::toJson(m_Description);
    }
    if(m_OperatorIsSet)
    {
        val[U("operator")] = ModelBase::toJson(m_Operator);
    }
    if(m_Return_typeIsSet)
    {
        val[U("return_type")] = ModelBase::toJson(m_Return_type);
    }
    if(m_TemplateIsSet)
    {
        val[U("template")] = ModelBase::toJson(m_Template);
    }

    return val;
}

void OperationDefinitionResource::fromJson(web::json::value& val)
{
    {
        m_Arguments.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("arguments")))
        {
        for( auto& item : val[U("arguments")].as_array() )
        {
            if(item.is_null())
            {
                m_Arguments.push_back( std::shared_ptr<ArgumentResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<ArgumentResource> newItem(new ArgumentResource());
                newItem->fromJson(item);
                m_Arguments.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(U("description")))
    {
        setDescription(ModelBase::stringFromJson(val[U("description")]));
    }
    if(val.has_field(U("operator")))
    {
        if(!val[U("operator")].is_null())
        {
            std::shared_ptr<Operator> newItem(new Operator());
            newItem->fromJson(val[U("operator")]);
            setOperator( newItem );
        }
    }
    if(val.has_field(U("return_type")))
    {
        setReturnType(ModelBase::stringFromJson(val[U("return_type")]));
    }
    if(val.has_field(U("template")))
    {
        setTemplate(ModelBase::stringFromJson(val[U("template")]));
    }
}

void OperationDefinitionResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Arguments )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("arguments"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("description"), m_Description));
        
    }
    if(m_OperatorIsSet)
    {
        if (m_Operator.get())
        {
            m_Operator->toMultipart(multipart, U("operator."));
        }
        
    }
    if(m_Return_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("return_type"), m_Return_type));
        
    }
    if(m_TemplateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("template"), m_Template));
        
    }
}

void OperationDefinitionResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        m_Arguments.clear();
        if(multipart->hasContent(U("arguments")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("arguments"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Arguments.push_back( std::shared_ptr<ArgumentResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<ArgumentResource> newItem(new ArgumentResource());
                newItem->fromJson(item);
                m_Arguments.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(U("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("description"))));
    }
    if(multipart->hasContent(U("operator")))
    {
        if(multipart->hasContent(U("operator")))
        {
            std::shared_ptr<Operator> newItem(new Operator());
            newItem->fromMultiPart(multipart, U("operator."));
            setOperator( newItem );
        }
    }
    if(multipart->hasContent(U("return_type")))
    {
        setReturnType(ModelBase::stringFromHttpContent(multipart->getContent(U("return_type"))));
    }
    if(multipart->hasContent(U("template")))
    {
        setTemplate(ModelBase::stringFromHttpContent(multipart->getContent(U("template"))));
    }
}

std::vector<std::shared_ptr<ArgumentResource>>& OperationDefinitionResource::getArguments()
{
    return m_Arguments;
}

void OperationDefinitionResource::setArguments(std::vector<std::shared_ptr<ArgumentResource>> value)
{
    m_Arguments = value;
    m_ArgumentsIsSet = true;
}
bool OperationDefinitionResource::argumentsIsSet() const
{
    return m_ArgumentsIsSet;
}

void OperationDefinitionResource::unsetArguments()
{
    m_ArgumentsIsSet = false;
}

utility::string_t OperationDefinitionResource::getDescription() const
{
    return m_Description;
}


void OperationDefinitionResource::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool OperationDefinitionResource::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void OperationDefinitionResource::unsetDescription()
{
    m_DescriptionIsSet = false;
}

std::shared_ptr<Operator> OperationDefinitionResource::getOperator() const
{
    return m_Operator;
}


void OperationDefinitionResource::setOperator(std::shared_ptr<Operator> value)
{
    m_Operator = value;
    m_OperatorIsSet = true;
}
bool OperationDefinitionResource::operatorIsSet() const
{
    return m_OperatorIsSet;
}

void OperationDefinitionResource::unsetOperator()
{
    m_OperatorIsSet = false;
}

utility::string_t OperationDefinitionResource::getReturnType() const
{
    return m_Return_type;
}


void OperationDefinitionResource::setReturnType(utility::string_t value)
{
    m_Return_type = value;
    m_Return_typeIsSet = true;
}
bool OperationDefinitionResource::returnTypeIsSet() const
{
    return m_Return_typeIsSet;
}

void OperationDefinitionResource::unsetReturn_type()
{
    m_Return_typeIsSet = false;
}

utility::string_t OperationDefinitionResource::getTemplate() const
{
    return m_Template;
}


void OperationDefinitionResource::setTemplate(utility::string_t value)
{
    m_Template = value;
    m_TemplateIsSet = true;
}
bool OperationDefinitionResource::templateIsSet() const
{
    return m_TemplateIsSet;
}

void OperationDefinitionResource::unsetTemplate()
{
    m_TemplateIsSet = false;
}

}
}
}
}

