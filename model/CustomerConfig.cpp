/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "CustomerConfig.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

CustomerConfig::CustomerConfig()
{
    m_Aliases = U("");
    m_AliasesIsSet = false;
    m_DatabaseIsSet = false;
    m_Name = U("");
    m_NameIsSet = false;
    m_S3_configIsSet = false;
    
}

CustomerConfig::~CustomerConfig()
{
}

void CustomerConfig::validate()
{
    // TODO: implement validation
}

web::json::value CustomerConfig::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_AliasesIsSet)
    {
        val[U("aliases")] = ModelBase::toJson(m_Aliases);
    }
    if(m_DatabaseIsSet)
    {
        val[U("database")] = ModelBase::toJson(m_Database);
    }
    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }
    if(m_S3_configIsSet)
    {
        val[U("s3_config")] = ModelBase::toJson(m_S3_config);
    }
    

    return val;
}

void CustomerConfig::fromJson(web::json::value& val)
{
    if(val.has_field(U("aliases")))
    {
        setAliases(ModelBase::stringFromJson(val[U("aliases")]));
        
    }
    if(val.has_field(U("database")))
    {
        if(!val[U("database")].is_null())
        {
            std::shared_ptr<DatabaseConfig> newItem(new DatabaseConfig());
            newItem->fromJson(val[U("database")]);
            setDatabase( newItem );
        }
        
    }
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
        
    }
    if(val.has_field(U("s3_config")))
    {
        if(!val[U("s3_config")].is_null())
        {
            std::shared_ptr<S3Config> newItem(new S3Config());
            newItem->fromJson(val[U("s3_config")]);
            setS3Config( newItem );
        }
        
    }
    
}

void CustomerConfig::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_AliasesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("aliases"), m_Aliases));
        
    }
    if(m_DatabaseIsSet)
    {
        if (m_Database.get())
        {
            m_Database->toMultipart(multipart, U("database."));
        }
        
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
    if(m_S3_configIsSet)
    {
        if (m_S3_config.get())
        {
            m_S3_config->toMultipart(multipart, U("s3_config."));
        }
        
    }
    
}

void CustomerConfig::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("aliases")))
    {
        setAliases(ModelBase::stringFromHttpContent(multipart->getContent(U("aliases"))));
        
    }
    if(multipart->hasContent(U("database")))
    {
        if(multipart->hasContent(U("database")))
        {
            std::shared_ptr<DatabaseConfig> newItem(new DatabaseConfig());
            newItem->fromMultiPart(multipart, U("database."));
            setDatabase( newItem );
        }
        
    }
    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
        
    }
    if(multipart->hasContent(U("s3_config")))
    {
        if(multipart->hasContent(U("s3_config")))
        {
            std::shared_ptr<S3Config> newItem(new S3Config());
            newItem->fromMultiPart(multipart, U("s3_config."));
            setS3Config( newItem );
        }
        
    }
    
}


utility::string_t CustomerConfig::getAliases() const
{
    return m_Aliases;
}
void CustomerConfig::setAliases(utility::string_t value)
{
    m_Aliases = value;
    m_AliasesIsSet = true;
}
bool CustomerConfig::aliasesIsSet() const
{
    return m_AliasesIsSet;
}
void CustomerConfig::unsetAliases()
{
    m_AliasesIsSet = false;
}
std::shared_ptr<DatabaseConfig> CustomerConfig::getDatabase() const
{
    return m_Database;
}
void CustomerConfig::setDatabase(std::shared_ptr<DatabaseConfig> value)
{
    m_Database = value;
    m_DatabaseIsSet = true;
}
bool CustomerConfig::databaseIsSet() const
{
    return m_DatabaseIsSet;
}
void CustomerConfig::unsetDatabase()
{
    m_DatabaseIsSet = false;
}
utility::string_t CustomerConfig::getName() const
{
    return m_Name;
}
void CustomerConfig::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool CustomerConfig::nameIsSet() const
{
    return m_NameIsSet;
}
void CustomerConfig::unsetName()
{
    m_NameIsSet = false;
}
std::shared_ptr<S3Config> CustomerConfig::getS3Config() const
{
    return m_S3_config;
}
void CustomerConfig::setS3Config(std::shared_ptr<S3Config> value)
{
    m_S3_config = value;
    m_S3_configIsSet = true;
}
bool CustomerConfig::s3_configIsSet() const
{
    return m_S3_configIsSet;
}
void CustomerConfig::unsetS3_config()
{
    m_S3_configIsSet = false;
}

}
}
}
}

