/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SubscriptionResource.h
 *
 * 
 */

#ifndef SubscriptionResource_H_
#define SubscriptionResource_H_


#include "ModelBase.h"

#include "SubscriptionPlanResource.h"
#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>
#include "Property.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  SubscriptionResource
    : public ModelBase
{
public:
    SubscriptionResource();
    virtual ~SubscriptionResource();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SubscriptionResource members

    /// <summary>
    /// A map of item additional properties, keyed on the property name. Must match the names and types defined in the template for this item type.
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<Property>>& getAdditionalProperties();
    bool additional_propertiesIsSet() const;
    void unsetAdditional_properties();
    /// <summary>
    /// Who can purchase this subscription
    /// </summary>
    utility::string_t getAvailability() const;
    void setAvailability(utility::string_t value);
    bool availabilityIsSet() const;
    void unsetAvailability();
    /// <summary>
    /// A category for filtering items
    /// </summary>
    utility::string_t getCategory() const;
    void setCategory(utility::string_t value);
    bool categoryIsSet() const;
    void unsetCategory();
    /// <summary>
    /// The day of the month 1..31 this subscription will renew
    /// </summary>
    int32_t getConsolidationDayOfMonth() const;
    void setConsolidationDayOfMonth(int32_t value);
    bool consolidation_day_of_monthIsSet() const;
    void unsetConsolidation_day_of_month();
    /// <summary>
    /// The date the item was created, unix timestamp in seconds
    /// </summary>
    int64_t getCreatedDate() const;
    void setCreatedDate(int64_t value);
    bool created_dateIsSet() const;
    void unsetCreated_date();
    /// <summary>
    /// A list of country iso3 codes to include in the blacklist/whitelist geo policy
    /// </summary>
    std::vector<utility::string_t>& getGeoCountryList();
    bool geo_country_listIsSet() const;
    void unsetGeo_country_list();
    /// <summary>
    /// Whether to use the geo_country_list as a black list or white list for item geographical availability
    /// </summary>
    utility::string_t getGeoPolicyType() const;
    void setGeoPolicyType(utility::string_t value);
    bool geo_policy_typeIsSet() const;
    void unsetGeo_policy_type();
    /// <summary>
    /// The id of the item
    /// </summary>
    int32_t getId() const;
    void setId(int32_t value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// A long description of the subscription
    /// </summary>
    utility::string_t getLongDescription() const;
    void setLongDescription(utility::string_t value);
    bool long_descriptionIsSet() const;
    void unsetLong_description();
    /// <summary>
    /// The name of the item
    /// </summary>
    utility::string_t getName() const;
    void setName(utility::string_t value);
        /// <summary>
    /// The billing options for this subscription
    /// </summary>
    std::vector<std::shared_ptr<SubscriptionPlanResource>>& getPlans();
    bool plansIsSet() const;
    void unsetPlans();
    /// <summary>
    /// A short description of the subscription.  Max 255 characters
    /// </summary>
    utility::string_t getShortDescription() const;
    void setShortDescription(utility::string_t value);
    bool short_descriptionIsSet() const;
    void unsetShort_description();
    /// <summary>
    /// A number to use in sorting items.  Default 500
    /// </summary>
    int32_t getSort() const;
    void setSort(int32_t value);
    bool sortIsSet() const;
    void unsetSort();
    /// <summary>
    /// Used to schedule removal from store.  Null means the subscription will never be removed
    /// </summary>
    int64_t getStoreEnd() const;
    void setStoreEnd(int64_t value);
    bool store_endIsSet() const;
    void unsetStore_end();
    /// <summary>
    /// Used to schedule appearance in store.  Null means the subscription will appear now
    /// </summary>
    int64_t getStoreStart() const;
    void setStoreStart(int64_t value);
    bool store_startIsSet() const;
    void unsetStore_start();
    /// <summary>
    /// List of tags used for filtering items
    /// </summary>
    std::vector<utility::string_t>& getTags();
    bool tagsIsSet() const;
    void unsetTags();
    /// <summary>
    /// An item template this item is validated against. May be null and no validation of additional properties will be done.
    /// </summary>
    utility::string_t getTemplate() const;
    void setTemplate(utility::string_t value);
    bool templateIsSet() const;
    void unsetTemplate();
    /// <summary>
    /// The unique key for the item
    /// </summary>
    utility::string_t getUniqueKey() const;
    void setUniqueKey(utility::string_t value);
    bool unique_keyIsSet() const;
    void unsetUnique_key();
    /// <summary>
    /// The date the item was last updated
    /// </summary>
    int64_t getUpdatedDate() const;
    void setUpdatedDate(int64_t value);
    bool updated_dateIsSet() const;
    void unsetUpdated_date();
    /// <summary>
    /// The vendor who provides the item
    /// </summary>
    int32_t getVendorId() const;
    void setVendorId(int32_t value);
    
protected:
    std::map<utility::string_t, std::shared_ptr<Property>> m_Additional_properties;
    bool m_Additional_propertiesIsSet;
utility::string_t m_Availability;
    bool m_AvailabilityIsSet;
utility::string_t m_Category;
    bool m_CategoryIsSet;
int32_t m_Consolidation_day_of_month;
    bool m_Consolidation_day_of_monthIsSet;
int64_t m_Created_date;
    bool m_Created_dateIsSet;
std::vector<utility::string_t> m_Geo_country_list;
    bool m_Geo_country_listIsSet;
utility::string_t m_Geo_policy_type;
    bool m_Geo_policy_typeIsSet;
int32_t m_Id;
    bool m_IdIsSet;
utility::string_t m_Long_description;
    bool m_Long_descriptionIsSet;
utility::string_t m_Name;
    std::vector<std::shared_ptr<SubscriptionPlanResource>> m_Plans;
    bool m_PlansIsSet;
utility::string_t m_Short_description;
    bool m_Short_descriptionIsSet;
int32_t m_Sort;
    bool m_SortIsSet;
int64_t m_Store_end;
    bool m_Store_endIsSet;
int64_t m_Store_start;
    bool m_Store_startIsSet;
std::vector<utility::string_t> m_Tags;
    bool m_TagsIsSet;
utility::string_t m_Template;
    bool m_TemplateIsSet;
utility::string_t m_Unique_key;
    bool m_Unique_keyIsSet;
int64_t m_Updated_date;
    bool m_Updated_dateIsSet;
int32_t m_Vendor_id;
    };

}
}
}
}

#endif /* SubscriptionResource_H_ */
