/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PredicateOperation.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

PredicateOperation::PredicateOperation()
{
    m_ArgsIsSet = false;
    m_OperatorIsSet = false;
    
}

PredicateOperation::~PredicateOperation()
{
}

void PredicateOperation::validate()
{
    // TODO: implement validation
}

web::json::value PredicateOperation::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Args )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("args")] = web::json::value::array(jsonArray);
        }
    }
    if(m_OperatorIsSet)
    {
        val[U("operator")] = ModelBase::toJson(m_Operator);
    }
    

    return val;
}

void PredicateOperation::fromJson(web::json::value& val)
{
    {
        m_Args.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("args")))
        {
        for( auto& item : val[U("args")].as_array() )
        {
            
            if(item.is_null())
            {
                m_Args.push_back( std::shared_ptr<Expression«object»>(nullptr) );
            }
            else
            {
                std::shared_ptr<Expression«object»> newItem(new Expression«object»());
                newItem->fromJson(item);
                m_Args.push_back( newItem );
            }
            
        }
        }
    }
    if(val.has_field(U("operator")))
    {
        if(!val[U("operator")].is_null())
        {
            std::shared_ptr<Operator> newItem(new Operator());
            newItem->fromJson(val[U("operator")]);
            setOperator( newItem );
        }
        
    }
    
}

void PredicateOperation::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Args )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("args"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_OperatorIsSet)
    {
        if (m_Operator.get())
        {
            m_Operator->toMultipart(multipart, U("operator."));
        }
        
    }
    
}

void PredicateOperation::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        m_Args.clear();
        if(multipart->hasContent(U("args")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("args"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_Args.push_back( std::shared_ptr<Expression«object»>(nullptr) );
            }
            else
            {
                std::shared_ptr<Expression«object»> newItem(new Expression«object»());
                newItem->fromJson(item);
                m_Args.push_back( newItem );
            }
            
        }
        }
    }
    if(multipart->hasContent(U("operator")))
    {
        if(multipart->hasContent(U("operator")))
        {
            std::shared_ptr<Operator> newItem(new Operator());
            newItem->fromMultiPart(multipart, U("operator."));
            setOperator( newItem );
        }
        
    }
    
}


std::vector<std::shared_ptr<Expression«object»>>& PredicateOperation::getArgs()
{
    return m_Args;
}
bool PredicateOperation::argsIsSet() const
{
    return m_ArgsIsSet;
}
void PredicateOperation::unsetArgs()
{
    m_ArgsIsSet = false;
}
std::shared_ptr<Operator> PredicateOperation::getOperator() const
{
    return m_Operator;
}
void PredicateOperation::setOperator(std::shared_ptr<Operator> value)
{
    m_Operator = value;
    m_OperatorIsSet = true;
}
bool PredicateOperation::operatorIsSet() const
{
    return m_OperatorIsSet;
}
void PredicateOperation::unsetOperator()
{
    m_OperatorIsSet = false;
}

}
}
}
}

