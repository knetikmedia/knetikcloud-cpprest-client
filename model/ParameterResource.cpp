/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ParameterResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

ParameterResource::ParameterResource()
{
    m_Definition = U("");
    m_DefinitionIsSet = false;
    m_Of = U("");
    m_OfIsSet = false;
    m_Type = U("");
    m_TypeIsSet = false;
    m_ValueIsSet = false;
}

ParameterResource::~ParameterResource()
{
}

void ParameterResource::validate()
{
    // TODO: implement validation
}

web::json::value ParameterResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_DefinitionIsSet)
    {
        val[U("definition")] = ModelBase::toJson(m_Definition);
    }
    if(m_OfIsSet)
    {
        val[U("of")] = ModelBase::toJson(m_Of);
    }
    if(m_TypeIsSet)
    {
        val[U("type")] = ModelBase::toJson(m_Type);
    }
    if(m_ValueIsSet)
    {
        val[U("value")] = ModelBase::toJson(m_Value);
    }

    return val;
}

void ParameterResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("definition")))
    {
        setDefinition(ModelBase::stringFromJson(val[U("definition")]));
    }
    if(val.has_field(U("of")))
    {
        setOf(ModelBase::stringFromJson(val[U("of")]));
    }
    if(val.has_field(U("type")))
    {
        setType(ModelBase::stringFromJson(val[U("type")]));
    }
    if(val.has_field(U("value")))
    {
        if(!val[U("value")].is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(val[U("value")]);
            setValue( newItem );
        }
    }
}

void ParameterResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_DefinitionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("definition"), m_Definition));
        
    }
    if(m_OfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("of"), m_Of));
        
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("type"), m_Type));
        
    }
    if(m_ValueIsSet)
    {
        if (m_Value.get())
        {
            m_Value->toMultipart(multipart, U("value."));
        }
        
    }
}

void ParameterResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("definition")))
    {
        setDefinition(ModelBase::stringFromHttpContent(multipart->getContent(U("definition"))));
    }
    if(multipart->hasContent(U("of")))
    {
        setOf(ModelBase::stringFromHttpContent(multipart->getContent(U("of"))));
    }
    if(multipart->hasContent(U("type")))
    {
        setType(ModelBase::stringFromHttpContent(multipart->getContent(U("type"))));
    }
    if(multipart->hasContent(U("value")))
    {
        if(multipart->hasContent(U("value")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, U("value."));
            setValue( newItem );
        }
    }
}

utility::string_t ParameterResource::getDefinition() const
{
    return m_Definition;
}


void ParameterResource::setDefinition(utility::string_t value)
{
    m_Definition = value;
    m_DefinitionIsSet = true;
}
bool ParameterResource::definitionIsSet() const
{
    return m_DefinitionIsSet;
}

void ParameterResource::unsetDefinition()
{
    m_DefinitionIsSet = false;
}

utility::string_t ParameterResource::getOf() const
{
    return m_Of;
}


void ParameterResource::setOf(utility::string_t value)
{
    m_Of = value;
    m_OfIsSet = true;
}
bool ParameterResource::ofIsSet() const
{
    return m_OfIsSet;
}

void ParameterResource::unsetOf()
{
    m_OfIsSet = false;
}

utility::string_t ParameterResource::getType() const
{
    return m_Type;
}


void ParameterResource::setType(utility::string_t value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool ParameterResource::typeIsSet() const
{
    return m_TypeIsSet;
}

void ParameterResource::unsetType()
{
    m_TypeIsSet = false;
}

std::shared_ptr<Object> ParameterResource::getValue() const
{
    return m_Value;
}


void ParameterResource::setValue(std::shared_ptr<Object> value)
{
    m_Value = value;
    m_ValueIsSet = true;
}
bool ParameterResource::valueIsSet() const
{
    return m_ValueIsSet;
}

void ParameterResource::unsetValue()
{
    m_ValueIsSet = false;
}

}
}
}
}

