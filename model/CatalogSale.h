/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * CatalogSale.h
 *
 * 
 */

#ifndef CatalogSale_H_
#define CatalogSale_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  CatalogSale
    : public ModelBase
{
public:
    CatalogSale();
    virtual ~CatalogSale();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CatalogSale members

    /// <summary>
    /// The iso3 code for the currency for this discountValue.  The sku purchased will have to match for it this sale to apply
    /// </summary>
    utility::string_t getCurrencyCode() const;
    void setCurrencyCode(utility::string_t value);
        /// <summary>
    /// The way in which the price is reduced. &#39;value&#39; means subtracting directly, &#39;percentage&#39; means subtracting by the price times the discountValue (1.0 &#x3D;&#x3D; 100%)
    /// </summary>
    utility::string_t getDiscountType() const;
    void setDiscountType(utility::string_t value);
        /// <summary>
    /// The amount deducted from the price, in the same currencyCode as the item
    /// </summary>
    double getDiscountValue() const;
    void setDiscountValue(double value);
    bool discount_valueIsSet() const;
    void unsetDiscount_value();
    /// <summary>
    /// The id of the sale
    /// </summary>
    int32_t getId() const;
    void setId(int32_t value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// The id of the item this sale applies to.  Leave null to use other filters
    /// </summary>
    int32_t getItem() const;
    void setItem(int32_t value);
    bool itemIsSet() const;
    void unsetItem();
    /// <summary>
    /// The long description of the sale
    /// </summary>
    utility::string_t getLongDescription() const;
    void setLongDescription(utility::string_t value);
    bool long_descriptionIsSet() const;
    void unsetLong_description();
    /// <summary>
    /// The name of the sale.  Max 40 characters
    /// </summary>
    utility::string_t getName() const;
    void setName(utility::string_t value);
        /// <summary>
    /// The date the sale ends, null for never.  Unix timestamp in seconds
    /// </summary>
    int64_t getSaleEndDate() const;
    void setSaleEndDate(int64_t value);
    bool sale_end_dateIsSet() const;
    void unsetSale_end_date();
    /// <summary>
    /// The date the sale begins.  Unix timestamp in seconds
    /// </summary>
    int64_t getSaleStartDate() const;
    void setSaleStartDate(int64_t value);
        /// <summary>
    /// The short description of the sale.  Max 140 characters
    /// </summary>
    utility::string_t getShortDescription() const;
    void setShortDescription(utility::string_t value);
    bool short_descriptionIsSet() const;
    void unsetShort_description();
    /// <summary>
    /// The tag this sale applies to.  Leave null to skip this filter (applies to all tags)
    /// </summary>
    utility::string_t getTag() const;
    void setTag(utility::string_t value);
    bool tagIsSet() const;
    void unsetTag();
    /// <summary>
    /// The id of the vendor this sale applies to.  Leave null to skip this filter (applies to all vendors)
    /// </summary>
    int32_t getVendor() const;
    void setVendor(int32_t value);
    bool vendorIsSet() const;
    void unsetVendor();

protected:
    utility::string_t m_Currency_code;
    utility::string_t m_Discount_type;
    double m_Discount_value;
    bool m_Discount_valueIsSet;
int32_t m_Id;
    bool m_IdIsSet;
int32_t m_Item;
    bool m_ItemIsSet;
utility::string_t m_Long_description;
    bool m_Long_descriptionIsSet;
utility::string_t m_Name;
    int64_t m_Sale_end_date;
    bool m_Sale_end_dateIsSet;
int64_t m_Sale_start_date;
    utility::string_t m_Short_description;
    bool m_Short_descriptionIsSet;
utility::string_t m_Tag;
    bool m_TagIsSet;
int32_t m_Vendor;
    bool m_VendorIsSet;
};

}
}
}
}

#endif /* CatalogSale_H_ */
