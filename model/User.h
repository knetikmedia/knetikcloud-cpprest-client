/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * User.h
 *
 * 
 */

#ifndef User_H_
#define User_H_


#include "ModelBase.h"

#include "Affiliate.h"
#include "Language.h"
#include "Role.h"
#include <vector>
#include "Property.h"
#include "Country.h"
#include "UserTag.h"
#include "Timezone.h"
#include <cpprest/details/basic_types.h>
#include "GroupMember.h"
#include <map>
#include "Currency.h"
#include "UserRelationship.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  User
    : public ModelBase
{
public:
    User();
    virtual ~User();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// User members

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<Property>>& getAdditionalProperties();
    bool additional_propertiesIsSet() const;
    void unsetAdditional_properties();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAddress() const;
    void setAddress(utility::string_t value);
    bool addressIsSet() const;
    void unsetAddress();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAddress2() const;
    void setAddress2(utility::string_t value);
    bool address2IsSet() const;
    void unsetAddress2();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Affiliate> getAffiliate() const;
    void setAffiliate(std::shared_ptr<Affiliate> value);
    bool affiliateIsSet() const;
    void unsetAffiliate();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAvatarUrl() const;
    void setAvatarUrl(utility::string_t value);
    bool avatar_urlIsSet() const;
    void unsetAvatar_url();
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<UserRelationship>>& getChildren();
    bool childrenIsSet() const;
    void unsetChildren();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCity() const;
    void setCity(utility::string_t value);
    bool cityIsSet() const;
    void unsetCity();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Country> getCountry() const;
    void setCountry(std::shared_ptr<Country> value);
    bool countryIsSet() const;
    void unsetCountry();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Currency> getCurrency() const;
    void setCurrency(std::shared_ptr<Currency> value);
    bool currencyIsSet() const;
    void unsetCurrency();
    /// <summary>
    /// 
    /// </summary>
    int64_t getDateCreated() const;
    void setDateCreated(int64_t value);
    bool date_createdIsSet() const;
    void unsetDate_created();
    /// <summary>
    /// 
    /// </summary>
    int64_t getDateOfBirth() const;
    void setDateOfBirth(int64_t value);
    bool date_of_birthIsSet() const;
    void unsetDate_of_birth();
    /// <summary>
    /// 
    /// </summary>
    int64_t getDateUpdated() const;
    void setDateUpdated(int64_t value);
    bool date_updatedIsSet() const;
    void unsetDate_updated();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    void setDescription(utility::string_t value);
    bool descriptionIsSet() const;
    void unsetDescription();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDisplayName() const;
    void setDisplayName(utility::string_t value);
    bool display_nameIsSet() const;
    void unsetDisplay_name();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEmail() const;
    void setEmail(utility::string_t value);
    bool emailIsSet() const;
    void unsetEmail();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFirstName() const;
    void setFirstName(utility::string_t value);
    bool first_nameIsSet() const;
    void unsetFirst_name();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFullname() const;
    void setFullname(utility::string_t value);
    bool fullnameIsSet() const;
    void unsetFullname();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getGender() const;
    void setGender(utility::string_t value);
    bool genderIsSet() const;
    void unsetGender();
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<GroupMember>>& getGroups();
    bool groupsIsSet() const;
    void unsetGroups();
    /// <summary>
    /// 
    /// </summary>
    bool getGuest() const;
    void setGuest(bool value);
    bool guestIsSet() const;
    void unsetGuest();
    /// <summary>
    /// 
    /// </summary>
    int32_t getId() const;
    void setId(int32_t value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getInviteToken() const;
    void setInviteToken(utility::string_t value);
    bool invite_tokenIsSet() const;
    void unsetInvite_token();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Language> getLang() const;
    void setLang(std::shared_ptr<Language> value);
    bool langIsSet() const;
    void unsetLang();
    /// <summary>
    /// 
    /// </summary>
    int64_t getLastActivity() const;
    void setLastActivity(int64_t value);
    bool last_activityIsSet() const;
    void unsetLast_activity();
    /// <summary>
    /// 
    /// </summary>
    int64_t getLastLogin() const;
    void setLastLogin(int64_t value);
    bool last_loginIsSet() const;
    void unsetLast_login();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLastName() const;
    void setLastName(utility::string_t value);
    bool last_nameIsSet() const;
    void unsetLast_name();
    /// <summary>
    /// 
    /// </summary>
    int32_t getLockoutAttempts() const;
    void setLockoutAttempts(int32_t value);
    bool lockout_attemptsIsSet() const;
    void unsetLockout_attempts();
    /// <summary>
    /// 
    /// </summary>
    int64_t getLockoutDate() const;
    void setLockoutDate(int64_t value);
    bool lockout_dateIsSet() const;
    void unsetLockout_date();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMobileNumber() const;
    void setMobileNumber(utility::string_t value);
    bool mobile_numberIsSet() const;
    void unsetMobile_number();
    /// <summary>
    /// 
    /// </summary>
    int32_t getOldId() const;
    void setOldId(int32_t value);
    bool old_idIsSet() const;
    void unsetOld_id();
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<UserRelationship>>& getParents();
    bool parentsIsSet() const;
    void unsetParents();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPassword() const;
    void setPassword(utility::string_t value);
    bool passwordIsSet() const;
    void unsetPassword();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPostalCode() const;
    void setPostalCode(utility::string_t value);
    bool postal_codeIsSet() const;
    void unsetPostal_code();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPropertiesString() const;
    void setPropertiesString(utility::string_t value);
    bool properties_stringIsSet() const;
    void unsetProperties_string();
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Role>>& getRoles();
    bool rolesIsSet() const;
    void unsetRoles();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getState() const;
    void setState(utility::string_t value);
    bool stateIsSet() const;
    void unsetState();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getStatus() const;
    void setStatus(utility::string_t value);
    bool statusIsSet() const;
    void unsetStatus();
    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getTagStrings();
    bool tag_stringsIsSet() const;
    void unsetTag_strings();
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<UserTag>>& getTags();
    bool tagsIsSet() const;
    void unsetTags();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTemplate() const;
    void setTemplate(utility::string_t value);
    bool templateIsSet() const;
    void unsetTemplate();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Timezone> getTimezone() const;
    void setTimezone(std::shared_ptr<Timezone> value);
    bool timezoneIsSet() const;
    void unsetTimezone();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getToken() const;
    void setToken(utility::string_t value);
    bool tokenIsSet() const;
    void unsetToken();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTypeHint() const;
    void setTypeHint(utility::string_t value);
    bool type_hintIsSet() const;
    void unsetType_hint();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUsername() const;
    void setUsername(utility::string_t value);
    bool usernameIsSet() const;
    void unsetUsername();

protected:
    std::map<utility::string_t, std::shared_ptr<Property>> m_Additional_properties;
    bool m_Additional_propertiesIsSet;
utility::string_t m_Address;
    bool m_AddressIsSet;
utility::string_t m_Address2;
    bool m_Address2IsSet;
std::shared_ptr<Affiliate> m_Affiliate;
    bool m_AffiliateIsSet;
utility::string_t m_Avatar_url;
    bool m_Avatar_urlIsSet;
std::vector<std::shared_ptr<UserRelationship>> m_Children;
    bool m_ChildrenIsSet;
utility::string_t m_City;
    bool m_CityIsSet;
std::shared_ptr<Country> m_Country;
    bool m_CountryIsSet;
std::shared_ptr<Currency> m_Currency;
    bool m_CurrencyIsSet;
int64_t m_Date_created;
    bool m_Date_createdIsSet;
int64_t m_Date_of_birth;
    bool m_Date_of_birthIsSet;
int64_t m_Date_updated;
    bool m_Date_updatedIsSet;
utility::string_t m_Description;
    bool m_DescriptionIsSet;
utility::string_t m_Display_name;
    bool m_Display_nameIsSet;
utility::string_t m_Email;
    bool m_EmailIsSet;
utility::string_t m_First_name;
    bool m_First_nameIsSet;
utility::string_t m_Fullname;
    bool m_FullnameIsSet;
utility::string_t m_Gender;
    bool m_GenderIsSet;
std::vector<std::shared_ptr<GroupMember>> m_Groups;
    bool m_GroupsIsSet;
bool m_Guest;
    bool m_GuestIsSet;
int32_t m_Id;
    bool m_IdIsSet;
utility::string_t m_Invite_token;
    bool m_Invite_tokenIsSet;
std::shared_ptr<Language> m_Lang;
    bool m_LangIsSet;
int64_t m_Last_activity;
    bool m_Last_activityIsSet;
int64_t m_Last_login;
    bool m_Last_loginIsSet;
utility::string_t m_Last_name;
    bool m_Last_nameIsSet;
int32_t m_Lockout_attempts;
    bool m_Lockout_attemptsIsSet;
int64_t m_Lockout_date;
    bool m_Lockout_dateIsSet;
utility::string_t m_Mobile_number;
    bool m_Mobile_numberIsSet;
int32_t m_Old_id;
    bool m_Old_idIsSet;
std::vector<std::shared_ptr<UserRelationship>> m_Parents;
    bool m_ParentsIsSet;
utility::string_t m_Password;
    bool m_PasswordIsSet;
utility::string_t m_Postal_code;
    bool m_Postal_codeIsSet;
utility::string_t m_Properties_string;
    bool m_Properties_stringIsSet;
std::vector<std::shared_ptr<Role>> m_Roles;
    bool m_RolesIsSet;
utility::string_t m_State;
    bool m_StateIsSet;
utility::string_t m_Status;
    bool m_StatusIsSet;
std::vector<utility::string_t> m_Tag_strings;
    bool m_Tag_stringsIsSet;
std::vector<std::shared_ptr<UserTag>> m_Tags;
    bool m_TagsIsSet;
utility::string_t m_Template;
    bool m_TemplateIsSet;
std::shared_ptr<Timezone> m_Timezone;
    bool m_TimezoneIsSet;
utility::string_t m_Token;
    bool m_TokenIsSet;
utility::string_t m_Type_hint;
    bool m_Type_hintIsSet;
utility::string_t m_Username;
    bool m_UsernameIsSet;
};

}
}
}
}

#endif /* User_H_ */
