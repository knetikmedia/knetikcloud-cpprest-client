/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "RewardItemResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

RewardItemResource::RewardItemResource()
{
    m_Item_id = 0;
    m_Item_name = U("");
    m_Item_nameIsSet = false;
    m_Max_rank = 0;
    m_Min_rank = 0;
    m_Quantity = 0;
}

RewardItemResource::~RewardItemResource()
{
}

void RewardItemResource::validate()
{
    // TODO: implement validation
}

web::json::value RewardItemResource::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("item_id")] = ModelBase::toJson(m_Item_id);
    if(m_Item_nameIsSet)
    {
        val[U("item_name")] = ModelBase::toJson(m_Item_name);
    }
    val[U("max_rank")] = ModelBase::toJson(m_Max_rank);
    val[U("min_rank")] = ModelBase::toJson(m_Min_rank);
    val[U("quantity")] = ModelBase::toJson(m_Quantity);

    return val;
}

void RewardItemResource::fromJson(web::json::value& val)
{
    setItemId(ModelBase::int32_tFromJson(val[U("item_id")]));
    if(val.has_field(U("item_name")))
    {
        setItemName(ModelBase::stringFromJson(val[U("item_name")]));
    }
    setMaxRank(ModelBase::int32_tFromJson(val[U("max_rank")]));
    setMinRank(ModelBase::int32_tFromJson(val[U("min_rank")]));
    setQuantity(ModelBase::int32_tFromJson(val[U("quantity")]));
}

void RewardItemResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("item_id"), m_Item_id));
    if(m_Item_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("item_name"), m_Item_name));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("max_rank"), m_Max_rank));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("min_rank"), m_Min_rank));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("quantity"), m_Quantity));
}

void RewardItemResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setItemId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("item_id"))));
    if(multipart->hasContent(U("item_name")))
    {
        setItemName(ModelBase::stringFromHttpContent(multipart->getContent(U("item_name"))));
    }
    setMaxRank(ModelBase::int32_tFromHttpContent(multipart->getContent(U("max_rank"))));
    setMinRank(ModelBase::int32_tFromHttpContent(multipart->getContent(U("min_rank"))));
    setQuantity(ModelBase::int32_tFromHttpContent(multipart->getContent(U("quantity"))));
}

int32_t RewardItemResource::getItemId() const
{
    return m_Item_id;
}


void RewardItemResource::setItemId(int32_t value)
{
    m_Item_id = value;
    
}
utility::string_t RewardItemResource::getItemName() const
{
    return m_Item_name;
}


void RewardItemResource::setItemName(utility::string_t value)
{
    m_Item_name = value;
    m_Item_nameIsSet = true;
}
bool RewardItemResource::itemNameIsSet() const
{
    return m_Item_nameIsSet;
}

void RewardItemResource::unsetItem_name()
{
    m_Item_nameIsSet = false;
}

int32_t RewardItemResource::getMaxRank() const
{
    return m_Max_rank;
}


void RewardItemResource::setMaxRank(int32_t value)
{
    m_Max_rank = value;
    
}
int32_t RewardItemResource::getMinRank() const
{
    return m_Min_rank;
}


void RewardItemResource::setMinRank(int32_t value)
{
    m_Min_rank = value;
    
}
int32_t RewardItemResource::getQuantity() const
{
    return m_Quantity;
}


void RewardItemResource::setQuantity(int32_t value)
{
    m_Quantity = value;
    
}
}
}
}
}

