/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BatchReturn.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

BatchReturn::BatchReturn()
{
    m_BodyIsSet = false;
    m_Code = 0;
    m_CodeIsSet = false;
    m_Uri = U("");
    m_UriIsSet = false;
    
}

BatchReturn::~BatchReturn()
{
}

void BatchReturn::validate()
{
    // TODO: implement validation
}

web::json::value BatchReturn::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_BodyIsSet)
    {
        val[U("body")] = ModelBase::toJson(m_Body);
    }
    if(m_CodeIsSet)
    {
        val[U("code")] = ModelBase::toJson(m_Code);
    }
    if(m_UriIsSet)
    {
        val[U("uri")] = ModelBase::toJson(m_Uri);
    }
    

    return val;
}

void BatchReturn::fromJson(web::json::value& val)
{
    if(val.has_field(U("body")))
    {
        if(!val[U("body")].is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(val[U("body")]);
            setBody( newItem );
        }
        
    }
    if(val.has_field(U("code")))
    {
        setCode(ModelBase::int32_tFromJson(val[U("code")]));
    }
    if(val.has_field(U("uri")))
    {
        setUri(ModelBase::stringFromJson(val[U("uri")]));
        
    }
    
}

void BatchReturn::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_BodyIsSet)
    {
        if (m_Body.get())
        {
            m_Body->toMultipart(multipart, U("body."));
        }
        
    }
    if(m_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("code"), m_Code));
    }
    if(m_UriIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("uri"), m_Uri));
        
    }
    
}

void BatchReturn::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("body")))
    {
        if(multipart->hasContent(U("body")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, U("body."));
            setBody( newItem );
        }
        
    }
    if(multipart->hasContent(U("code")))
    {
        setCode(ModelBase::int32_tFromHttpContent(multipart->getContent(U("code"))));
    }
    if(multipart->hasContent(U("uri")))
    {
        setUri(ModelBase::stringFromHttpContent(multipart->getContent(U("uri"))));
        
    }
    
}


std::shared_ptr<Object> BatchReturn::getBody() const
{
    return m_Body;
}
void BatchReturn::setBody(std::shared_ptr<Object> value)
{
    m_Body = value;
    m_BodyIsSet = true;
}
bool BatchReturn::bodyIsSet() const
{
    return m_BodyIsSet;
}
void BatchReturn::unsetBody()
{
    m_BodyIsSet = false;
}
int32_t BatchReturn::getCode() const
{
    return m_Code;
}
void BatchReturn::setCode(int32_t value)
{
    m_Code = value;
    m_CodeIsSet = true;
}
bool BatchReturn::codeIsSet() const
{
    return m_CodeIsSet;
}
void BatchReturn::unsetCode()
{
    m_CodeIsSet = false;
}
utility::string_t BatchReturn::getUri() const
{
    return m_Uri;
}
void BatchReturn::setUri(utility::string_t value)
{
    m_Uri = value;
    m_UriIsSet = true;
}
bool BatchReturn::uriIsSet() const
{
    return m_UriIsSet;
}
void BatchReturn::unsetUri()
{
    m_UriIsSet = false;
}

}
}
}
}

