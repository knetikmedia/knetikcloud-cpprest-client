/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ChatBlacklistResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

ChatBlacklistResource::ChatBlacklistResource()
{
    m_Blacklisted_userIsSet = false;
    m_Created_date = 0L;
    m_Created_dateIsSet = false;
    m_Id = U("");
    m_IdIsSet = false;
    m_User_id = 0;
    m_User_idIsSet = false;
}

ChatBlacklistResource::~ChatBlacklistResource()
{
}

void ChatBlacklistResource::validate()
{
    // TODO: implement validation
}

web::json::value ChatBlacklistResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Blacklisted_userIsSet)
    {
        val[U("blacklisted_user")] = ModelBase::toJson(m_Blacklisted_user);
    }
    if(m_Created_dateIsSet)
    {
        val[U("created_date")] = ModelBase::toJson(m_Created_date);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_User_idIsSet)
    {
        val[U("user_id")] = ModelBase::toJson(m_User_id);
    }

    return val;
}

void ChatBlacklistResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("blacklisted_user")))
    {
        if(!val[U("blacklisted_user")].is_null())
        {
            std::shared_ptr<SimpleUserResource> newItem(new SimpleUserResource());
            newItem->fromJson(val[U("blacklisted_user")]);
            setBlacklistedUser( newItem );
        }
    }
    if(val.has_field(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromJson(val[U("created_date")]));
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::stringFromJson(val[U("id")]));
    }
    if(val.has_field(U("user_id")))
    {
        setUserId(ModelBase::int32_tFromJson(val[U("user_id")]));
    }
}

void ChatBlacklistResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Blacklisted_userIsSet)
    {
        if (m_Blacklisted_user.get())
        {
            m_Blacklisted_user->toMultipart(multipart, U("blacklisted_user."));
        }
        
    }
    if(m_Created_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("created_date"), m_Created_date));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
        
    }
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("user_id"), m_User_id));
    }
}

void ChatBlacklistResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("blacklisted_user")))
    {
        if(multipart->hasContent(U("blacklisted_user")))
        {
            std::shared_ptr<SimpleUserResource> newItem(new SimpleUserResource());
            newItem->fromMultiPart(multipart, U("blacklisted_user."));
            setBlacklistedUser( newItem );
        }
    }
    if(multipart->hasContent(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("created_date"))));
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("user_id")))
    {
        setUserId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("user_id"))));
    }
}

std::shared_ptr<SimpleUserResource> ChatBlacklistResource::getBlacklistedUser() const
{
    return m_Blacklisted_user;
}


void ChatBlacklistResource::setBlacklistedUser(std::shared_ptr<SimpleUserResource> value)
{
    m_Blacklisted_user = value;
    m_Blacklisted_userIsSet = true;
}
bool ChatBlacklistResource::blacklistedUserIsSet() const
{
    return m_Blacklisted_userIsSet;
}

void ChatBlacklistResource::unsetBlacklisted_user()
{
    m_Blacklisted_userIsSet = false;
}

int64_t ChatBlacklistResource::getCreatedDate() const
{
    return m_Created_date;
}


void ChatBlacklistResource::setCreatedDate(int64_t value)
{
    m_Created_date = value;
    m_Created_dateIsSet = true;
}
bool ChatBlacklistResource::createdDateIsSet() const
{
    return m_Created_dateIsSet;
}

void ChatBlacklistResource::unsetCreated_date()
{
    m_Created_dateIsSet = false;
}

utility::string_t ChatBlacklistResource::getId() const
{
    return m_Id;
}


void ChatBlacklistResource::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool ChatBlacklistResource::idIsSet() const
{
    return m_IdIsSet;
}

void ChatBlacklistResource::unsetId()
{
    m_IdIsSet = false;
}

int32_t ChatBlacklistResource::getUserId() const
{
    return m_User_id;
}


void ChatBlacklistResource::setUserId(int32_t value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}
bool ChatBlacklistResource::userIdIsSet() const
{
    return m_User_idIsSet;
}

void ChatBlacklistResource::unsetUser_id()
{
    m_User_idIsSet = false;
}

}
}
}
}

