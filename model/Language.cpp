/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Language.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

Language::Language()
{
    m_Code = U("");
    m_CodeIsSet = false;
    m_Date_created = 0;
    m_Date_createdIsSet = false;
    m_Date_updated = 0;
    m_Date_updatedIsSet = false;
    m_Description = U("");
    m_DescriptionIsSet = false;
    m_Direction = U("");
    m_DirectionIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_Is_primary = false;
    m_Is_primaryIsSet = false;
    m_Name = U("");
    m_NameIsSet = false;
    
}

Language::~Language()
{
}

void Language::validate()
{
    // TODO: implement validation
}

web::json::value Language::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CodeIsSet)
    {
        val[U("code")] = ModelBase::toJson(m_Code);
    }
    if(m_Date_createdIsSet)
    {
        val[U("date_created")] = ModelBase::toJson(m_Date_created);
    }
    if(m_Date_updatedIsSet)
    {
        val[U("date_updated")] = ModelBase::toJson(m_Date_updated);
    }
    if(m_DescriptionIsSet)
    {
        val[U("description")] = ModelBase::toJson(m_Description);
    }
    if(m_DirectionIsSet)
    {
        val[U("direction")] = ModelBase::toJson(m_Direction);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_Is_primaryIsSet)
    {
        val[U("is_primary")] = ModelBase::toJson(m_Is_primary);
    }
    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }
    

    return val;
}

void Language::fromJson(web::json::value& val)
{
    if(val.has_field(U("code")))
    {
        setCode(ModelBase::stringFromJson(val[U("code")]));
        
    }
    if(val.has_field(U("date_created")))
    {
        setDateCreated(ModelBase::int64_tFromJson(val[U("date_created")]));
    }
    if(val.has_field(U("date_updated")))
    {
        setDateUpdated(ModelBase::int64_tFromJson(val[U("date_updated")]));
    }
    if(val.has_field(U("description")))
    {
        setDescription(ModelBase::stringFromJson(val[U("description")]));
        
    }
    if(val.has_field(U("direction")))
    {
        setDirection(ModelBase::stringFromJson(val[U("direction")]));
        
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int32_tFromJson(val[U("id")]));
    }
    if(val.has_field(U("is_primary")))
    {
        setIsPrimary(ModelBase::boolFromJson(val[U("is_primary")]));
    }
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
        
    }
    
}

void Language::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("code"), m_Code));
        
    }
    if(m_Date_createdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("date_created"), m_Date_created));
    }
    if(m_Date_updatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("date_updated"), m_Date_updated));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("description"), m_Description));
        
    }
    if(m_DirectionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("direction"), m_Direction));
        
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    if(m_Is_primaryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("is_primary"), m_Is_primary));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
    
}

void Language::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("code")))
    {
        setCode(ModelBase::stringFromHttpContent(multipart->getContent(U("code"))));
        
    }
    if(multipart->hasContent(U("date_created")))
    {
        setDateCreated(ModelBase::int64_tFromHttpContent(multipart->getContent(U("date_created"))));
    }
    if(multipart->hasContent(U("date_updated")))
    {
        setDateUpdated(ModelBase::int64_tFromHttpContent(multipart->getContent(U("date_updated"))));
    }
    if(multipart->hasContent(U("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("description"))));
        
    }
    if(multipart->hasContent(U("direction")))
    {
        setDirection(ModelBase::stringFromHttpContent(multipart->getContent(U("direction"))));
        
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("is_primary")))
    {
        setIsPrimary(ModelBase::boolFromHttpContent(multipart->getContent(U("is_primary"))));
    }
    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
        
    }
    
}


utility::string_t Language::getCode() const
{
    return m_Code;
}
void Language::setCode(utility::string_t value)
{
    m_Code = value;
    m_CodeIsSet = true;
}
bool Language::codeIsSet() const
{
    return m_CodeIsSet;
}
void Language::unsetCode()
{
    m_CodeIsSet = false;
}
int64_t Language::getDateCreated() const
{
    return m_Date_created;
}
void Language::setDateCreated(int64_t value)
{
    m_Date_created = value;
    m_Date_createdIsSet = true;
}
bool Language::date_createdIsSet() const
{
    return m_Date_createdIsSet;
}
void Language::unsetDate_created()
{
    m_Date_createdIsSet = false;
}
int64_t Language::getDateUpdated() const
{
    return m_Date_updated;
}
void Language::setDateUpdated(int64_t value)
{
    m_Date_updated = value;
    m_Date_updatedIsSet = true;
}
bool Language::date_updatedIsSet() const
{
    return m_Date_updatedIsSet;
}
void Language::unsetDate_updated()
{
    m_Date_updatedIsSet = false;
}
utility::string_t Language::getDescription() const
{
    return m_Description;
}
void Language::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool Language::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void Language::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t Language::getDirection() const
{
    return m_Direction;
}
void Language::setDirection(utility::string_t value)
{
    m_Direction = value;
    m_DirectionIsSet = true;
}
bool Language::directionIsSet() const
{
    return m_DirectionIsSet;
}
void Language::unsetDirection()
{
    m_DirectionIsSet = false;
}
int32_t Language::getId() const
{
    return m_Id;
}
void Language::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Language::idIsSet() const
{
    return m_IdIsSet;
}
void Language::unsetId()
{
    m_IdIsSet = false;
}
bool Language::getIsPrimary() const
{
    return m_Is_primary;
}
void Language::setIsPrimary(bool value)
{
    m_Is_primary = value;
    m_Is_primaryIsSet = true;
}
bool Language::is_primaryIsSet() const
{
    return m_Is_primaryIsSet;
}
void Language::unsetIs_primary()
{
    m_Is_primaryIsSet = false;
}
utility::string_t Language::getName() const
{
    return m_Name;
}
void Language::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool Language::nameIsSet() const
{
    return m_NameIsSet;
}
void Language::unsetName()
{
    m_NameIsSet = false;
}

}
}
}
}

