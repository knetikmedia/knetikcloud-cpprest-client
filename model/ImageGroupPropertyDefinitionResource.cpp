/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ImageGroupPropertyDefinitionResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

ImageGroupPropertyDefinitionResource::ImageGroupPropertyDefinitionResource()
{
    m_Field_listIsSet = false;
    m_Name = U("");
    m_Required = false;
    m_Type = U("");
    m_File_type = U("");
    m_File_typeIsSet = false;
    m_Max_count = 0;
    m_Max_countIsSet = false;
    m_Max_file_size = 0;
    m_Max_file_sizeIsSet = false;
    m_Min_count = 0;
    m_Min_countIsSet = false;
    m_Max_height = 0;
    m_Max_heightIsSet = false;
    m_Max_width = 0;
    m_Max_widthIsSet = false;
    m_Min_height = 0;
    m_Min_heightIsSet = false;
    m_Min_width = 0;
    m_Min_widthIsSet = false;
    
}

ImageGroupPropertyDefinitionResource::~ImageGroupPropertyDefinitionResource()
{
}

void ImageGroupPropertyDefinitionResource::validate()
{
    // TODO: implement validation
}

web::json::value ImageGroupPropertyDefinitionResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Field_listIsSet)
    {
        val[U("field_list")] = ModelBase::toJson(m_Field_list);
    }
    val[U("name")] = ModelBase::toJson(m_Name);
    val[U("required")] = ModelBase::toJson(m_Required);
    val[U("type")] = ModelBase::toJson(m_Type);
    if(m_File_typeIsSet)
    {
        val[U("file_type")] = ModelBase::toJson(m_File_type);
    }
    if(m_Max_countIsSet)
    {
        val[U("max_count")] = ModelBase::toJson(m_Max_count);
    }
    if(m_Max_file_sizeIsSet)
    {
        val[U("max_file_size")] = ModelBase::toJson(m_Max_file_size);
    }
    if(m_Min_countIsSet)
    {
        val[U("min_count")] = ModelBase::toJson(m_Min_count);
    }
    if(m_Max_heightIsSet)
    {
        val[U("max_height")] = ModelBase::toJson(m_Max_height);
    }
    if(m_Max_widthIsSet)
    {
        val[U("max_width")] = ModelBase::toJson(m_Max_width);
    }
    if(m_Min_heightIsSet)
    {
        val[U("min_height")] = ModelBase::toJson(m_Min_height);
    }
    if(m_Min_widthIsSet)
    {
        val[U("min_width")] = ModelBase::toJson(m_Min_width);
    }
    

    return val;
}

void ImageGroupPropertyDefinitionResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("field_list")))
    {
        if(!val[U("field_list")].is_null())
        {
            std::shared_ptr<PropertyFieldListResource> newItem(new PropertyFieldListResource());
            newItem->fromJson(val[U("field_list")]);
            setFieldList( newItem );
        }
        
    }
    setName(ModelBase::stringFromJson(val[U("name")]));
    setRequired(ModelBase::boolFromJson(val[U("required")]));
    setType(ModelBase::stringFromJson(val[U("type")]));
    if(val.has_field(U("file_type")))
    {
        setFileType(ModelBase::stringFromJson(val[U("file_type")]));
        
    }
    if(val.has_field(U("max_count")))
    {
        setMaxCount(ModelBase::int32_tFromJson(val[U("max_count")]));
    }
    if(val.has_field(U("max_file_size")))
    {
        setMaxFileSize(ModelBase::int64_tFromJson(val[U("max_file_size")]));
    }
    if(val.has_field(U("min_count")))
    {
        setMinCount(ModelBase::int32_tFromJson(val[U("min_count")]));
    }
    if(val.has_field(U("max_height")))
    {
        setMaxHeight(ModelBase::int32_tFromJson(val[U("max_height")]));
    }
    if(val.has_field(U("max_width")))
    {
        setMaxWidth(ModelBase::int32_tFromJson(val[U("max_width")]));
    }
    if(val.has_field(U("min_height")))
    {
        setMinHeight(ModelBase::int32_tFromJson(val[U("min_height")]));
    }
    if(val.has_field(U("min_width")))
    {
        setMinWidth(ModelBase::int32_tFromJson(val[U("min_width")]));
    }
    
}

void ImageGroupPropertyDefinitionResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Field_listIsSet)
    {
        if (m_Field_list.get())
        {
            m_Field_list->toMultipart(multipart, U("field_list."));
        }
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("required"), m_Required));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("type"), m_Type));
    if(m_File_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("file_type"), m_File_type));
        
    }
    if(m_Max_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("max_count"), m_Max_count));
    }
    if(m_Max_file_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("max_file_size"), m_Max_file_size));
    }
    if(m_Min_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("min_count"), m_Min_count));
    }
    if(m_Max_heightIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("max_height"), m_Max_height));
    }
    if(m_Max_widthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("max_width"), m_Max_width));
    }
    if(m_Min_heightIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("min_height"), m_Min_height));
    }
    if(m_Min_widthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("min_width"), m_Min_width));
    }
    
}

void ImageGroupPropertyDefinitionResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("field_list")))
    {
        if(multipart->hasContent(U("field_list")))
        {
            std::shared_ptr<PropertyFieldListResource> newItem(new PropertyFieldListResource());
            newItem->fromMultiPart(multipart, U("field_list."));
            setFieldList( newItem );
        }
        
    }
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    setRequired(ModelBase::boolFromHttpContent(multipart->getContent(U("required"))));
    setType(ModelBase::stringFromHttpContent(multipart->getContent(U("type"))));
    if(multipart->hasContent(U("file_type")))
    {
        setFileType(ModelBase::stringFromHttpContent(multipart->getContent(U("file_type"))));
        
    }
    if(multipart->hasContent(U("max_count")))
    {
        setMaxCount(ModelBase::int32_tFromHttpContent(multipart->getContent(U("max_count"))));
    }
    if(multipart->hasContent(U("max_file_size")))
    {
        setMaxFileSize(ModelBase::int64_tFromHttpContent(multipart->getContent(U("max_file_size"))));
    }
    if(multipart->hasContent(U("min_count")))
    {
        setMinCount(ModelBase::int32_tFromHttpContent(multipart->getContent(U("min_count"))));
    }
    if(multipart->hasContent(U("max_height")))
    {
        setMaxHeight(ModelBase::int32_tFromHttpContent(multipart->getContent(U("max_height"))));
    }
    if(multipart->hasContent(U("max_width")))
    {
        setMaxWidth(ModelBase::int32_tFromHttpContent(multipart->getContent(U("max_width"))));
    }
    if(multipart->hasContent(U("min_height")))
    {
        setMinHeight(ModelBase::int32_tFromHttpContent(multipart->getContent(U("min_height"))));
    }
    if(multipart->hasContent(U("min_width")))
    {
        setMinWidth(ModelBase::int32_tFromHttpContent(multipart->getContent(U("min_width"))));
    }
    
}


std::shared_ptr<PropertyFieldListResource> ImageGroupPropertyDefinitionResource::getFieldList() const
{
    return m_Field_list;
}
void ImageGroupPropertyDefinitionResource::setFieldList(std::shared_ptr<PropertyFieldListResource> value)
{
    m_Field_list = value;
    m_Field_listIsSet = true;
}
bool ImageGroupPropertyDefinitionResource::field_listIsSet() const
{
    return m_Field_listIsSet;
}
void ImageGroupPropertyDefinitionResource::unsetField_list()
{
    m_Field_listIsSet = false;
}
utility::string_t ImageGroupPropertyDefinitionResource::getName() const
{
    return m_Name;
}
void ImageGroupPropertyDefinitionResource::setName(utility::string_t value)
{
    m_Name = value;
    
}
bool ImageGroupPropertyDefinitionResource::getRequired() const
{
    return m_Required;
}
void ImageGroupPropertyDefinitionResource::setRequired(bool value)
{
    m_Required = value;
    
}
utility::string_t ImageGroupPropertyDefinitionResource::getType() const
{
    return m_Type;
}
void ImageGroupPropertyDefinitionResource::setType(utility::string_t value)
{
    m_Type = value;
    
}
utility::string_t ImageGroupPropertyDefinitionResource::getFileType() const
{
    return m_File_type;
}
void ImageGroupPropertyDefinitionResource::setFileType(utility::string_t value)
{
    m_File_type = value;
    m_File_typeIsSet = true;
}
bool ImageGroupPropertyDefinitionResource::file_typeIsSet() const
{
    return m_File_typeIsSet;
}
void ImageGroupPropertyDefinitionResource::unsetFile_type()
{
    m_File_typeIsSet = false;
}
int32_t ImageGroupPropertyDefinitionResource::getMaxCount() const
{
    return m_Max_count;
}
void ImageGroupPropertyDefinitionResource::setMaxCount(int32_t value)
{
    m_Max_count = value;
    m_Max_countIsSet = true;
}
bool ImageGroupPropertyDefinitionResource::max_countIsSet() const
{
    return m_Max_countIsSet;
}
void ImageGroupPropertyDefinitionResource::unsetMax_count()
{
    m_Max_countIsSet = false;
}
int64_t ImageGroupPropertyDefinitionResource::getMaxFileSize() const
{
    return m_Max_file_size;
}
void ImageGroupPropertyDefinitionResource::setMaxFileSize(int64_t value)
{
    m_Max_file_size = value;
    m_Max_file_sizeIsSet = true;
}
bool ImageGroupPropertyDefinitionResource::max_file_sizeIsSet() const
{
    return m_Max_file_sizeIsSet;
}
void ImageGroupPropertyDefinitionResource::unsetMax_file_size()
{
    m_Max_file_sizeIsSet = false;
}
int32_t ImageGroupPropertyDefinitionResource::getMinCount() const
{
    return m_Min_count;
}
void ImageGroupPropertyDefinitionResource::setMinCount(int32_t value)
{
    m_Min_count = value;
    m_Min_countIsSet = true;
}
bool ImageGroupPropertyDefinitionResource::min_countIsSet() const
{
    return m_Min_countIsSet;
}
void ImageGroupPropertyDefinitionResource::unsetMin_count()
{
    m_Min_countIsSet = false;
}
int32_t ImageGroupPropertyDefinitionResource::getMaxHeight() const
{
    return m_Max_height;
}
void ImageGroupPropertyDefinitionResource::setMaxHeight(int32_t value)
{
    m_Max_height = value;
    m_Max_heightIsSet = true;
}
bool ImageGroupPropertyDefinitionResource::max_heightIsSet() const
{
    return m_Max_heightIsSet;
}
void ImageGroupPropertyDefinitionResource::unsetMax_height()
{
    m_Max_heightIsSet = false;
}
int32_t ImageGroupPropertyDefinitionResource::getMaxWidth() const
{
    return m_Max_width;
}
void ImageGroupPropertyDefinitionResource::setMaxWidth(int32_t value)
{
    m_Max_width = value;
    m_Max_widthIsSet = true;
}
bool ImageGroupPropertyDefinitionResource::max_widthIsSet() const
{
    return m_Max_widthIsSet;
}
void ImageGroupPropertyDefinitionResource::unsetMax_width()
{
    m_Max_widthIsSet = false;
}
int32_t ImageGroupPropertyDefinitionResource::getMinHeight() const
{
    return m_Min_height;
}
void ImageGroupPropertyDefinitionResource::setMinHeight(int32_t value)
{
    m_Min_height = value;
    m_Min_heightIsSet = true;
}
bool ImageGroupPropertyDefinitionResource::min_heightIsSet() const
{
    return m_Min_heightIsSet;
}
void ImageGroupPropertyDefinitionResource::unsetMin_height()
{
    m_Min_heightIsSet = false;
}
int32_t ImageGroupPropertyDefinitionResource::getMinWidth() const
{
    return m_Min_width;
}
void ImageGroupPropertyDefinitionResource::setMinWidth(int32_t value)
{
    m_Min_width = value;
    m_Min_widthIsSet = true;
}
bool ImageGroupPropertyDefinitionResource::min_widthIsSet() const
{
    return m_Min_widthIsSet;
}
void ImageGroupPropertyDefinitionResource::unsetMin_width()
{
    m_Min_widthIsSet = false;
}

}
}
}
}

