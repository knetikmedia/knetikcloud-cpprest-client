/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SubscriptionPlan.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

SubscriptionPlan::SubscriptionPlan()
{
    m_Additional_propertiesIsSet = false;
    m_Availability = U("");
    m_AvailabilityIsSet = false;
    m_Bill_grace_days = 0;
    m_Bill_grace_daysIsSet = false;
    m_Consolidated = false;
    m_ConsolidatedIsSet = false;
    m_First_bill = 0;
    m_First_billIsSet = false;
    m_First_bill_unit_of_time = U("");
    m_First_bill_unit_of_timeIsSet = false;
    m_Id = U("");
    m_IdIsSet = false;
    m_Late_payment_sku = U("");
    m_Late_payment_skuIsSet = false;
    m_Locked = false;
    m_LockedIsSet = false;
    m_Max_auto_renew = 0;
    m_Max_auto_renewIsSet = false;
    m_Max_bill_attempts = 0;
    m_Max_bill_attemptsIsSet = false;
    m_Migration_plan = U("");
    m_Migration_planIsSet = false;
    m_Minimum_term = 0;
    m_Minimum_termIsSet = false;
    m_Name = U("");
    m_NameIsSet = false;
    m_Primary_sku = U("");
    m_Primary_skuIsSet = false;
    m_Reactivation_sku = U("");
    m_Reactivation_skuIsSet = false;
    m_Recurring_sku = U("");
    m_Recurring_skuIsSet = false;
    m_Renew_period = 0;
    m_Renew_periodIsSet = false;
    m_Renew_period_unit_of_time = U("");
    m_Renew_period_unit_of_timeIsSet = false;
    m_Subscription_id = 0;
    m_Subscription_idIsSet = false;
}

SubscriptionPlan::~SubscriptionPlan()
{
}

void SubscriptionPlan::validate()
{
    // TODO: implement validation
}

web::json::value SubscriptionPlan::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Additional_properties )
        {
            web::json::value tmp = web::json::value::object();
            tmp[U("key")] = ModelBase::toJson(item.first);
            tmp[U("value")] = ModelBase::toJson(item.second);
            jsonArray.push_back(tmp);
        }
        if(jsonArray.size() > 0)
        {
            val[U("additional_properties")] = web::json::value::array(jsonArray);
        }
    }
    if(m_AvailabilityIsSet)
    {
        val[U("availability")] = ModelBase::toJson(m_Availability);
    }
    if(m_Bill_grace_daysIsSet)
    {
        val[U("bill_grace_days")] = ModelBase::toJson(m_Bill_grace_days);
    }
    if(m_ConsolidatedIsSet)
    {
        val[U("consolidated")] = ModelBase::toJson(m_Consolidated);
    }
    if(m_First_billIsSet)
    {
        val[U("first_bill")] = ModelBase::toJson(m_First_bill);
    }
    if(m_First_bill_unit_of_timeIsSet)
    {
        val[U("first_bill_unit_of_time")] = ModelBase::toJson(m_First_bill_unit_of_time);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_Late_payment_skuIsSet)
    {
        val[U("late_payment_sku")] = ModelBase::toJson(m_Late_payment_sku);
    }
    if(m_LockedIsSet)
    {
        val[U("locked")] = ModelBase::toJson(m_Locked);
    }
    if(m_Max_auto_renewIsSet)
    {
        val[U("max_auto_renew")] = ModelBase::toJson(m_Max_auto_renew);
    }
    if(m_Max_bill_attemptsIsSet)
    {
        val[U("max_bill_attempts")] = ModelBase::toJson(m_Max_bill_attempts);
    }
    if(m_Migration_planIsSet)
    {
        val[U("migration_plan")] = ModelBase::toJson(m_Migration_plan);
    }
    if(m_Minimum_termIsSet)
    {
        val[U("minimum_term")] = ModelBase::toJson(m_Minimum_term);
    }
    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }
    if(m_Primary_skuIsSet)
    {
        val[U("primary_sku")] = ModelBase::toJson(m_Primary_sku);
    }
    if(m_Reactivation_skuIsSet)
    {
        val[U("reactivation_sku")] = ModelBase::toJson(m_Reactivation_sku);
    }
    if(m_Recurring_skuIsSet)
    {
        val[U("recurring_sku")] = ModelBase::toJson(m_Recurring_sku);
    }
    if(m_Renew_periodIsSet)
    {
        val[U("renew_period")] = ModelBase::toJson(m_Renew_period);
    }
    if(m_Renew_period_unit_of_timeIsSet)
    {
        val[U("renew_period_unit_of_time")] = ModelBase::toJson(m_Renew_period_unit_of_time);
    }
    if(m_Subscription_idIsSet)
    {
        val[U("subscription_id")] = ModelBase::toJson(m_Subscription_id);
    }

    return val;
}

void SubscriptionPlan::fromJson(web::json::value& val)
{
    {
        m_Additional_properties.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("additional_properties")))
        {
        for( auto& item : val[U("additional_properties")].as_array() )
        {  
            utility::string_t key;
            if(item.has_field(U("key")))
            {
                key = ModelBase::stringFromJson(item[U("key")]);
            }
            if(item.is_null())
            {
                m_Additional_properties.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, std::shared_ptr<Property>(nullptr) ));
            }
            else
            {
                std::shared_ptr<Property> newItem(new Property());
                newItem->fromJson(item[U("value")]);
                m_Additional_properties.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, newItem ));
            }
        }
        }
    }
    if(val.has_field(U("availability")))
    {
        setAvailability(ModelBase::stringFromJson(val[U("availability")]));
    }
    if(val.has_field(U("bill_grace_days")))
    {
        setBillGraceDays(ModelBase::int32_tFromJson(val[U("bill_grace_days")]));
    }
    if(val.has_field(U("consolidated")))
    {
        setConsolidated(ModelBase::boolFromJson(val[U("consolidated")]));
    }
    if(val.has_field(U("first_bill")))
    {
        setFirstBill(ModelBase::int32_tFromJson(val[U("first_bill")]));
    }
    if(val.has_field(U("first_bill_unit_of_time")))
    {
        setFirstBillUnitOfTime(ModelBase::stringFromJson(val[U("first_bill_unit_of_time")]));
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::stringFromJson(val[U("id")]));
    }
    if(val.has_field(U("late_payment_sku")))
    {
        setLatePaymentSku(ModelBase::stringFromJson(val[U("late_payment_sku")]));
    }
    if(val.has_field(U("locked")))
    {
        setLocked(ModelBase::boolFromJson(val[U("locked")]));
    }
    if(val.has_field(U("max_auto_renew")))
    {
        setMaxAutoRenew(ModelBase::int32_tFromJson(val[U("max_auto_renew")]));
    }
    if(val.has_field(U("max_bill_attempts")))
    {
        setMaxBillAttempts(ModelBase::int32_tFromJson(val[U("max_bill_attempts")]));
    }
    if(val.has_field(U("migration_plan")))
    {
        setMigrationPlan(ModelBase::stringFromJson(val[U("migration_plan")]));
    }
    if(val.has_field(U("minimum_term")))
    {
        setMinimumTerm(ModelBase::int32_tFromJson(val[U("minimum_term")]));
    }
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
    }
    if(val.has_field(U("primary_sku")))
    {
        setPrimarySku(ModelBase::stringFromJson(val[U("primary_sku")]));
    }
    if(val.has_field(U("reactivation_sku")))
    {
        setReactivationSku(ModelBase::stringFromJson(val[U("reactivation_sku")]));
    }
    if(val.has_field(U("recurring_sku")))
    {
        setRecurringSku(ModelBase::stringFromJson(val[U("recurring_sku")]));
    }
    if(val.has_field(U("renew_period")))
    {
        setRenewPeriod(ModelBase::int32_tFromJson(val[U("renew_period")]));
    }
    if(val.has_field(U("renew_period_unit_of_time")))
    {
        setRenewPeriodUnitOfTime(ModelBase::stringFromJson(val[U("renew_period_unit_of_time")]));
    }
    if(val.has_field(U("subscription_id")))
    {
        setSubscriptionId(ModelBase::int32_tFromJson(val[U("subscription_id")]));
    }
}

void SubscriptionPlan::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Additional_properties )
        {
            web::json::value tmp = web::json::value::object();
            tmp[U("key")] = ModelBase::toJson(item.first);
            tmp[U("value")] = ModelBase::toJson(item.second);
            jsonArray.push_back(tmp);
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("additional_properties"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_AvailabilityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("availability"), m_Availability));
        
    }
    if(m_Bill_grace_daysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("bill_grace_days"), m_Bill_grace_days));
    }
    if(m_ConsolidatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("consolidated"), m_Consolidated));
    }
    if(m_First_billIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("first_bill"), m_First_bill));
    }
    if(m_First_bill_unit_of_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("first_bill_unit_of_time"), m_First_bill_unit_of_time));
        
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
        
    }
    if(m_Late_payment_skuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("late_payment_sku"), m_Late_payment_sku));
        
    }
    if(m_LockedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("locked"), m_Locked));
    }
    if(m_Max_auto_renewIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("max_auto_renew"), m_Max_auto_renew));
    }
    if(m_Max_bill_attemptsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("max_bill_attempts"), m_Max_bill_attempts));
    }
    if(m_Migration_planIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("migration_plan"), m_Migration_plan));
        
    }
    if(m_Minimum_termIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("minimum_term"), m_Minimum_term));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
    if(m_Primary_skuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("primary_sku"), m_Primary_sku));
        
    }
    if(m_Reactivation_skuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("reactivation_sku"), m_Reactivation_sku));
        
    }
    if(m_Recurring_skuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("recurring_sku"), m_Recurring_sku));
        
    }
    if(m_Renew_periodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("renew_period"), m_Renew_period));
    }
    if(m_Renew_period_unit_of_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("renew_period_unit_of_time"), m_Renew_period_unit_of_time));
        
    }
    if(m_Subscription_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("subscription_id"), m_Subscription_id));
    }
}

void SubscriptionPlan::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        m_Additional_properties.clear();
        if(multipart->hasContent(U("additional_properties")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("additional_properties"))));
        for( auto& item : jsonArray.as_array() )
        {
            utility::string_t key;
            if(item.has_field(U("key")))
            {
                key = ModelBase::stringFromJson(item[U("key")]);
            }
            if(item.is_null())
            {
                m_Additional_properties.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, std::shared_ptr<Property>(nullptr) ));
            }
            else
            {
                std::shared_ptr<Property> newItem(new Property());
                newItem->fromJson(item[U("value")]);
                m_Additional_properties.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, newItem ));
            }
        }
        }
    }
    if(multipart->hasContent(U("availability")))
    {
        setAvailability(ModelBase::stringFromHttpContent(multipart->getContent(U("availability"))));
    }
    if(multipart->hasContent(U("bill_grace_days")))
    {
        setBillGraceDays(ModelBase::int32_tFromHttpContent(multipart->getContent(U("bill_grace_days"))));
    }
    if(multipart->hasContent(U("consolidated")))
    {
        setConsolidated(ModelBase::boolFromHttpContent(multipart->getContent(U("consolidated"))));
    }
    if(multipart->hasContent(U("first_bill")))
    {
        setFirstBill(ModelBase::int32_tFromHttpContent(multipart->getContent(U("first_bill"))));
    }
    if(multipart->hasContent(U("first_bill_unit_of_time")))
    {
        setFirstBillUnitOfTime(ModelBase::stringFromHttpContent(multipart->getContent(U("first_bill_unit_of_time"))));
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("late_payment_sku")))
    {
        setLatePaymentSku(ModelBase::stringFromHttpContent(multipart->getContent(U("late_payment_sku"))));
    }
    if(multipart->hasContent(U("locked")))
    {
        setLocked(ModelBase::boolFromHttpContent(multipart->getContent(U("locked"))));
    }
    if(multipart->hasContent(U("max_auto_renew")))
    {
        setMaxAutoRenew(ModelBase::int32_tFromHttpContent(multipart->getContent(U("max_auto_renew"))));
    }
    if(multipart->hasContent(U("max_bill_attempts")))
    {
        setMaxBillAttempts(ModelBase::int32_tFromHttpContent(multipart->getContent(U("max_bill_attempts"))));
    }
    if(multipart->hasContent(U("migration_plan")))
    {
        setMigrationPlan(ModelBase::stringFromHttpContent(multipart->getContent(U("migration_plan"))));
    }
    if(multipart->hasContent(U("minimum_term")))
    {
        setMinimumTerm(ModelBase::int32_tFromHttpContent(multipart->getContent(U("minimum_term"))));
    }
    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    }
    if(multipart->hasContent(U("primary_sku")))
    {
        setPrimarySku(ModelBase::stringFromHttpContent(multipart->getContent(U("primary_sku"))));
    }
    if(multipart->hasContent(U("reactivation_sku")))
    {
        setReactivationSku(ModelBase::stringFromHttpContent(multipart->getContent(U("reactivation_sku"))));
    }
    if(multipart->hasContent(U("recurring_sku")))
    {
        setRecurringSku(ModelBase::stringFromHttpContent(multipart->getContent(U("recurring_sku"))));
    }
    if(multipart->hasContent(U("renew_period")))
    {
        setRenewPeriod(ModelBase::int32_tFromHttpContent(multipart->getContent(U("renew_period"))));
    }
    if(multipart->hasContent(U("renew_period_unit_of_time")))
    {
        setRenewPeriodUnitOfTime(ModelBase::stringFromHttpContent(multipart->getContent(U("renew_period_unit_of_time"))));
    }
    if(multipart->hasContent(U("subscription_id")))
    {
        setSubscriptionId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("subscription_id"))));
    }
}

std::map<utility::string_t, std::shared_ptr<Property>>& SubscriptionPlan::getAdditionalProperties()
{
    return m_Additional_properties;
}

void SubscriptionPlan::setAdditionalProperties(std::map<utility::string_t, std::shared_ptr<Property>> value)
{
    m_Additional_properties = value;
    m_Additional_propertiesIsSet = true;
}
bool SubscriptionPlan::additionalPropertiesIsSet() const
{
    return m_Additional_propertiesIsSet;
}

void SubscriptionPlan::unsetAdditional_properties()
{
    m_Additional_propertiesIsSet = false;
}

utility::string_t SubscriptionPlan::getAvailability() const
{
    return m_Availability;
}


void SubscriptionPlan::setAvailability(utility::string_t value)
{
    m_Availability = value;
    m_AvailabilityIsSet = true;
}
bool SubscriptionPlan::availabilityIsSet() const
{
    return m_AvailabilityIsSet;
}

void SubscriptionPlan::unsetAvailability()
{
    m_AvailabilityIsSet = false;
}

int32_t SubscriptionPlan::getBillGraceDays() const
{
    return m_Bill_grace_days;
}


void SubscriptionPlan::setBillGraceDays(int32_t value)
{
    m_Bill_grace_days = value;
    m_Bill_grace_daysIsSet = true;
}
bool SubscriptionPlan::billGraceDaysIsSet() const
{
    return m_Bill_grace_daysIsSet;
}

void SubscriptionPlan::unsetBill_grace_days()
{
    m_Bill_grace_daysIsSet = false;
}

bool SubscriptionPlan::getConsolidated() const
{
    return m_Consolidated;
}


void SubscriptionPlan::setConsolidated(bool value)
{
    m_Consolidated = value;
    m_ConsolidatedIsSet = true;
}
bool SubscriptionPlan::consolidatedIsSet() const
{
    return m_ConsolidatedIsSet;
}

void SubscriptionPlan::unsetConsolidated()
{
    m_ConsolidatedIsSet = false;
}

int32_t SubscriptionPlan::getFirstBill() const
{
    return m_First_bill;
}


void SubscriptionPlan::setFirstBill(int32_t value)
{
    m_First_bill = value;
    m_First_billIsSet = true;
}
bool SubscriptionPlan::firstBillIsSet() const
{
    return m_First_billIsSet;
}

void SubscriptionPlan::unsetFirst_bill()
{
    m_First_billIsSet = false;
}

utility::string_t SubscriptionPlan::getFirstBillUnitOfTime() const
{
    return m_First_bill_unit_of_time;
}


void SubscriptionPlan::setFirstBillUnitOfTime(utility::string_t value)
{
    m_First_bill_unit_of_time = value;
    m_First_bill_unit_of_timeIsSet = true;
}
bool SubscriptionPlan::firstBillUnitOfTimeIsSet() const
{
    return m_First_bill_unit_of_timeIsSet;
}

void SubscriptionPlan::unsetFirst_bill_unit_of_time()
{
    m_First_bill_unit_of_timeIsSet = false;
}

utility::string_t SubscriptionPlan::getId() const
{
    return m_Id;
}


void SubscriptionPlan::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool SubscriptionPlan::idIsSet() const
{
    return m_IdIsSet;
}

void SubscriptionPlan::unsetId()
{
    m_IdIsSet = false;
}

utility::string_t SubscriptionPlan::getLatePaymentSku() const
{
    return m_Late_payment_sku;
}


void SubscriptionPlan::setLatePaymentSku(utility::string_t value)
{
    m_Late_payment_sku = value;
    m_Late_payment_skuIsSet = true;
}
bool SubscriptionPlan::latePaymentSkuIsSet() const
{
    return m_Late_payment_skuIsSet;
}

void SubscriptionPlan::unsetLate_payment_sku()
{
    m_Late_payment_skuIsSet = false;
}

bool SubscriptionPlan::getLocked() const
{
    return m_Locked;
}


void SubscriptionPlan::setLocked(bool value)
{
    m_Locked = value;
    m_LockedIsSet = true;
}
bool SubscriptionPlan::lockedIsSet() const
{
    return m_LockedIsSet;
}

void SubscriptionPlan::unsetLocked()
{
    m_LockedIsSet = false;
}

int32_t SubscriptionPlan::getMaxAutoRenew() const
{
    return m_Max_auto_renew;
}


void SubscriptionPlan::setMaxAutoRenew(int32_t value)
{
    m_Max_auto_renew = value;
    m_Max_auto_renewIsSet = true;
}
bool SubscriptionPlan::maxAutoRenewIsSet() const
{
    return m_Max_auto_renewIsSet;
}

void SubscriptionPlan::unsetMax_auto_renew()
{
    m_Max_auto_renewIsSet = false;
}

int32_t SubscriptionPlan::getMaxBillAttempts() const
{
    return m_Max_bill_attempts;
}


void SubscriptionPlan::setMaxBillAttempts(int32_t value)
{
    m_Max_bill_attempts = value;
    m_Max_bill_attemptsIsSet = true;
}
bool SubscriptionPlan::maxBillAttemptsIsSet() const
{
    return m_Max_bill_attemptsIsSet;
}

void SubscriptionPlan::unsetMax_bill_attempts()
{
    m_Max_bill_attemptsIsSet = false;
}

utility::string_t SubscriptionPlan::getMigrationPlan() const
{
    return m_Migration_plan;
}


void SubscriptionPlan::setMigrationPlan(utility::string_t value)
{
    m_Migration_plan = value;
    m_Migration_planIsSet = true;
}
bool SubscriptionPlan::migrationPlanIsSet() const
{
    return m_Migration_planIsSet;
}

void SubscriptionPlan::unsetMigration_plan()
{
    m_Migration_planIsSet = false;
}

int32_t SubscriptionPlan::getMinimumTerm() const
{
    return m_Minimum_term;
}


void SubscriptionPlan::setMinimumTerm(int32_t value)
{
    m_Minimum_term = value;
    m_Minimum_termIsSet = true;
}
bool SubscriptionPlan::minimumTermIsSet() const
{
    return m_Minimum_termIsSet;
}

void SubscriptionPlan::unsetMinimum_term()
{
    m_Minimum_termIsSet = false;
}

utility::string_t SubscriptionPlan::getName() const
{
    return m_Name;
}


void SubscriptionPlan::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool SubscriptionPlan::nameIsSet() const
{
    return m_NameIsSet;
}

void SubscriptionPlan::unsetName()
{
    m_NameIsSet = false;
}

utility::string_t SubscriptionPlan::getPrimarySku() const
{
    return m_Primary_sku;
}


void SubscriptionPlan::setPrimarySku(utility::string_t value)
{
    m_Primary_sku = value;
    m_Primary_skuIsSet = true;
}
bool SubscriptionPlan::primarySkuIsSet() const
{
    return m_Primary_skuIsSet;
}

void SubscriptionPlan::unsetPrimary_sku()
{
    m_Primary_skuIsSet = false;
}

utility::string_t SubscriptionPlan::getReactivationSku() const
{
    return m_Reactivation_sku;
}


void SubscriptionPlan::setReactivationSku(utility::string_t value)
{
    m_Reactivation_sku = value;
    m_Reactivation_skuIsSet = true;
}
bool SubscriptionPlan::reactivationSkuIsSet() const
{
    return m_Reactivation_skuIsSet;
}

void SubscriptionPlan::unsetReactivation_sku()
{
    m_Reactivation_skuIsSet = false;
}

utility::string_t SubscriptionPlan::getRecurringSku() const
{
    return m_Recurring_sku;
}


void SubscriptionPlan::setRecurringSku(utility::string_t value)
{
    m_Recurring_sku = value;
    m_Recurring_skuIsSet = true;
}
bool SubscriptionPlan::recurringSkuIsSet() const
{
    return m_Recurring_skuIsSet;
}

void SubscriptionPlan::unsetRecurring_sku()
{
    m_Recurring_skuIsSet = false;
}

int32_t SubscriptionPlan::getRenewPeriod() const
{
    return m_Renew_period;
}


void SubscriptionPlan::setRenewPeriod(int32_t value)
{
    m_Renew_period = value;
    m_Renew_periodIsSet = true;
}
bool SubscriptionPlan::renewPeriodIsSet() const
{
    return m_Renew_periodIsSet;
}

void SubscriptionPlan::unsetRenew_period()
{
    m_Renew_periodIsSet = false;
}

utility::string_t SubscriptionPlan::getRenewPeriodUnitOfTime() const
{
    return m_Renew_period_unit_of_time;
}


void SubscriptionPlan::setRenewPeriodUnitOfTime(utility::string_t value)
{
    m_Renew_period_unit_of_time = value;
    m_Renew_period_unit_of_timeIsSet = true;
}
bool SubscriptionPlan::renewPeriodUnitOfTimeIsSet() const
{
    return m_Renew_period_unit_of_timeIsSet;
}

void SubscriptionPlan::unsetRenew_period_unit_of_time()
{
    m_Renew_period_unit_of_timeIsSet = false;
}

int32_t SubscriptionPlan::getSubscriptionId() const
{
    return m_Subscription_id;
}


void SubscriptionPlan::setSubscriptionId(int32_t value)
{
    m_Subscription_id = value;
    m_Subscription_idIsSet = true;
}
bool SubscriptionPlan::subscriptionIdIsSet() const
{
    return m_Subscription_idIsSet;
}

void SubscriptionPlan::unsetSubscription_id()
{
    m_Subscription_idIsSet = false;
}

}
}
}
}

