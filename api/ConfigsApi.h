/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * ConfigsApi.h
 *
 * 
 */

#ifndef ConfigsApi_H_
#define ConfigsApi_H_


#include "ApiClient.h"

#include "Config.h"
#include "PageResource«Config».h"
#include "Result.h"
#include <cpprest/details/basic_types.h>

namespace com {
namespace knetikcloud {
namespace client {
namespace api {

using namespace com::knetikcloud::client::model;

class  ConfigsApi
{
public:
    ConfigsApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~ConfigsApi();
    /// <summary>
    /// Create a new config
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="config">The config object (optional)</param>
    pplx::task<std::shared_ptr<Config>> createConfig(std::shared_ptr<Config> config);
    /// <summary>
    /// Delete an existing config
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The config name</param>
    pplx::task<void> deleteConfig(utility::string_t name);
    /// <summary>
    /// Get a single config
    /// </summary>
    /// <remarks>
    /// Only configs that are public readable will be shown without admin access
    /// </remarks>
    /// <param name="name">The config name</param>
    pplx::task<std::shared_ptr<Config>> getConfig(utility::string_t name);
    /// <summary>
    /// List and search configs
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="filterSearch">Filter for configs whose name contains the given string (optional)</param>/// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)</param>
    pplx::task<std::shared_ptr<PageResource«Config»>> getConfigs(utility::string_t filterSearch, int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// Update an existing config
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">The config name</param>/// <param name="config">The config object (optional)</param>
    pplx::task<void> updateConfig(utility::string_t name, std::shared_ptr<Config> config);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ConfigsApi_H_ */

