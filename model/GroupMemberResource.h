/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * GroupMemberResource.h
 *
 * 
 */

#ifndef GroupMemberResource_H_
#define GroupMemberResource_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "SimpleUserResource.h"
#include <map>
#include "SimpleGroupResource.h"
#include <vector>
#include "Property.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  GroupMemberResource
    : public ModelBase
{
public:
    GroupMemberResource();
    virtual ~GroupMemberResource();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// GroupMemberResource members

    /// <summary>
    /// A map of additional properties, keyed on the property name (private). Must match the names and types defined in the template for this type, or be an extra not from the template
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<Property>>& getAdditionalProperties();
    bool additionalPropertiesIsSet() const;
    void unsetAdditional_properties();
    void setAdditionalProperties(std::map<utility::string_t, std::shared_ptr<Property>> value);
    /// <summary>
    /// The group. Id is the unique name
    /// </summary>
    std::shared_ptr<SimpleGroupResource> getGroup() const;
    bool groupIsSet() const;
    void unsetGroup();
    void setGroup(std::shared_ptr<SimpleGroupResource> value);
    /// <summary>
    /// Whether this membership is explicit (the user was added directly to the group) or implicit (the user was added only to one or more child groups)
    /// </summary>
    bool getImplicit() const;
    bool implicitIsSet() const;
    void unsetImplicit();
    void setImplicit(bool value);
    /// <summary>
    /// The id of the membership entry
    /// </summary>
    int64_t getMembershipId() const;
    bool membershipIdIsSet() const;
    void unsetMembership_id();
    void setMembershipId(int64_t value);
    /// <summary>
    /// The position of the member in the group if applicable. Read notes for details
    /// </summary>
    utility::string_t getOrder() const;
    bool orderIsSet() const;
    void unsetOrder();
    void setOrder(utility::string_t value);
    /// <summary>
    /// The member&#39;s access level. Default: member
    /// </summary>
    utility::string_t getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();
    void setStatus(utility::string_t value);
    /// <summary>
    /// A template this member additional properties are validated against (private). May be null and no validation of properties will be done
    /// </summary>
    utility::string_t getTemplate() const;
    bool templateIsSet() const;
    void unsetTemplate();
    void setTemplate(utility::string_t value);
    /// <summary>
    /// The user
    /// </summary>
    std::shared_ptr<SimpleUserResource> getUser() const;
        void setUser(std::shared_ptr<SimpleUserResource> value);

protected:
    std::map<utility::string_t, std::shared_ptr<Property>> m_Additional_properties;
    bool m_Additional_propertiesIsSet;
    std::shared_ptr<SimpleGroupResource> m_Group;
    bool m_GroupIsSet;
    bool m_Implicit;
    bool m_ImplicitIsSet;
    int64_t m_Membership_id;
    bool m_Membership_idIsSet;
    utility::string_t m_Order;
    bool m_OrderIsSet;
    utility::string_t m_Status;
    bool m_StatusIsSet;
    utility::string_t m_Template;
    bool m_TemplateIsSet;
    std::shared_ptr<SimpleUserResource> m_User;
    };

}
}
}
}

#endif /* GroupMemberResource_H_ */
