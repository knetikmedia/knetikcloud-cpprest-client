/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "UserInventoryAddRequest.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

UserInventoryAddRequest::UserInventoryAddRequest()
{
    m_Note = U("");
    m_OverridesIsSet = false;
    m_Skip_invoice = false;
    m_Sku = U("");
    
}

UserInventoryAddRequest::~UserInventoryAddRequest()
{
}

void UserInventoryAddRequest::validate()
{
    // TODO: implement validation
}

web::json::value UserInventoryAddRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("note")] = ModelBase::toJson(m_Note);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Overrides )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("overrides")] = web::json::value::array(jsonArray);
        }
    }
    val[U("skip_invoice")] = ModelBase::toJson(m_Skip_invoice);
    val[U("sku")] = ModelBase::toJson(m_Sku);
    

    return val;
}

void UserInventoryAddRequest::fromJson(web::json::value& val)
{
    setNote(ModelBase::stringFromJson(val[U("note")]));
    {
        m_Overrides.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("overrides")))
        {
        for( auto& item : val[U("overrides")].as_array() )
        {
            m_Overrides.push_back(ModelBase::stringFromJson(item));
            
        }
        }
    }
    setSkipInvoice(ModelBase::boolFromJson(val[U("skip_invoice")]));
    setSku(ModelBase::stringFromJson(val[U("sku")]));
    
}

void UserInventoryAddRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("note"), m_Note));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Overrides )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("overrides"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("skip_invoice"), m_Skip_invoice));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("sku"), m_Sku));
    
}

void UserInventoryAddRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setNote(ModelBase::stringFromHttpContent(multipart->getContent(U("note"))));
    {
        m_Overrides.clear();
        if(multipart->hasContent(U("overrides")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("overrides"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Overrides.push_back(ModelBase::stringFromJson(item));
            
        }
        }
    }
    setSkipInvoice(ModelBase::boolFromHttpContent(multipart->getContent(U("skip_invoice"))));
    setSku(ModelBase::stringFromHttpContent(multipart->getContent(U("sku"))));
    
}


utility::string_t UserInventoryAddRequest::getNote() const
{
    return m_Note;
}
void UserInventoryAddRequest::setNote(utility::string_t value)
{
    m_Note = value;
    
}
std::vector<utility::string_t>& UserInventoryAddRequest::getOverrides()
{
    return m_Overrides;
}
bool UserInventoryAddRequest::overridesIsSet() const
{
    return m_OverridesIsSet;
}
void UserInventoryAddRequest::unsetOverrides()
{
    m_OverridesIsSet = false;
}
bool UserInventoryAddRequest::getSkipInvoice() const
{
    return m_Skip_invoice;
}
void UserInventoryAddRequest::setSkipInvoice(bool value)
{
    m_Skip_invoice = value;
    
}
utility::string_t UserInventoryAddRequest::getSku() const
{
    return m_Sku;
}
void UserInventoryAddRequest::setSku(utility::string_t value)
{
    m_Sku = value;
    
}

}
}
}
}

