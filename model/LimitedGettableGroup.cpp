/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "LimitedGettableGroup.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

LimitedGettableGroup::LimitedGettableGroup()
{
    m_Active_only = false;
    m_Name = U("");
    m_NameIsSet = false;
    m_Owned_limit = 0;
}

LimitedGettableGroup::~LimitedGettableGroup()
{
}

void LimitedGettableGroup::validate()
{
    // TODO: implement validation
}

web::json::value LimitedGettableGroup::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("active_only")] = ModelBase::toJson(m_Active_only);
    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }
    val[U("owned_limit")] = ModelBase::toJson(m_Owned_limit);

    return val;
}

void LimitedGettableGroup::fromJson(web::json::value& val)
{
    setActiveOnly(ModelBase::boolFromJson(val[U("active_only")]));
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
    }
    setOwnedLimit(ModelBase::int32_tFromJson(val[U("owned_limit")]));
}

void LimitedGettableGroup::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("active_only"), m_Active_only));
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("owned_limit"), m_Owned_limit));
}

void LimitedGettableGroup::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setActiveOnly(ModelBase::boolFromHttpContent(multipart->getContent(U("active_only"))));
    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    }
    setOwnedLimit(ModelBase::int32_tFromHttpContent(multipart->getContent(U("owned_limit"))));
}

bool LimitedGettableGroup::getActiveOnly() const
{
    return m_Active_only;
}


void LimitedGettableGroup::setActiveOnly(bool value)
{
    m_Active_only = value;
    
}
utility::string_t LimitedGettableGroup::getName() const
{
    return m_Name;
}


void LimitedGettableGroup::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool LimitedGettableGroup::nameIsSet() const
{
    return m_NameIsSet;
}

void LimitedGettableGroup::unsetName()
{
    m_NameIsSet = false;
}

int32_t LimitedGettableGroup::getOwnedLimit() const
{
    return m_Owned_limit;
}


void LimitedGettableGroup::setOwnedLimit(int32_t value)
{
    m_Owned_limit = value;
    
}
}
}
}
}

