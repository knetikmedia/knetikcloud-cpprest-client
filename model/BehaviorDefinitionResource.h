/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * BehaviorDefinitionResource.h
 *
 * 
 */

#ifndef BehaviorDefinitionResource_H_
#define BehaviorDefinitionResource_H_


#include "ModelBase.h"

#include "Behavior.h"
#include "PropertyFieldResource.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  BehaviorDefinitionResource
    : public ModelBase
{
public:
    BehaviorDefinitionResource();
    virtual ~BehaviorDefinitionResource();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BehaviorDefinitionResource members

    /// <summary>
    /// Description of the behavior
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();
    void setDescription(utility::string_t value);
    /// <summary>
    /// Pre-requisite behaviors that an item must have in order to also have this behavior
    /// </summary>
    std::vector<std::shared_ptr<Behavior>>& getPrerequisiteBehaviors();
    bool prerequisiteBehaviorsIsSet() const;
    void unsetPrerequisite_behaviors();
    void setPrerequisiteBehaviors(std::vector<std::shared_ptr<Behavior>> value);
    /// <summary>
    /// Configurable properties of the behavior
    /// </summary>
    std::vector<std::shared_ptr<PropertyFieldResource>>& getProperties();
        void setProperties(std::vector<std::shared_ptr<PropertyFieldResource>> value);
    /// <summary>
    /// The behavior type
    /// </summary>
    utility::string_t getTypeHint() const;
        void setTypeHint(utility::string_t value);

protected:
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    std::vector<std::shared_ptr<Behavior>> m_Prerequisite_behaviors;
    bool m_Prerequisite_behaviorsIsSet;
    std::vector<std::shared_ptr<PropertyFieldResource>> m_Properties;
        utility::string_t m_Type_hint;
    };

}
}
}
}

#endif /* BehaviorDefinitionResource_H_ */
