/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "UserActivityResultsResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

UserActivityResultsResource::UserActivityResultsResource()
{
    m_Currency_rewardsIsSet = false;
    m_Item_rewardsIsSet = false;
    m_Rank = 0;
    m_RankIsSet = false;
    m_Score = 0;
    m_ScoreIsSet = false;
    m_TagsIsSet = false;
    m_Ties = 0;
    m_TiesIsSet = false;
    
}

UserActivityResultsResource::~UserActivityResultsResource()
{
}

void UserActivityResultsResource::validate()
{
    // TODO: implement validation
}

web::json::value UserActivityResultsResource::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Currency_rewards )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("currency_rewards")] = web::json::value::array(jsonArray);
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Item_rewards )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("item_rewards")] = web::json::value::array(jsonArray);
        }
    }
    if(m_RankIsSet)
    {
        val[U("rank")] = ModelBase::toJson(m_Rank);
    }
    if(m_ScoreIsSet)
    {
        val[U("score")] = ModelBase::toJson(m_Score);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("tags")] = web::json::value::array(jsonArray);
        }
    }
    if(m_TiesIsSet)
    {
        val[U("ties")] = ModelBase::toJson(m_Ties);
    }
    val[U("user")] = ModelBase::toJson(m_User);
    

    return val;
}

void UserActivityResultsResource::fromJson(web::json::value& val)
{
    {
        m_Currency_rewards.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("currency_rewards")))
        {
        for( auto& item : val[U("currency_rewards")].as_array() )
        {
            
            if(item.is_null())
            {
                m_Currency_rewards.push_back( std::shared_ptr<RewardCurrencyResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<RewardCurrencyResource> newItem(new RewardCurrencyResource());
                newItem->fromJson(item);
                m_Currency_rewards.push_back( newItem );
            }
            
        }
        }
    }
    {
        m_Item_rewards.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("item_rewards")))
        {
        for( auto& item : val[U("item_rewards")].as_array() )
        {
            
            if(item.is_null())
            {
                m_Item_rewards.push_back( std::shared_ptr<RewardItemResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<RewardItemResource> newItem(new RewardItemResource());
                newItem->fromJson(item);
                m_Item_rewards.push_back( newItem );
            }
            
        }
        }
    }
    if(val.has_field(U("rank")))
    {
        setRank(ModelBase::int64_tFromJson(val[U("rank")]));
    }
    if(val.has_field(U("score")))
    {
        setScore(ModelBase::int64_tFromJson(val[U("score")]));
    }
    {
        m_Tags.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("tags")))
        {
        for( auto& item : val[U("tags")].as_array() )
        {
            m_Tags.push_back(ModelBase::stringFromJson(item));
            
        }
        }
    }
    if(val.has_field(U("ties")))
    {
        setTies(ModelBase::int32_tFromJson(val[U("ties")]));
    }
    std::shared_ptr<SimpleUserResource> newUser(new SimpleUserResource());
    newUser->fromJson(val[U("user")]);
    setUser( newItem );
    
}

void UserActivityResultsResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Currency_rewards )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("currency_rewards"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Item_rewards )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("item_rewards"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_RankIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("rank"), m_Rank));
    }
    if(m_ScoreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("score"), m_Score));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("tags"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_TiesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ties"), m_Ties));
    }
    m_User->toMultipart(multipart, U("user."));
    
}

void UserActivityResultsResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        m_Currency_rewards.clear();
        if(multipart->hasContent(U("currency_rewards")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("currency_rewards"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_Currency_rewards.push_back( std::shared_ptr<RewardCurrencyResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<RewardCurrencyResource> newItem(new RewardCurrencyResource());
                newItem->fromJson(item);
                m_Currency_rewards.push_back( newItem );
            }
            
        }
        }
    }
    {
        m_Item_rewards.clear();
        if(multipart->hasContent(U("item_rewards")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("item_rewards"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_Item_rewards.push_back( std::shared_ptr<RewardItemResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<RewardItemResource> newItem(new RewardItemResource());
                newItem->fromJson(item);
                m_Item_rewards.push_back( newItem );
            }
            
        }
        }
    }
    if(multipart->hasContent(U("rank")))
    {
        setRank(ModelBase::int64_tFromHttpContent(multipart->getContent(U("rank"))));
    }
    if(multipart->hasContent(U("score")))
    {
        setScore(ModelBase::int64_tFromHttpContent(multipart->getContent(U("score"))));
    }
    {
        m_Tags.clear();
        if(multipart->hasContent(U("tags")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("tags"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Tags.push_back(ModelBase::stringFromJson(item));
            
        }
        }
    }
    if(multipart->hasContent(U("ties")))
    {
        setTies(ModelBase::int32_tFromHttpContent(multipart->getContent(U("ties"))));
    }
    std::shared_ptr<SimpleUserResource> newUser(new SimpleUserResource());
    newUser->fromMultiPart(multipart, U("user."));
    setUser( newUser );
    
}


std::vector<std::shared_ptr<RewardCurrencyResource>>& UserActivityResultsResource::getCurrencyRewards()
{
    return m_Currency_rewards;
}
bool UserActivityResultsResource::currency_rewardsIsSet() const
{
    return m_Currency_rewardsIsSet;
}
void UserActivityResultsResource::unsetCurrency_rewards()
{
    m_Currency_rewardsIsSet = false;
}
std::vector<std::shared_ptr<RewardItemResource>>& UserActivityResultsResource::getItemRewards()
{
    return m_Item_rewards;
}
bool UserActivityResultsResource::item_rewardsIsSet() const
{
    return m_Item_rewardsIsSet;
}
void UserActivityResultsResource::unsetItem_rewards()
{
    m_Item_rewardsIsSet = false;
}
int64_t UserActivityResultsResource::getRank() const
{
    return m_Rank;
}
void UserActivityResultsResource::setRank(int64_t value)
{
    m_Rank = value;
    m_RankIsSet = true;
}
bool UserActivityResultsResource::rankIsSet() const
{
    return m_RankIsSet;
}
void UserActivityResultsResource::unsetRank()
{
    m_RankIsSet = false;
}
int64_t UserActivityResultsResource::getScore() const
{
    return m_Score;
}
void UserActivityResultsResource::setScore(int64_t value)
{
    m_Score = value;
    m_ScoreIsSet = true;
}
bool UserActivityResultsResource::scoreIsSet() const
{
    return m_ScoreIsSet;
}
void UserActivityResultsResource::unsetScore()
{
    m_ScoreIsSet = false;
}
std::vector<utility::string_t>& UserActivityResultsResource::getTags()
{
    return m_Tags;
}
bool UserActivityResultsResource::tagsIsSet() const
{
    return m_TagsIsSet;
}
void UserActivityResultsResource::unsetTags()
{
    m_TagsIsSet = false;
}
int32_t UserActivityResultsResource::getTies() const
{
    return m_Ties;
}
void UserActivityResultsResource::setTies(int32_t value)
{
    m_Ties = value;
    m_TiesIsSet = true;
}
bool UserActivityResultsResource::tiesIsSet() const
{
    return m_TiesIsSet;
}
void UserActivityResultsResource::unsetTies()
{
    m_TiesIsSet = false;
}
std::shared_ptr<SimpleUserResource> UserActivityResultsResource::getUser() const
{
    return m_User;
}
void UserActivityResultsResource::setUser(std::shared_ptr<SimpleUserResource> value)
{
    m_User = value;
    
}

}
}
}
}

