/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * SubscriptionPlan.h
 *
 * 
 */

#ifndef SubscriptionPlan_H_
#define SubscriptionPlan_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>
#include "Property.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  SubscriptionPlan
    : public ModelBase
{
public:
    SubscriptionPlan();
    virtual ~SubscriptionPlan();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SubscriptionPlan members

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<Property>>& getAdditionalProperties();
    bool additionalPropertiesIsSet() const;
    void unsetAdditional_properties();
    void setAdditionalProperties(std::map<utility::string_t, std::shared_ptr<Property>> value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAvailability() const;
    bool availabilityIsSet() const;
    void unsetAvailability();
    void setAvailability(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getBillGraceDays() const;
    bool billGraceDaysIsSet() const;
    void unsetBill_grace_days();
    void setBillGraceDays(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    bool getConsolidated() const;
    bool consolidatedIsSet() const;
    void unsetConsolidated();
    void setConsolidated(bool value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getFirstBill() const;
    bool firstBillIsSet() const;
    void unsetFirst_bill();
    void setFirstBill(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFirstBillUnitOfTime() const;
    bool firstBillUnitOfTimeIsSet() const;
    void unsetFirst_bill_unit_of_time();
    void setFirstBillUnitOfTime(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();
    void setId(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLatePaymentSku() const;
    bool latePaymentSkuIsSet() const;
    void unsetLate_payment_sku();
    void setLatePaymentSku(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    bool getLocked() const;
    bool lockedIsSet() const;
    void unsetLocked();
    void setLocked(bool value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getMaxAutoRenew() const;
    bool maxAutoRenewIsSet() const;
    void unsetMax_auto_renew();
    void setMaxAutoRenew(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getMaxBillAttempts() const;
    bool maxBillAttemptsIsSet() const;
    void unsetMax_bill_attempts();
    void setMaxBillAttempts(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMigrationPlan() const;
    bool migrationPlanIsSet() const;
    void unsetMigration_plan();
    void setMigrationPlan(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getMinimumTerm() const;
    bool minimumTermIsSet() const;
    void unsetMinimum_term();
    void setMinimumTerm(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();
    void setName(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPrimarySku() const;
    bool primarySkuIsSet() const;
    void unsetPrimary_sku();
    void setPrimarySku(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getReactivationSku() const;
    bool reactivationSkuIsSet() const;
    void unsetReactivation_sku();
    void setReactivationSku(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRecurringSku() const;
    bool recurringSkuIsSet() const;
    void unsetRecurring_sku();
    void setRecurringSku(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getRenewPeriod() const;
    bool renewPeriodIsSet() const;
    void unsetRenew_period();
    void setRenewPeriod(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRenewPeriodUnitOfTime() const;
    bool renewPeriodUnitOfTimeIsSet() const;
    void unsetRenew_period_unit_of_time();
    void setRenewPeriodUnitOfTime(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getSubscriptionId() const;
    bool subscriptionIdIsSet() const;
    void unsetSubscription_id();
    void setSubscriptionId(int32_t value);

protected:
    std::map<utility::string_t, std::shared_ptr<Property>> m_Additional_properties;
    bool m_Additional_propertiesIsSet;
    utility::string_t m_Availability;
    bool m_AvailabilityIsSet;
    int32_t m_Bill_grace_days;
    bool m_Bill_grace_daysIsSet;
    bool m_Consolidated;
    bool m_ConsolidatedIsSet;
    int32_t m_First_bill;
    bool m_First_billIsSet;
    utility::string_t m_First_bill_unit_of_time;
    bool m_First_bill_unit_of_timeIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Late_payment_sku;
    bool m_Late_payment_skuIsSet;
    bool m_Locked;
    bool m_LockedIsSet;
    int32_t m_Max_auto_renew;
    bool m_Max_auto_renewIsSet;
    int32_t m_Max_bill_attempts;
    bool m_Max_bill_attemptsIsSet;
    utility::string_t m_Migration_plan;
    bool m_Migration_planIsSet;
    int32_t m_Minimum_term;
    bool m_Minimum_termIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Primary_sku;
    bool m_Primary_skuIsSet;
    utility::string_t m_Reactivation_sku;
    bool m_Reactivation_skuIsSet;
    utility::string_t m_Recurring_sku;
    bool m_Recurring_skuIsSet;
    int32_t m_Renew_period;
    bool m_Renew_periodIsSet;
    utility::string_t m_Renew_period_unit_of_time;
    bool m_Renew_period_unit_of_timeIsSet;
    int32_t m_Subscription_id;
    bool m_Subscription_idIsSet;
};

}
}
}
}

#endif /* SubscriptionPlan_H_ */
