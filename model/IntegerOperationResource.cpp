/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "IntegerOperationResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

IntegerOperationResource::IntegerOperationResource()
{
    m_ArgsIsSet = false;
    m_Op = U("");
    m_OpIsSet = false;
    m_Type = U("");
    m_TypeIsSet = false;
}

IntegerOperationResource::~IntegerOperationResource()
{
}

void IntegerOperationResource::validate()
{
    // TODO: implement validation
}

web::json::value IntegerOperationResource::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Args )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("args")] = web::json::value::array(jsonArray);
        }
    }
    if(m_OpIsSet)
    {
        val[U("op")] = ModelBase::toJson(m_Op);
    }
    if(m_TypeIsSet)
    {
        val[U("type")] = ModelBase::toJson(m_Type);
    }

    return val;
}

void IntegerOperationResource::fromJson(web::json::value& val)
{
    {
        m_Args.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("args")))
        {
        for( auto& item : val[U("args")].as_array() )
        {
            if(item.is_null())
            {
                m_Args.push_back( std::shared_ptr<ExpressionResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<ExpressionResource> newItem(new ExpressionResource());
                newItem->fromJson(item);
                m_Args.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(U("op")))
    {
        setOp(ModelBase::stringFromJson(val[U("op")]));
    }
    if(val.has_field(U("type")))
    {
        setType(ModelBase::stringFromJson(val[U("type")]));
    }
}

void IntegerOperationResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Args )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("args"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_OpIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("op"), m_Op));
        
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("type"), m_Type));
        
    }
}

void IntegerOperationResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        m_Args.clear();
        if(multipart->hasContent(U("args")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("args"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Args.push_back( std::shared_ptr<ExpressionResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<ExpressionResource> newItem(new ExpressionResource());
                newItem->fromJson(item);
                m_Args.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(U("op")))
    {
        setOp(ModelBase::stringFromHttpContent(multipart->getContent(U("op"))));
    }
    if(multipart->hasContent(U("type")))
    {
        setType(ModelBase::stringFromHttpContent(multipart->getContent(U("type"))));
    }
}

std::vector<std::shared_ptr<ExpressionResource>>& IntegerOperationResource::getArgs()
{
    return m_Args;
}

void IntegerOperationResource::setArgs(std::vector<std::shared_ptr<ExpressionResource>> value)
{
    m_Args = value;
    m_ArgsIsSet = true;
}
bool IntegerOperationResource::argsIsSet() const
{
    return m_ArgsIsSet;
}

void IntegerOperationResource::unsetArgs()
{
    m_ArgsIsSet = false;
}

utility::string_t IntegerOperationResource::getOp() const
{
    return m_Op;
}


void IntegerOperationResource::setOp(utility::string_t value)
{
    m_Op = value;
    m_OpIsSet = true;
}
bool IntegerOperationResource::opIsSet() const
{
    return m_OpIsSet;
}

void IntegerOperationResource::unsetOp()
{
    m_OpIsSet = false;
}

utility::string_t IntegerOperationResource::getType() const
{
    return m_Type;
}


void IntegerOperationResource::setType(utility::string_t value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool IntegerOperationResource::typeIsSet() const
{
    return m_TypeIsSet;
}

void IntegerOperationResource::unsetType()
{
    m_TypeIsSet = false;
}

}
}
}
}

