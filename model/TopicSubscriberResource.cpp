/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "TopicSubscriberResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

TopicSubscriberResource::TopicSubscriberResource()
{
    m_Disabled = false;
    m_DisabledIsSet = false;
    m_Topic_id = U("");
    m_User_id = 0;
    m_User_idIsSet = false;
    m_Username = U("");
    m_UsernameIsSet = false;
}

TopicSubscriberResource::~TopicSubscriberResource()
{
}

void TopicSubscriberResource::validate()
{
    // TODO: implement validation
}

web::json::value TopicSubscriberResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_DisabledIsSet)
    {
        val[U("disabled")] = ModelBase::toJson(m_Disabled);
    }
    val[U("topic_id")] = ModelBase::toJson(m_Topic_id);
    if(m_User_idIsSet)
    {
        val[U("user_id")] = ModelBase::toJson(m_User_id);
    }
    if(m_UsernameIsSet)
    {
        val[U("username")] = ModelBase::toJson(m_Username);
    }

    return val;
}

void TopicSubscriberResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("disabled")))
    {
        setDisabled(ModelBase::boolFromJson(val[U("disabled")]));
    }
    setTopicId(ModelBase::stringFromJson(val[U("topic_id")]));
    if(val.has_field(U("user_id")))
    {
        setUserId(ModelBase::int32_tFromJson(val[U("user_id")]));
    }
    if(val.has_field(U("username")))
    {
        setUsername(ModelBase::stringFromJson(val[U("username")]));
    }
}

void TopicSubscriberResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_DisabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("disabled"), m_Disabled));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("topic_id"), m_Topic_id));
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("user_id"), m_User_id));
    }
    if(m_UsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("username"), m_Username));
        
    }
}

void TopicSubscriberResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("disabled")))
    {
        setDisabled(ModelBase::boolFromHttpContent(multipart->getContent(U("disabled"))));
    }
    setTopicId(ModelBase::stringFromHttpContent(multipart->getContent(U("topic_id"))));
    if(multipart->hasContent(U("user_id")))
    {
        setUserId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("user_id"))));
    }
    if(multipart->hasContent(U("username")))
    {
        setUsername(ModelBase::stringFromHttpContent(multipart->getContent(U("username"))));
    }
}

bool TopicSubscriberResource::getDisabled() const
{
    return m_Disabled;
}


void TopicSubscriberResource::setDisabled(bool value)
{
    m_Disabled = value;
    m_DisabledIsSet = true;
}
bool TopicSubscriberResource::disabledIsSet() const
{
    return m_DisabledIsSet;
}

void TopicSubscriberResource::unsetDisabled()
{
    m_DisabledIsSet = false;
}

utility::string_t TopicSubscriberResource::getTopicId() const
{
    return m_Topic_id;
}


void TopicSubscriberResource::setTopicId(utility::string_t value)
{
    m_Topic_id = value;
    
}
int32_t TopicSubscriberResource::getUserId() const
{
    return m_User_id;
}


void TopicSubscriberResource::setUserId(int32_t value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}
bool TopicSubscriberResource::userIdIsSet() const
{
    return m_User_idIsSet;
}

void TopicSubscriberResource::unsetUser_id()
{
    m_User_idIsSet = false;
}

utility::string_t TopicSubscriberResource::getUsername() const
{
    return m_Username;
}


void TopicSubscriberResource::setUsername(utility::string_t value)
{
    m_Username = value;
    m_UsernameIsSet = true;
}
bool TopicSubscriberResource::usernameIsSet() const
{
    return m_UsernameIsSet;
}

void TopicSubscriberResource::unsetUsername()
{
    m_UsernameIsSet = false;
}

}
}
}
}

