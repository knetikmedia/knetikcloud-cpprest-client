/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "FinalizeBillingAgreementRequest.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

FinalizeBillingAgreementRequest::FinalizeBillingAgreementRequest()
{
    m_Invoice_id = 0;
    m_Invoice_idIsSet = false;
    m_New_default = false;
    m_New_defaultIsSet = false;
    m_Payer_id = U("");
    m_Payer_idIsSet = false;
    m_Token = U("");
    m_User_id = 0;
    m_User_idIsSet = false;
    
}

FinalizeBillingAgreementRequest::~FinalizeBillingAgreementRequest()
{
}

void FinalizeBillingAgreementRequest::validate()
{
    // TODO: implement validation
}

web::json::value FinalizeBillingAgreementRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Invoice_idIsSet)
    {
        val[U("invoice_id")] = ModelBase::toJson(m_Invoice_id);
    }
    if(m_New_defaultIsSet)
    {
        val[U("new_default")] = ModelBase::toJson(m_New_default);
    }
    if(m_Payer_idIsSet)
    {
        val[U("payer_id")] = ModelBase::toJson(m_Payer_id);
    }
    val[U("token")] = ModelBase::toJson(m_Token);
    if(m_User_idIsSet)
    {
        val[U("user_id")] = ModelBase::toJson(m_User_id);
    }
    

    return val;
}

void FinalizeBillingAgreementRequest::fromJson(web::json::value& val)
{
    if(val.has_field(U("invoice_id")))
    {
        setInvoiceId(ModelBase::int32_tFromJson(val[U("invoice_id")]));
    }
    if(val.has_field(U("new_default")))
    {
        setNewDefault(ModelBase::boolFromJson(val[U("new_default")]));
    }
    if(val.has_field(U("payer_id")))
    {
        setPayerId(ModelBase::stringFromJson(val[U("payer_id")]));
        
    }
    setToken(ModelBase::stringFromJson(val[U("token")]));
    if(val.has_field(U("user_id")))
    {
        setUserId(ModelBase::int32_tFromJson(val[U("user_id")]));
    }
    
}

void FinalizeBillingAgreementRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Invoice_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("invoice_id"), m_Invoice_id));
    }
    if(m_New_defaultIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("new_default"), m_New_default));
    }
    if(m_Payer_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("payer_id"), m_Payer_id));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("token"), m_Token));
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("user_id"), m_User_id));
    }
    
}

void FinalizeBillingAgreementRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("invoice_id")))
    {
        setInvoiceId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("invoice_id"))));
    }
    if(multipart->hasContent(U("new_default")))
    {
        setNewDefault(ModelBase::boolFromHttpContent(multipart->getContent(U("new_default"))));
    }
    if(multipart->hasContent(U("payer_id")))
    {
        setPayerId(ModelBase::stringFromHttpContent(multipart->getContent(U("payer_id"))));
        
    }
    setToken(ModelBase::stringFromHttpContent(multipart->getContent(U("token"))));
    if(multipart->hasContent(U("user_id")))
    {
        setUserId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("user_id"))));
    }
    
}


int32_t FinalizeBillingAgreementRequest::getInvoiceId() const
{
    return m_Invoice_id;
}
void FinalizeBillingAgreementRequest::setInvoiceId(int32_t value)
{
    m_Invoice_id = value;
    m_Invoice_idIsSet = true;
}
bool FinalizeBillingAgreementRequest::invoice_idIsSet() const
{
    return m_Invoice_idIsSet;
}
void FinalizeBillingAgreementRequest::unsetInvoice_id()
{
    m_Invoice_idIsSet = false;
}
bool FinalizeBillingAgreementRequest::getNewDefault() const
{
    return m_New_default;
}
void FinalizeBillingAgreementRequest::setNewDefault(bool value)
{
    m_New_default = value;
    m_New_defaultIsSet = true;
}
bool FinalizeBillingAgreementRequest::new_defaultIsSet() const
{
    return m_New_defaultIsSet;
}
void FinalizeBillingAgreementRequest::unsetNew_default()
{
    m_New_defaultIsSet = false;
}
utility::string_t FinalizeBillingAgreementRequest::getPayerId() const
{
    return m_Payer_id;
}
void FinalizeBillingAgreementRequest::setPayerId(utility::string_t value)
{
    m_Payer_id = value;
    m_Payer_idIsSet = true;
}
bool FinalizeBillingAgreementRequest::payer_idIsSet() const
{
    return m_Payer_idIsSet;
}
void FinalizeBillingAgreementRequest::unsetPayer_id()
{
    m_Payer_idIsSet = false;
}
utility::string_t FinalizeBillingAgreementRequest::getToken() const
{
    return m_Token;
}
void FinalizeBillingAgreementRequest::setToken(utility::string_t value)
{
    m_Token = value;
    
}
int32_t FinalizeBillingAgreementRequest::getUserId() const
{
    return m_User_id;
}
void FinalizeBillingAgreementRequest::setUserId(int32_t value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}
bool FinalizeBillingAgreementRequest::user_idIsSet() const
{
    return m_User_idIsSet;
}
void FinalizeBillingAgreementRequest::unsetUser_id()
{
    m_User_idIsSet = false;
}

}
}
}
}

