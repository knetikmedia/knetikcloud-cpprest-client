/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "StateTaxResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

StateTaxResource::StateTaxResource()
{
    m_Country_iso3 = U("");
    m_Federally_exempt = false;
    m_Name = U("");
    m_Rate = 0.0;
    m_State_code = U("");
    m_Tax_shipping = false;
}

StateTaxResource::~StateTaxResource()
{
}

void StateTaxResource::validate()
{
    // TODO: implement validation
}

web::json::value StateTaxResource::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("country_iso3")] = ModelBase::toJson(m_Country_iso3);
    val[U("federally_exempt")] = ModelBase::toJson(m_Federally_exempt);
    val[U("name")] = ModelBase::toJson(m_Name);
    val[U("rate")] = ModelBase::toJson(m_Rate);
    val[U("state_code")] = ModelBase::toJson(m_State_code);
    val[U("tax_shipping")] = ModelBase::toJson(m_Tax_shipping);

    return val;
}

void StateTaxResource::fromJson(web::json::value& val)
{
    setCountryIso3(ModelBase::stringFromJson(val[U("country_iso3")]));
    setFederallyExempt(ModelBase::boolFromJson(val[U("federally_exempt")]));
    setName(ModelBase::stringFromJson(val[U("name")]));
    setRate(ModelBase::doubleFromJson(val[U("rate")]));
    setStateCode(ModelBase::stringFromJson(val[U("state_code")]));
    setTaxShipping(ModelBase::boolFromJson(val[U("tax_shipping")]));
}

void StateTaxResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("country_iso3"), m_Country_iso3));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("federally_exempt"), m_Federally_exempt));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("rate"), m_Rate));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("state_code"), m_State_code));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("tax_shipping"), m_Tax_shipping));
}

void StateTaxResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setCountryIso3(ModelBase::stringFromHttpContent(multipart->getContent(U("country_iso3"))));
    setFederallyExempt(ModelBase::boolFromHttpContent(multipart->getContent(U("federally_exempt"))));
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    setRate(ModelBase::doubleFromHttpContent(multipart->getContent(U("rate"))));
    setStateCode(ModelBase::stringFromHttpContent(multipart->getContent(U("state_code"))));
    setTaxShipping(ModelBase::boolFromHttpContent(multipart->getContent(U("tax_shipping"))));
}

utility::string_t StateTaxResource::getCountryIso3() const
{
    return m_Country_iso3;
}


void StateTaxResource::setCountryIso3(utility::string_t value)
{
    m_Country_iso3 = value;
    
}
bool StateTaxResource::getFederallyExempt() const
{
    return m_Federally_exempt;
}


void StateTaxResource::setFederallyExempt(bool value)
{
    m_Federally_exempt = value;
    
}
utility::string_t StateTaxResource::getName() const
{
    return m_Name;
}


void StateTaxResource::setName(utility::string_t value)
{
    m_Name = value;
    
}
double StateTaxResource::getRate() const
{
    return m_Rate;
}


void StateTaxResource::setRate(double value)
{
    m_Rate = value;
    
}
utility::string_t StateTaxResource::getStateCode() const
{
    return m_State_code;
}


void StateTaxResource::setStateCode(utility::string_t value)
{
    m_State_code = value;
    
}
bool StateTaxResource::getTaxShipping() const
{
    return m_Tax_shipping;
}


void StateTaxResource::setTaxShipping(bool value)
{
    m_Tax_shipping = value;
    
}
}
}
}
}

