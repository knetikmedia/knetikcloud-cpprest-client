/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "LeaderboardEntryResource.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

LeaderboardEntryResource::LeaderboardEntryResource()
{
    m_Rank = 0;
    m_RankIsSet = false;
    m_Score = 0;
    m_ScoreIsSet = false;
    
}

LeaderboardEntryResource::~LeaderboardEntryResource()
{
}

void LeaderboardEntryResource::validate()
{
    // TODO: implement validation
}

web::json::value LeaderboardEntryResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_RankIsSet)
    {
        val[U("rank")] = ModelBase::toJson(m_Rank);
    }
    if(m_ScoreIsSet)
    {
        val[U("score")] = ModelBase::toJson(m_Score);
    }
    val[U("user")] = ModelBase::toJson(m_User);
    

    return val;
}

void LeaderboardEntryResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("rank")))
    {
        setRank(ModelBase::int64_tFromJson(val[U("rank")]));
    }
    if(val.has_field(U("score")))
    {
        setScore(ModelBase::int64_tFromJson(val[U("score")]));
    }
    std::shared_ptr<SimpleUserResource> newUser(new SimpleUserResource());
    newUser->fromJson(val[U("user")]);
    setUser( newItem );
    
}

void LeaderboardEntryResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_RankIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("rank"), m_Rank));
    }
    if(m_ScoreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("score"), m_Score));
    }
    m_User->toMultipart(multipart, U("user."));
    
}

void LeaderboardEntryResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("rank")))
    {
        setRank(ModelBase::int64_tFromHttpContent(multipart->getContent(U("rank"))));
    }
    if(multipart->hasContent(U("score")))
    {
        setScore(ModelBase::int64_tFromHttpContent(multipart->getContent(U("score"))));
    }
    std::shared_ptr<SimpleUserResource> newUser(new SimpleUserResource());
    newUser->fromMultiPart(multipart, U("user."));
    setUser( newUser );
    
}


int64_t LeaderboardEntryResource::getRank() const
{
    return m_Rank;
}
void LeaderboardEntryResource::setRank(int64_t value)
{
    m_Rank = value;
    m_RankIsSet = true;
}
bool LeaderboardEntryResource::rankIsSet() const
{
    return m_RankIsSet;
}
void LeaderboardEntryResource::unsetRank()
{
    m_RankIsSet = false;
}
int64_t LeaderboardEntryResource::getScore() const
{
    return m_Score;
}
void LeaderboardEntryResource::setScore(int64_t value)
{
    m_Score = value;
    m_ScoreIsSet = true;
}
bool LeaderboardEntryResource::scoreIsSet() const
{
    return m_ScoreIsSet;
}
void LeaderboardEntryResource::unsetScore()
{
    m_ScoreIsSet = false;
}
std::shared_ptr<SimpleUserResource> LeaderboardEntryResource::getUser() const
{
    return m_User;
}
void LeaderboardEntryResource::setUser(std::shared_ptr<SimpleUserResource> value)
{
    m_User = value;
    
}

}
}
}
}

