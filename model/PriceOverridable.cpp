/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PriceOverridable.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

PriceOverridable::PriceOverridable()
{
    m_Max_price = 0;
    m_Max_priceIsSet = false;
    m_Min_price = 0;
    m_Min_priceIsSet = false;
}

PriceOverridable::~PriceOverridable()
{
}

void PriceOverridable::validate()
{
    // TODO: implement validation
}

web::json::value PriceOverridable::toJson() const
{
    web::json::value val = this->Behavior::toJson();

    if(m_Max_priceIsSet)
    {
        val[U("max_price")] = ModelBase::toJson(m_Max_price);
    }
    if(m_Min_priceIsSet)
    {
        val[U("min_price")] = ModelBase::toJson(m_Min_price);
    }

    return val;
}

void PriceOverridable::fromJson(web::json::value& val)
{
    this->Behavior::fromJson(val);

    if(val.has_field(U("max_price")))
    {
        setMaxPrice(ModelBase::int32_tFromJson(val[U("max_price")]));
    }
    if(val.has_field(U("min_price")))
    {
        setMinPrice(ModelBase::int32_tFromJson(val[U("min_price")]));
    }
}

void PriceOverridable::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("description"), m_Description));
        
    }
    if(m_Type_hintIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("type_hint"), m_Type_hint));
        
    }
    if(m_Max_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("max_price"), m_Max_price));
    }
    if(m_Min_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("min_price"), m_Min_price));
    }
}

void PriceOverridable::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("description"))));
    }
    if(multipart->hasContent(U("type_hint")))
    {
        setTypeHint(ModelBase::stringFromHttpContent(multipart->getContent(U("type_hint"))));
    }
    if(multipart->hasContent(U("max_price")))
    {
        setMaxPrice(ModelBase::int32_tFromHttpContent(multipart->getContent(U("max_price"))));
    }
    if(multipart->hasContent(U("min_price")))
    {
        setMinPrice(ModelBase::int32_tFromHttpContent(multipart->getContent(U("min_price"))));
    }
}

int32_t PriceOverridable::getMaxPrice() const
{
    return m_Max_price;
}


void PriceOverridable::setMaxPrice(int32_t value)
{
    m_Max_price = value;
    m_Max_priceIsSet = true;
}
bool PriceOverridable::maxPriceIsSet() const
{
    return m_Max_priceIsSet;
}

void PriceOverridable::unsetMax_price()
{
    m_Max_priceIsSet = false;
}

int32_t PriceOverridable::getMinPrice() const
{
    return m_Min_price;
}


void PriceOverridable::setMinPrice(int32_t value)
{
    m_Min_price = value;
    m_Min_priceIsSet = true;
}
bool PriceOverridable::minPriceIsSet() const
{
    return m_Min_priceIsSet;
}

void PriceOverridable::unsetMin_price()
{
    m_Min_priceIsSet = false;
}

}
}
}
}

