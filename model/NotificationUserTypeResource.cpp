/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "NotificationUserTypeResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

NotificationUserTypeResource::NotificationUserTypeResource()
{
    m_Silenced = false;
    m_SilencedIsSet = false;
    m_Type = U("");
    m_TypeIsSet = false;
    m_User_id = 0;
    m_User_idIsSet = false;
}

NotificationUserTypeResource::~NotificationUserTypeResource()
{
}

void NotificationUserTypeResource::validate()
{
    // TODO: implement validation
}

web::json::value NotificationUserTypeResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_SilencedIsSet)
    {
        val[U("silenced")] = ModelBase::toJson(m_Silenced);
    }
    if(m_TypeIsSet)
    {
        val[U("type")] = ModelBase::toJson(m_Type);
    }
    if(m_User_idIsSet)
    {
        val[U("user_id")] = ModelBase::toJson(m_User_id);
    }

    return val;
}

void NotificationUserTypeResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("silenced")))
    {
        setSilenced(ModelBase::boolFromJson(val[U("silenced")]));
    }
    if(val.has_field(U("type")))
    {
        setType(ModelBase::stringFromJson(val[U("type")]));
    }
    if(val.has_field(U("user_id")))
    {
        setUserId(ModelBase::int32_tFromJson(val[U("user_id")]));
    }
}

void NotificationUserTypeResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_SilencedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("silenced"), m_Silenced));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("type"), m_Type));
        
    }
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("user_id"), m_User_id));
    }
}

void NotificationUserTypeResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("silenced")))
    {
        setSilenced(ModelBase::boolFromHttpContent(multipart->getContent(U("silenced"))));
    }
    if(multipart->hasContent(U("type")))
    {
        setType(ModelBase::stringFromHttpContent(multipart->getContent(U("type"))));
    }
    if(multipart->hasContent(U("user_id")))
    {
        setUserId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("user_id"))));
    }
}

bool NotificationUserTypeResource::getSilenced() const
{
    return m_Silenced;
}


void NotificationUserTypeResource::setSilenced(bool value)
{
    m_Silenced = value;
    m_SilencedIsSet = true;
}
bool NotificationUserTypeResource::silencedIsSet() const
{
    return m_SilencedIsSet;
}

void NotificationUserTypeResource::unsetSilenced()
{
    m_SilencedIsSet = false;
}

utility::string_t NotificationUserTypeResource::getType() const
{
    return m_Type;
}


void NotificationUserTypeResource::setType(utility::string_t value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool NotificationUserTypeResource::typeIsSet() const
{
    return m_TypeIsSet;
}

void NotificationUserTypeResource::unsetType()
{
    m_TypeIsSet = false;
}

int32_t NotificationUserTypeResource::getUserId() const
{
    return m_User_id;
}


void NotificationUserTypeResource::setUserId(int32_t value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}
bool NotificationUserTypeResource::userIdIsSet() const
{
    return m_User_idIsSet;
}

void NotificationUserTypeResource::unsetUser_id()
{
    m_User_idIsSet = false;
}

}
}
}
}

