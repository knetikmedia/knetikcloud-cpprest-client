/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * CacheClearEvent.h
 *
 * 
 */

#ifndef CacheClearEvent_H_
#define CacheClearEvent_H_


#include "ModelBase.h"

#include "BroadcastableEvent.h"
#include <cpprest/details/basic_types.h>
#include "Object.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  CacheClearEvent
    : public ModelBase
{
public:
    CacheClearEvent();
    virtual ~CacheClearEvent();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CacheClearEvent members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getClient() const;
    void setClient(utility::string_t value);
    bool clientIsSet() const;
    void unsetClient();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCustomer() const;
    void setCustomer(utility::string_t value);
    bool customerIsSet() const;
    void unsetCustomer();
    /// <summary>
    /// 
    /// </summary>
    bool getDoNotBroadcast() const;
    void setDoNotBroadcast(bool value);
    bool do_not_broadcastIsSet() const;
    void unsetDo_not_broadcast();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSection() const;
    void setSection(utility::string_t value);
    bool sectionIsSet() const;
    void unsetSection();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Object> getSource() const;
    void setSource(std::shared_ptr<Object> value);
    bool sourceIsSet() const;
    void unsetSource();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSpecifics() const;
    void setSpecifics(utility::string_t value);
    bool specificsIsSet() const;
    void unsetSpecifics();
    /// <summary>
    /// 
    /// </summary>
    bool getSynchronous() const;
    void setSynchronous(bool value);
    bool synchronousIsSet() const;
    void unsetSynchronous();
    /// <summary>
    /// 
    /// </summary>
    int64_t getTimestamp() const;
    void setTimestamp(int64_t value);
    bool timestampIsSet() const;
    void unsetTimestamp();
    /// <summary>
    /// The type of the event. Used for polymorphic type recognition and thus must match an expected type
    /// </summary>
    utility::string_t getType() const;
    void setType(utility::string_t value);
    
protected:
    utility::string_t m_Client;
    bool m_ClientIsSet;
utility::string_t m_Customer;
    bool m_CustomerIsSet;
bool m_Do_not_broadcast;
    bool m_Do_not_broadcastIsSet;
utility::string_t m_Section;
    bool m_SectionIsSet;
std::shared_ptr<Object> m_Source;
    bool m_SourceIsSet;
utility::string_t m_Specifics;
    bool m_SpecificsIsSet;
bool m_Synchronous;
    bool m_SynchronousIsSet;
int64_t m_Timestamp;
    bool m_TimestampIsSet;
utility::string_t m_Type;
    };

}
}
}
}

#endif /* CacheClearEvent_H_ */
