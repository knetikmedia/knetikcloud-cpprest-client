/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "GroupResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

GroupResource::GroupResource()
{
    m_Additional_propertiesIsSet = false;
    m_Description = U("");
    m_DescriptionIsSet = false;
    m_Member_count = 0;
    m_Member_countIsSet = false;
    m_Message_of_the_day = U("");
    m_Message_of_the_dayIsSet = false;
    m_Name = U("");
    m_Parent = U("");
    m_ParentIsSet = false;
    m_Status = U("");
    m_Sub_member_count = 0;
    m_Sub_member_countIsSet = false;
    m_Template = U("");
    m_TemplateIsSet = false;
    m_Unique_name = U("");
}

GroupResource::~GroupResource()
{
}

void GroupResource::validate()
{
    // TODO: implement validation
}

web::json::value GroupResource::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Additional_properties )
        {
            web::json::value tmp = web::json::value::object();
            tmp[U("key")] = ModelBase::toJson(item.first);
            tmp[U("value")] = ModelBase::toJson(item.second);
            jsonArray.push_back(tmp);
        }
        if(jsonArray.size() > 0)
        {
            val[U("additional_properties")] = web::json::value::array(jsonArray);
        }
    }
    if(m_DescriptionIsSet)
    {
        val[U("description")] = ModelBase::toJson(m_Description);
    }
    if(m_Member_countIsSet)
    {
        val[U("member_count")] = ModelBase::toJson(m_Member_count);
    }
    if(m_Message_of_the_dayIsSet)
    {
        val[U("message_of_the_day")] = ModelBase::toJson(m_Message_of_the_day);
    }
    val[U("name")] = ModelBase::toJson(m_Name);
    if(m_ParentIsSet)
    {
        val[U("parent")] = ModelBase::toJson(m_Parent);
    }
    val[U("status")] = ModelBase::toJson(m_Status);
    if(m_Sub_member_countIsSet)
    {
        val[U("sub_member_count")] = ModelBase::toJson(m_Sub_member_count);
    }
    if(m_TemplateIsSet)
    {
        val[U("template")] = ModelBase::toJson(m_Template);
    }
    val[U("unique_name")] = ModelBase::toJson(m_Unique_name);

    return val;
}

void GroupResource::fromJson(web::json::value& val)
{
    {
        m_Additional_properties.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("additional_properties")))
        {
        for( auto& item : val[U("additional_properties")].as_array() )
        {  
            utility::string_t key;
            if(item.has_field(U("key")))
            {
                key = ModelBase::stringFromJson(item[U("key")]);
            }
            if(item.is_null())
            {
                m_Additional_properties.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, std::shared_ptr<Property>(nullptr) ));
            }
            else
            {
                std::shared_ptr<Property> newItem(new Property());
                newItem->fromJson(item[U("value")]);
                m_Additional_properties.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, newItem ));
            }
        }
        }
    }
    if(val.has_field(U("description")))
    {
        setDescription(ModelBase::stringFromJson(val[U("description")]));
    }
    if(val.has_field(U("member_count")))
    {
        setMemberCount(ModelBase::int32_tFromJson(val[U("member_count")]));
    }
    if(val.has_field(U("message_of_the_day")))
    {
        setMessageOfTheDay(ModelBase::stringFromJson(val[U("message_of_the_day")]));
    }
    setName(ModelBase::stringFromJson(val[U("name")]));
    if(val.has_field(U("parent")))
    {
        setParent(ModelBase::stringFromJson(val[U("parent")]));
    }
    setStatus(ModelBase::stringFromJson(val[U("status")]));
    if(val.has_field(U("sub_member_count")))
    {
        setSubMemberCount(ModelBase::int32_tFromJson(val[U("sub_member_count")]));
    }
    if(val.has_field(U("template")))
    {
        setTemplate(ModelBase::stringFromJson(val[U("template")]));
    }
    setUniqueName(ModelBase::stringFromJson(val[U("unique_name")]));
}

void GroupResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Additional_properties )
        {
            web::json::value tmp = web::json::value::object();
            tmp[U("key")] = ModelBase::toJson(item.first);
            tmp[U("value")] = ModelBase::toJson(item.second);
            jsonArray.push_back(tmp);
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("additional_properties"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("description"), m_Description));
        
    }
    if(m_Member_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("member_count"), m_Member_count));
    }
    if(m_Message_of_the_dayIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("message_of_the_day"), m_Message_of_the_day));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    if(m_ParentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("parent"), m_Parent));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("status"), m_Status));
    if(m_Sub_member_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("sub_member_count"), m_Sub_member_count));
    }
    if(m_TemplateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("template"), m_Template));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("unique_name"), m_Unique_name));
}

void GroupResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        m_Additional_properties.clear();
        if(multipart->hasContent(U("additional_properties")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("additional_properties"))));
        for( auto& item : jsonArray.as_array() )
        {
            utility::string_t key;
            if(item.has_field(U("key")))
            {
                key = ModelBase::stringFromJson(item[U("key")]);
            }
            if(item.is_null())
            {
                m_Additional_properties.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, std::shared_ptr<Property>(nullptr) ));
            }
            else
            {
                std::shared_ptr<Property> newItem(new Property());
                newItem->fromJson(item[U("value")]);
                m_Additional_properties.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, newItem ));
            }
        }
        }
    }
    if(multipart->hasContent(U("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("description"))));
    }
    if(multipart->hasContent(U("member_count")))
    {
        setMemberCount(ModelBase::int32_tFromHttpContent(multipart->getContent(U("member_count"))));
    }
    if(multipart->hasContent(U("message_of_the_day")))
    {
        setMessageOfTheDay(ModelBase::stringFromHttpContent(multipart->getContent(U("message_of_the_day"))));
    }
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    if(multipart->hasContent(U("parent")))
    {
        setParent(ModelBase::stringFromHttpContent(multipart->getContent(U("parent"))));
    }
    setStatus(ModelBase::stringFromHttpContent(multipart->getContent(U("status"))));
    if(multipart->hasContent(U("sub_member_count")))
    {
        setSubMemberCount(ModelBase::int32_tFromHttpContent(multipart->getContent(U("sub_member_count"))));
    }
    if(multipart->hasContent(U("template")))
    {
        setTemplate(ModelBase::stringFromHttpContent(multipart->getContent(U("template"))));
    }
    setUniqueName(ModelBase::stringFromHttpContent(multipart->getContent(U("unique_name"))));
}

std::map<utility::string_t, std::shared_ptr<Property>>& GroupResource::getAdditionalProperties()
{
    return m_Additional_properties;
}

void GroupResource::setAdditionalProperties(std::map<utility::string_t, std::shared_ptr<Property>> value)
{
    m_Additional_properties = value;
    m_Additional_propertiesIsSet = true;
}
bool GroupResource::additionalPropertiesIsSet() const
{
    return m_Additional_propertiesIsSet;
}

void GroupResource::unsetAdditional_properties()
{
    m_Additional_propertiesIsSet = false;
}

utility::string_t GroupResource::getDescription() const
{
    return m_Description;
}


void GroupResource::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool GroupResource::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void GroupResource::unsetDescription()
{
    m_DescriptionIsSet = false;
}

int32_t GroupResource::getMemberCount() const
{
    return m_Member_count;
}


void GroupResource::setMemberCount(int32_t value)
{
    m_Member_count = value;
    m_Member_countIsSet = true;
}
bool GroupResource::memberCountIsSet() const
{
    return m_Member_countIsSet;
}

void GroupResource::unsetMember_count()
{
    m_Member_countIsSet = false;
}

utility::string_t GroupResource::getMessageOfTheDay() const
{
    return m_Message_of_the_day;
}


void GroupResource::setMessageOfTheDay(utility::string_t value)
{
    m_Message_of_the_day = value;
    m_Message_of_the_dayIsSet = true;
}
bool GroupResource::messageOfTheDayIsSet() const
{
    return m_Message_of_the_dayIsSet;
}

void GroupResource::unsetMessage_of_the_day()
{
    m_Message_of_the_dayIsSet = false;
}

utility::string_t GroupResource::getName() const
{
    return m_Name;
}


void GroupResource::setName(utility::string_t value)
{
    m_Name = value;
    
}
utility::string_t GroupResource::getParent() const
{
    return m_Parent;
}


void GroupResource::setParent(utility::string_t value)
{
    m_Parent = value;
    m_ParentIsSet = true;
}
bool GroupResource::parentIsSet() const
{
    return m_ParentIsSet;
}

void GroupResource::unsetParent()
{
    m_ParentIsSet = false;
}

utility::string_t GroupResource::getStatus() const
{
    return m_Status;
}


void GroupResource::setStatus(utility::string_t value)
{
    m_Status = value;
    
}
int32_t GroupResource::getSubMemberCount() const
{
    return m_Sub_member_count;
}


void GroupResource::setSubMemberCount(int32_t value)
{
    m_Sub_member_count = value;
    m_Sub_member_countIsSet = true;
}
bool GroupResource::subMemberCountIsSet() const
{
    return m_Sub_member_countIsSet;
}

void GroupResource::unsetSub_member_count()
{
    m_Sub_member_countIsSet = false;
}

utility::string_t GroupResource::getTemplate() const
{
    return m_Template;
}


void GroupResource::setTemplate(utility::string_t value)
{
    m_Template = value;
    m_TemplateIsSet = true;
}
bool GroupResource::templateIsSet() const
{
    return m_TemplateIsSet;
}

void GroupResource::unsetTemplate()
{
    m_TemplateIsSet = false;
}

utility::string_t GroupResource::getUniqueName() const
{
    return m_Unique_name;
}


void GroupResource::setUniqueName(utility::string_t value)
{
    m_Unique_name = value;
    
}
}
}
}
}

