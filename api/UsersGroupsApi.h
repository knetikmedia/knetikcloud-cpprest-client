/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * UsersGroupsApi.h
 *
 * 
 */

#ifndef UsersGroupsApi_H_
#define UsersGroupsApi_H_


#include "ApiClient.h"

#include "GroupMemberResource.h"
#include "GroupResource.h"
#include "PageResource«GroupMemberResource».h"
#include "PageResource«GroupResource».h"
#include "PageResource«TemplateResource».h"
#include "Result.h"
#include "TemplateResource.h"
#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  UsersGroupsApi
{
public:
    UsersGroupsApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~UsersGroupsApi();
    /// <summary>
    /// Adds a new member to the group
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="uniqueName">The group unique name</param>/// <param name="username">The username of a user to add to the group</param>
    pplx::task<std::shared_ptr<GroupMemberResource>> addMemberToGroup(utility::string_t uniqueName, std::shared_ptr<GroupMemberResource> username);
    /// <summary>
    /// Create a group
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="groupResource">The new group (optional)</param>
    pplx::task<std::shared_ptr<GroupResource>> createGroup(std::shared_ptr<GroupResource> groupResource);
    /// <summary>
    /// Create a group template
    /// </summary>
    /// <remarks>
    /// Group Templates define a type of group and the properties they have
    /// </remarks>
    /// <param name="groupTemplateResource">The group template resource object (optional)</param>
    pplx::task<std::shared_ptr<TemplateResource>> createGroupTemplate(std::shared_ptr<TemplateResource> groupTemplateResource);
    /// <summary>
    /// Removes a group from the system IF no resources are attached to it
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="uniqueName">The group unique name</param>
    pplx::task<void> deleteGroup(utility::string_t uniqueName);
    /// <summary>
    /// Delete a group template
    /// </summary>
    /// <remarks>
    /// If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
    /// </remarks>
    /// <param name="id">The id of the template</param>/// <param name="cascade">The value needed to delete used templates (optional)</param>
    pplx::task<void> deleteGroupTemplate(utility::string_t id, utility::string_t cascade);
    /// <summary>
    /// Loads a specific group&#39;s details
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="uniqueName">The group unique name</param>
    pplx::task<std::shared_ptr<GroupResource>> getGroup(utility::string_t uniqueName);
    /// <summary>
    /// Get a user from a group
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="uniqueName">The group unique name</param>/// <param name="userId">The id of the user</param>
    pplx::task<std::shared_ptr<GroupMemberResource>> getGroupMember(utility::string_t uniqueName, int32_t userId);
    /// <summary>
    /// Lists members of the group
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="uniqueName">The group unique name</param>/// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
    pplx::task<std::shared_ptr<PageResource«GroupMemberResource»>> getGroupMembers(utility::string_t uniqueName, int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// Get a single group template
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">The id of the template</param>
    pplx::task<std::shared_ptr<TemplateResource>> getGroupTemplate(utility::string_t id);
    /// <summary>
    /// List and search group templates
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>/// <param name="order">a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
    pplx::task<std::shared_ptr<PageResource«TemplateResource»>> getGroupTemplates(int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// List groups a user is in
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="userId">The id of the user</param>
    pplx::task<std::vector<utility::string_t>> getGroupsForUser(int32_t userId);
    /// <summary>
    /// Removes a user from a group
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="uniqueName">The group unique name</param>/// <param name="userId">The id of the user to remove</param>
    pplx::task<void> removeGroupMember(utility::string_t uniqueName, int32_t userId);
    /// <summary>
    /// Update a group
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="uniqueName">The group unique name</param>/// <param name="groupResource">The updated group (optional)</param>
    pplx::task<void> updateGroup(utility::string_t uniqueName, std::shared_ptr<GroupResource> groupResource);
    /// <summary>
    /// Change a user&#39;s status
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="uniqueName">The group unique name</param>/// <param name="userId">The user id of the member to modify</param>/// <param name="status">The new status for the user</param>
    pplx::task<void> updateGroupMemberStatus(utility::string_t uniqueName, int32_t userId, utility::string_t status);
    /// <summary>
    /// Update a group template
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">The id of the template</param>/// <param name="groupTemplateResource">The group template resource object (optional)</param>
    pplx::task<std::shared_ptr<TemplateResource>> updateGroupTemplate(utility::string_t id, std::shared_ptr<TemplateResource> groupTemplateResource);
    /// <summary>
    /// List and search groups
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="filterName">Filter for groups whose name starts with provided string (optional)</param>/// <param name="filterUniqueName">Filter for groups whose unique_name starts with provided string (optional)</param>/// <param name="filterParent">Filter for groups whose parent equals provided string (optional)</param>/// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to name:ASC)</param>
    pplx::task<std::shared_ptr<PageResource«GroupResource»>> updateGroups(utility::string_t filterName, utility::string_t filterUniqueName, utility::string_t filterParent, int32_t size, int32_t page, utility::string_t order);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* UsersGroupsApi_H_ */

