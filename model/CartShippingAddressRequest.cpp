/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "CartShippingAddressRequest.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

CartShippingAddressRequest::CartShippingAddressRequest()
{
    m_City = U("");
    m_CityIsSet = false;
    m_Country_code_iso3 = U("");
    m_Country_code_iso3IsSet = false;
    m_Email = U("");
    m_EmailIsSet = false;
    m_First_name = U("");
    m_First_nameIsSet = false;
    m_Last_name = U("");
    m_Last_nameIsSet = false;
    m_Name_prefix = U("");
    m_Name_prefixIsSet = false;
    m_Order_notes = U("");
    m_Order_notesIsSet = false;
    m_Phone_number = U("");
    m_Phone_numberIsSet = false;
    m_Postal_state_code = U("");
    m_Postal_state_codeIsSet = false;
    m_Shipping_address_line1 = U("");
    m_Shipping_address_line1IsSet = false;
    m_Shipping_address_line2 = U("");
    m_Shipping_address_line2IsSet = false;
    m_Zip = U("");
    m_ZipIsSet = false;
    
}

CartShippingAddressRequest::~CartShippingAddressRequest()
{
}

void CartShippingAddressRequest::validate()
{
    // TODO: implement validation
}

web::json::value CartShippingAddressRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CityIsSet)
    {
        val[U("city")] = ModelBase::toJson(m_City);
    }
    if(m_Country_code_iso3IsSet)
    {
        val[U("country_code_iso3")] = ModelBase::toJson(m_Country_code_iso3);
    }
    if(m_EmailIsSet)
    {
        val[U("email")] = ModelBase::toJson(m_Email);
    }
    if(m_First_nameIsSet)
    {
        val[U("first_name")] = ModelBase::toJson(m_First_name);
    }
    if(m_Last_nameIsSet)
    {
        val[U("last_name")] = ModelBase::toJson(m_Last_name);
    }
    if(m_Name_prefixIsSet)
    {
        val[U("name_prefix")] = ModelBase::toJson(m_Name_prefix);
    }
    if(m_Order_notesIsSet)
    {
        val[U("order_notes")] = ModelBase::toJson(m_Order_notes);
    }
    if(m_Phone_numberIsSet)
    {
        val[U("phone_number")] = ModelBase::toJson(m_Phone_number);
    }
    if(m_Postal_state_codeIsSet)
    {
        val[U("postal_state_code")] = ModelBase::toJson(m_Postal_state_code);
    }
    if(m_Shipping_address_line1IsSet)
    {
        val[U("shipping_address_line1")] = ModelBase::toJson(m_Shipping_address_line1);
    }
    if(m_Shipping_address_line2IsSet)
    {
        val[U("shipping_address_line2")] = ModelBase::toJson(m_Shipping_address_line2);
    }
    if(m_ZipIsSet)
    {
        val[U("zip")] = ModelBase::toJson(m_Zip);
    }
    

    return val;
}

void CartShippingAddressRequest::fromJson(web::json::value& val)
{
    if(val.has_field(U("city")))
    {
        setCity(ModelBase::stringFromJson(val[U("city")]));
        
    }
    if(val.has_field(U("country_code_iso3")))
    {
        setCountryCodeIso3(ModelBase::stringFromJson(val[U("country_code_iso3")]));
        
    }
    if(val.has_field(U("email")))
    {
        setEmail(ModelBase::stringFromJson(val[U("email")]));
        
    }
    if(val.has_field(U("first_name")))
    {
        setFirstName(ModelBase::stringFromJson(val[U("first_name")]));
        
    }
    if(val.has_field(U("last_name")))
    {
        setLastName(ModelBase::stringFromJson(val[U("last_name")]));
        
    }
    if(val.has_field(U("name_prefix")))
    {
        setNamePrefix(ModelBase::stringFromJson(val[U("name_prefix")]));
        
    }
    if(val.has_field(U("order_notes")))
    {
        setOrderNotes(ModelBase::stringFromJson(val[U("order_notes")]));
        
    }
    if(val.has_field(U("phone_number")))
    {
        setPhoneNumber(ModelBase::stringFromJson(val[U("phone_number")]));
        
    }
    if(val.has_field(U("postal_state_code")))
    {
        setPostalStateCode(ModelBase::stringFromJson(val[U("postal_state_code")]));
        
    }
    if(val.has_field(U("shipping_address_line1")))
    {
        setShippingAddressLine1(ModelBase::stringFromJson(val[U("shipping_address_line1")]));
        
    }
    if(val.has_field(U("shipping_address_line2")))
    {
        setShippingAddressLine2(ModelBase::stringFromJson(val[U("shipping_address_line2")]));
        
    }
    if(val.has_field(U("zip")))
    {
        setZip(ModelBase::stringFromJson(val[U("zip")]));
        
    }
    
}

void CartShippingAddressRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_CityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("city"), m_City));
        
    }
    if(m_Country_code_iso3IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("country_code_iso3"), m_Country_code_iso3));
        
    }
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("email"), m_Email));
        
    }
    if(m_First_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("first_name"), m_First_name));
        
    }
    if(m_Last_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("last_name"), m_Last_name));
        
    }
    if(m_Name_prefixIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name_prefix"), m_Name_prefix));
        
    }
    if(m_Order_notesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("order_notes"), m_Order_notes));
        
    }
    if(m_Phone_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("phone_number"), m_Phone_number));
        
    }
    if(m_Postal_state_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("postal_state_code"), m_Postal_state_code));
        
    }
    if(m_Shipping_address_line1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("shipping_address_line1"), m_Shipping_address_line1));
        
    }
    if(m_Shipping_address_line2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("shipping_address_line2"), m_Shipping_address_line2));
        
    }
    if(m_ZipIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("zip"), m_Zip));
        
    }
    
}

void CartShippingAddressRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("city")))
    {
        setCity(ModelBase::stringFromHttpContent(multipart->getContent(U("city"))));
        
    }
    if(multipart->hasContent(U("country_code_iso3")))
    {
        setCountryCodeIso3(ModelBase::stringFromHttpContent(multipart->getContent(U("country_code_iso3"))));
        
    }
    if(multipart->hasContent(U("email")))
    {
        setEmail(ModelBase::stringFromHttpContent(multipart->getContent(U("email"))));
        
    }
    if(multipart->hasContent(U("first_name")))
    {
        setFirstName(ModelBase::stringFromHttpContent(multipart->getContent(U("first_name"))));
        
    }
    if(multipart->hasContent(U("last_name")))
    {
        setLastName(ModelBase::stringFromHttpContent(multipart->getContent(U("last_name"))));
        
    }
    if(multipart->hasContent(U("name_prefix")))
    {
        setNamePrefix(ModelBase::stringFromHttpContent(multipart->getContent(U("name_prefix"))));
        
    }
    if(multipart->hasContent(U("order_notes")))
    {
        setOrderNotes(ModelBase::stringFromHttpContent(multipart->getContent(U("order_notes"))));
        
    }
    if(multipart->hasContent(U("phone_number")))
    {
        setPhoneNumber(ModelBase::stringFromHttpContent(multipart->getContent(U("phone_number"))));
        
    }
    if(multipart->hasContent(U("postal_state_code")))
    {
        setPostalStateCode(ModelBase::stringFromHttpContent(multipart->getContent(U("postal_state_code"))));
        
    }
    if(multipart->hasContent(U("shipping_address_line1")))
    {
        setShippingAddressLine1(ModelBase::stringFromHttpContent(multipart->getContent(U("shipping_address_line1"))));
        
    }
    if(multipart->hasContent(U("shipping_address_line2")))
    {
        setShippingAddressLine2(ModelBase::stringFromHttpContent(multipart->getContent(U("shipping_address_line2"))));
        
    }
    if(multipart->hasContent(U("zip")))
    {
        setZip(ModelBase::stringFromHttpContent(multipart->getContent(U("zip"))));
        
    }
    
}


utility::string_t CartShippingAddressRequest::getCity() const
{
    return m_City;
}
void CartShippingAddressRequest::setCity(utility::string_t value)
{
    m_City = value;
    m_CityIsSet = true;
}
bool CartShippingAddressRequest::cityIsSet() const
{
    return m_CityIsSet;
}
void CartShippingAddressRequest::unsetCity()
{
    m_CityIsSet = false;
}
utility::string_t CartShippingAddressRequest::getCountryCodeIso3() const
{
    return m_Country_code_iso3;
}
void CartShippingAddressRequest::setCountryCodeIso3(utility::string_t value)
{
    m_Country_code_iso3 = value;
    m_Country_code_iso3IsSet = true;
}
bool CartShippingAddressRequest::country_code_iso3IsSet() const
{
    return m_Country_code_iso3IsSet;
}
void CartShippingAddressRequest::unsetCountry_code_iso3()
{
    m_Country_code_iso3IsSet = false;
}
utility::string_t CartShippingAddressRequest::getEmail() const
{
    return m_Email;
}
void CartShippingAddressRequest::setEmail(utility::string_t value)
{
    m_Email = value;
    m_EmailIsSet = true;
}
bool CartShippingAddressRequest::emailIsSet() const
{
    return m_EmailIsSet;
}
void CartShippingAddressRequest::unsetEmail()
{
    m_EmailIsSet = false;
}
utility::string_t CartShippingAddressRequest::getFirstName() const
{
    return m_First_name;
}
void CartShippingAddressRequest::setFirstName(utility::string_t value)
{
    m_First_name = value;
    m_First_nameIsSet = true;
}
bool CartShippingAddressRequest::first_nameIsSet() const
{
    return m_First_nameIsSet;
}
void CartShippingAddressRequest::unsetFirst_name()
{
    m_First_nameIsSet = false;
}
utility::string_t CartShippingAddressRequest::getLastName() const
{
    return m_Last_name;
}
void CartShippingAddressRequest::setLastName(utility::string_t value)
{
    m_Last_name = value;
    m_Last_nameIsSet = true;
}
bool CartShippingAddressRequest::last_nameIsSet() const
{
    return m_Last_nameIsSet;
}
void CartShippingAddressRequest::unsetLast_name()
{
    m_Last_nameIsSet = false;
}
utility::string_t CartShippingAddressRequest::getNamePrefix() const
{
    return m_Name_prefix;
}
void CartShippingAddressRequest::setNamePrefix(utility::string_t value)
{
    m_Name_prefix = value;
    m_Name_prefixIsSet = true;
}
bool CartShippingAddressRequest::name_prefixIsSet() const
{
    return m_Name_prefixIsSet;
}
void CartShippingAddressRequest::unsetName_prefix()
{
    m_Name_prefixIsSet = false;
}
utility::string_t CartShippingAddressRequest::getOrderNotes() const
{
    return m_Order_notes;
}
void CartShippingAddressRequest::setOrderNotes(utility::string_t value)
{
    m_Order_notes = value;
    m_Order_notesIsSet = true;
}
bool CartShippingAddressRequest::order_notesIsSet() const
{
    return m_Order_notesIsSet;
}
void CartShippingAddressRequest::unsetOrder_notes()
{
    m_Order_notesIsSet = false;
}
utility::string_t CartShippingAddressRequest::getPhoneNumber() const
{
    return m_Phone_number;
}
void CartShippingAddressRequest::setPhoneNumber(utility::string_t value)
{
    m_Phone_number = value;
    m_Phone_numberIsSet = true;
}
bool CartShippingAddressRequest::phone_numberIsSet() const
{
    return m_Phone_numberIsSet;
}
void CartShippingAddressRequest::unsetPhone_number()
{
    m_Phone_numberIsSet = false;
}
utility::string_t CartShippingAddressRequest::getPostalStateCode() const
{
    return m_Postal_state_code;
}
void CartShippingAddressRequest::setPostalStateCode(utility::string_t value)
{
    m_Postal_state_code = value;
    m_Postal_state_codeIsSet = true;
}
bool CartShippingAddressRequest::postal_state_codeIsSet() const
{
    return m_Postal_state_codeIsSet;
}
void CartShippingAddressRequest::unsetPostal_state_code()
{
    m_Postal_state_codeIsSet = false;
}
utility::string_t CartShippingAddressRequest::getShippingAddressLine1() const
{
    return m_Shipping_address_line1;
}
void CartShippingAddressRequest::setShippingAddressLine1(utility::string_t value)
{
    m_Shipping_address_line1 = value;
    m_Shipping_address_line1IsSet = true;
}
bool CartShippingAddressRequest::shipping_address_line1IsSet() const
{
    return m_Shipping_address_line1IsSet;
}
void CartShippingAddressRequest::unsetShipping_address_line1()
{
    m_Shipping_address_line1IsSet = false;
}
utility::string_t CartShippingAddressRequest::getShippingAddressLine2() const
{
    return m_Shipping_address_line2;
}
void CartShippingAddressRequest::setShippingAddressLine2(utility::string_t value)
{
    m_Shipping_address_line2 = value;
    m_Shipping_address_line2IsSet = true;
}
bool CartShippingAddressRequest::shipping_address_line2IsSet() const
{
    return m_Shipping_address_line2IsSet;
}
void CartShippingAddressRequest::unsetShipping_address_line2()
{
    m_Shipping_address_line2IsSet = false;
}
utility::string_t CartShippingAddressRequest::getZip() const
{
    return m_Zip;
}
void CartShippingAddressRequest::setZip(utility::string_t value)
{
    m_Zip = value;
    m_ZipIsSet = true;
}
bool CartShippingAddressRequest::zipIsSet() const
{
    return m_ZipIsSet;
}
void CartShippingAddressRequest::unsetZip()
{
    m_ZipIsSet = false;
}

}
}
}
}

