/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * ImagePropertyDefinitionResource.h
 *
 * 
 */

#ifndef ImagePropertyDefinitionResource_H_
#define ImagePropertyDefinitionResource_H_


#include "ModelBase.h"

#include "PropertyFieldListResource.h"
#include <cpprest/details/basic_types.h>
#include "PropertyDefinitionResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ImagePropertyDefinitionResource
    : public ModelBase
{
public:
    ImagePropertyDefinitionResource();
    virtual ~ImagePropertyDefinitionResource();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ImagePropertyDefinitionResource members

    /// <summary>
    /// A list of the fields on both the property definition and property of this type
    /// </summary>
    std::shared_ptr<PropertyFieldListResource> getFieldList() const;
    void setFieldList(std::shared_ptr<PropertyFieldListResource> value);
    bool field_listIsSet() const;
    void unsetField_list();
    /// <summary>
    /// The name of the property
    /// </summary>
    utility::string_t getName() const;
    void setName(utility::string_t value);
        /// <summary>
    /// Whether the property is required
    /// </summary>
    bool getRequired() const;
    void setRequired(bool value);
        /// <summary>
    /// The type of the property. Used for polymorphic type recognition and thus must match an expected type with additional properties.
    /// </summary>
    utility::string_t getType() const;
    void setType(utility::string_t value);
        /// <summary>
    /// If provided, a file type that the property must match
    /// </summary>
    utility::string_t getFileType() const;
    void setFileType(utility::string_t value);
    bool file_typeIsSet() const;
    void unsetFile_type();
    /// <summary>
    /// If provided, the maximum height of the image
    /// </summary>
    int32_t getMaxHeight() const;
    void setMaxHeight(int32_t value);
    bool max_heightIsSet() const;
    void unsetMax_height();
    /// <summary>
    /// If provided, the maximum width of the image
    /// </summary>
    int32_t getMaxWidth() const;
    void setMaxWidth(int32_t value);
    bool max_widthIsSet() const;
    void unsetMax_width();
    /// <summary>
    /// If provided, the minimum height of the image
    /// </summary>
    int32_t getMinHeight() const;
    void setMinHeight(int32_t value);
    bool min_heightIsSet() const;
    void unsetMin_height();
    /// <summary>
    /// If provided, the minimum width of the image
    /// </summary>
    int32_t getMinWidth() const;
    void setMinWidth(int32_t value);
    bool min_widthIsSet() const;
    void unsetMin_width();

protected:
    std::shared_ptr<PropertyFieldListResource> m_Field_list;
    bool m_Field_listIsSet;
utility::string_t m_Name;
    bool m_Required;
    utility::string_t m_Type;
    utility::string_t m_File_type;
    bool m_File_typeIsSet;
int32_t m_Max_height;
    bool m_Max_heightIsSet;
int32_t m_Max_width;
    bool m_Max_widthIsSet;
int32_t m_Min_height;
    bool m_Min_heightIsSet;
int32_t m_Min_width;
    bool m_Min_widthIsSet;
};

}
}
}
}

#endif /* ImagePropertyDefinitionResource_H_ */
