/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Batch.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

Batch::Batch()
{
    m_BatchIsSet = false;
    
}

Batch::~Batch()
{
}

void Batch::validate()
{
    // TODO: implement validation
}

web::json::value Batch::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Batch )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("batch")] = web::json::value::array(jsonArray);
        }
    }
    

    return val;
}

void Batch::fromJson(web::json::value& val)
{
    {
        m_Batch.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("batch")))
        {
        for( auto& item : val[U("batch")].as_array() )
        {
            
            if(item.is_null())
            {
                m_Batch.push_back( std::shared_ptr<BatchRequest>(nullptr) );
            }
            else
            {
                std::shared_ptr<BatchRequest> newItem(new BatchRequest());
                newItem->fromJson(item);
                m_Batch.push_back( newItem );
            }
            
        }
        }
    }
    
}

void Batch::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Batch )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("batch"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    
}

void Batch::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        m_Batch.clear();
        if(multipart->hasContent(U("batch")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("batch"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_Batch.push_back( std::shared_ptr<BatchRequest>(nullptr) );
            }
            else
            {
                std::shared_ptr<BatchRequest> newItem(new BatchRequest());
                newItem->fromJson(item);
                m_Batch.push_back( newItem );
            }
            
        }
        }
    }
    
}


std::vector<std::shared_ptr<BatchRequest>>& Batch::getBatch()
{
    return m_Batch;
}
bool Batch::batchIsSet() const
{
    return m_BatchIsSet;
}
void Batch::unsetBatch()
{
    m_BatchIsSet = false;
}

}
}
}
}

