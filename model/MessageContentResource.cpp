/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "MessageContentResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

MessageContentResource::MessageContentResource()
{
    m_Email = U("");
    m_EmailIsSet = false;
    m_Push = U("");
    m_PushIsSet = false;
    m_Sms = U("");
    m_SmsIsSet = false;
    m_Templated_emailIsSet = false;
    m_WebsocketIsSet = false;
}

MessageContentResource::~MessageContentResource()
{
}

void MessageContentResource::validate()
{
    // TODO: implement validation
}

web::json::value MessageContentResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_EmailIsSet)
    {
        val[U("email")] = ModelBase::toJson(m_Email);
    }
    if(m_PushIsSet)
    {
        val[U("push")] = ModelBase::toJson(m_Push);
    }
    if(m_SmsIsSet)
    {
        val[U("sms")] = ModelBase::toJson(m_Sms);
    }
    if(m_Templated_emailIsSet)
    {
        val[U("templated_email")] = ModelBase::toJson(m_Templated_email);
    }
    if(m_WebsocketIsSet)
    {
        val[U("websocket")] = ModelBase::toJson(m_Websocket);
    }

    return val;
}

void MessageContentResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("email")))
    {
        setEmail(ModelBase::stringFromJson(val[U("email")]));
    }
    if(val.has_field(U("push")))
    {
        setPush(ModelBase::stringFromJson(val[U("push")]));
    }
    if(val.has_field(U("sms")))
    {
        setSms(ModelBase::stringFromJson(val[U("sms")]));
    }
    if(val.has_field(U("templated_email")))
    {
        if(!val[U("templated_email")].is_null())
        {
            std::shared_ptr<TemplatedEmail> newItem(new TemplatedEmail());
            newItem->fromJson(val[U("templated_email")]);
            setTemplatedEmail( newItem );
        }
    }
    if(val.has_field(U("websocket")))
    {
        if(!val[U("websocket")].is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(val[U("websocket")]);
            setWebsocket( newItem );
        }
    }
}

void MessageContentResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("email"), m_Email));
        
    }
    if(m_PushIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("push"), m_Push));
        
    }
    if(m_SmsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("sms"), m_Sms));
        
    }
    if(m_Templated_emailIsSet)
    {
        if (m_Templated_email.get())
        {
            m_Templated_email->toMultipart(multipart, U("templated_email."));
        }
        
    }
    if(m_WebsocketIsSet)
    {
        if (m_Websocket.get())
        {
            m_Websocket->toMultipart(multipart, U("websocket."));
        }
        
    }
}

void MessageContentResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("email")))
    {
        setEmail(ModelBase::stringFromHttpContent(multipart->getContent(U("email"))));
    }
    if(multipart->hasContent(U("push")))
    {
        setPush(ModelBase::stringFromHttpContent(multipart->getContent(U("push"))));
    }
    if(multipart->hasContent(U("sms")))
    {
        setSms(ModelBase::stringFromHttpContent(multipart->getContent(U("sms"))));
    }
    if(multipart->hasContent(U("templated_email")))
    {
        if(multipart->hasContent(U("templated_email")))
        {
            std::shared_ptr<TemplatedEmail> newItem(new TemplatedEmail());
            newItem->fromMultiPart(multipart, U("templated_email."));
            setTemplatedEmail( newItem );
        }
    }
    if(multipart->hasContent(U("websocket")))
    {
        if(multipart->hasContent(U("websocket")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, U("websocket."));
            setWebsocket( newItem );
        }
    }
}

utility::string_t MessageContentResource::getEmail() const
{
    return m_Email;
}


void MessageContentResource::setEmail(utility::string_t value)
{
    m_Email = value;
    m_EmailIsSet = true;
}
bool MessageContentResource::emailIsSet() const
{
    return m_EmailIsSet;
}

void MessageContentResource::unsetEmail()
{
    m_EmailIsSet = false;
}

utility::string_t MessageContentResource::getPush() const
{
    return m_Push;
}


void MessageContentResource::setPush(utility::string_t value)
{
    m_Push = value;
    m_PushIsSet = true;
}
bool MessageContentResource::pushIsSet() const
{
    return m_PushIsSet;
}

void MessageContentResource::unsetPush()
{
    m_PushIsSet = false;
}

utility::string_t MessageContentResource::getSms() const
{
    return m_Sms;
}


void MessageContentResource::setSms(utility::string_t value)
{
    m_Sms = value;
    m_SmsIsSet = true;
}
bool MessageContentResource::smsIsSet() const
{
    return m_SmsIsSet;
}

void MessageContentResource::unsetSms()
{
    m_SmsIsSet = false;
}

std::shared_ptr<TemplatedEmail> MessageContentResource::getTemplatedEmail() const
{
    return m_Templated_email;
}


void MessageContentResource::setTemplatedEmail(std::shared_ptr<TemplatedEmail> value)
{
    m_Templated_email = value;
    m_Templated_emailIsSet = true;
}
bool MessageContentResource::templatedEmailIsSet() const
{
    return m_Templated_emailIsSet;
}

void MessageContentResource::unsetTemplated_email()
{
    m_Templated_emailIsSet = false;
}

std::shared_ptr<Object> MessageContentResource::getWebsocket() const
{
    return m_Websocket;
}


void MessageContentResource::setWebsocket(std::shared_ptr<Object> value)
{
    m_Websocket = value;
    m_WebsocketIsSet = true;
}
bool MessageContentResource::websocketIsSet() const
{
    return m_WebsocketIsSet;
}

void MessageContentResource::unsetWebsocket()
{
    m_WebsocketIsSet = false;
}

}
}
}
}

