/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * RewardCurrencyResource.h
 *
 * 
 */

#ifndef RewardCurrencyResource_H_
#define RewardCurrencyResource_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  RewardCurrencyResource
    : public ModelBase
{
public:
    RewardCurrencyResource();
    virtual ~RewardCurrencyResource();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// RewardCurrencyResource members

    /// <summary>
    /// The code of the currency type to give
    /// </summary>
    utility::string_t getCurrencyCode() const;
        void setCurrencyCode(utility::string_t value);
    /// <summary>
    /// The name of the currency reward to give.  Set by currency_code)
    /// </summary>
    utility::string_t getCurrencyName() const;
    bool currencyNameIsSet() const;
    void unsetCurrency_name();
    void setCurrencyName(utility::string_t value);
    /// <summary>
    /// The highest number (worst) rank to give the reward to. Must be greater than or equal to minRank
    /// </summary>
    int32_t getMaxRank() const;
        void setMaxRank(int32_t value);
    /// <summary>
    /// The lowest number (best) rank to give the reward to. Must be greater than zero
    /// </summary>
    int32_t getMinRank() const;
        void setMinRank(int32_t value);
    /// <summary>
    /// True if the value is actually a percentage of the intake
    /// </summary>
    bool getPercent() const;
        void setPercent(bool value);
    /// <summary>
    /// The amount of currency to give. For percentage values, 0.5 is 50%
    /// </summary>
    double getValue() const;
        void setValue(double value);

protected:
    utility::string_t m_Currency_code;
        utility::string_t m_Currency_name;
    bool m_Currency_nameIsSet;
    int32_t m_Max_rank;
        int32_t m_Min_rank;
        bool m_Percent;
        double m_Value;
    };

}
}
}
}

#endif /* RewardCurrencyResource_H_ */
