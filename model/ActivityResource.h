/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * ActivityResource.h
 *
 * Represents an activity that can be parameterized and tracked through metrics (scores, etc)
 */

#ifndef ActivityResource_H_
#define ActivityResource_H_


#include "ModelBase.h"

#include "ActivityEntitlementResource.h"
#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>
#include "Property.h"
#include "RewardSetResource.h"
#include "AvailableSettingResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// Represents an activity that can be parameterized and tracked through metrics (scores, etc)
/// </summary>
class  ActivityResource
    : public ModelBase
{
public:
    ActivityResource();
    virtual ~ActivityResource();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ActivityResource members

    /// <summary>
    /// A map of additional properties keyed on the property name. Used to further describe an activity. While settings will vary from one activity occurrence (a game) to another, additional properties are shared by all the occurrences of this activity. Ex: Activity Logo, Disclaimer, Greeting, etc. Validated against template if one exists for activities
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<Property>>& getAdditionalProperties();
    bool additionalPropertiesIsSet() const;
    void unsetAdditional_properties();
    void setAdditionalProperties(std::map<utility::string_t, std::shared_ptr<Property>> value);
    /// <summary>
    /// The date/time this resource was created in seconds since unix epoch
    /// </summary>
    int64_t getCreatedDate() const;
    bool createdDateIsSet() const;
    void unsetCreated_date();
    void setCreatedDate(int64_t value);
    /// <summary>
    /// The list of items that can be used for entitlement (wager amounts/etc)
    /// </summary>
    std::vector<std::shared_ptr<ActivityEntitlementResource>>& getEntitlements();
    bool entitlementsIsSet() const;
    void unsetEntitlements();
    void setEntitlements(std::vector<std::shared_ptr<ActivityEntitlementResource>> value);
    /// <summary>
    /// The unique ID for that resource
    /// </summary>
    int64_t getId() const;
    bool idIsSet() const;
    void unsetId();
    void setId(int64_t value);
    /// <summary>
    /// Details about how to launch the activity
    /// </summary>
    utility::string_t getLaunch() const;
    bool launchIsSet() const;
    void unsetLaunch();
    void setLaunch(utility::string_t value);
    /// <summary>
    /// The strategy for calculating the leaderboard. No strategy means no leaderboard for the top level context. Value MUST come from the list of available strategies from the Leaderboard Service
    /// </summary>
    utility::string_t getLeaderboardStrategy() const;
    bool leaderboardStrategyIsSet() const;
    void unsetLeaderboard_strategy();
    void setLeaderboardStrategy(utility::string_t value);
    /// <summary>
    /// The user friendly name of that resource. Defaults to blank string
    /// </summary>
    utility::string_t getLongDescription() const;
    bool longDescriptionIsSet() const;
    void unsetLong_description();
    void setLongDescription(utility::string_t value);
    /// <summary>
    /// The user friendly name of that resource
    /// </summary>
    utility::string_t getName() const;
        void setName(utility::string_t value);
    /// <summary>
    /// The rewards to give at the end of each occurence of the activity. When creating/updating only id is used. Reward set must be pre-existing
    /// </summary>
    std::shared_ptr<RewardSetResource> getRewardSet() const;
    bool rewardSetIsSet() const;
    void unsetReward_set();
    void setRewardSet(std::shared_ptr<RewardSetResource> value);
    /// <summary>
    /// Define what parameters are required/available to start and run an activity. For example: Difficulty, Number of Questions, Character name, Avatar, Duration, etc. Not populated when getting listing
    /// </summary>
    std::vector<std::shared_ptr<AvailableSettingResource>>& getSettings();
    bool settingsIsSet() const;
    void unsetSettings();
    void setSettings(std::vector<std::shared_ptr<AvailableSettingResource>> value);
    /// <summary>
    /// The user friendly name of that resource. Defaults to blank string
    /// </summary>
    utility::string_t getShortDescription() const;
    bool shortDescriptionIsSet() const;
    void unsetShort_description();
    void setShortDescription(utility::string_t value);
    /// <summary>
    /// Whether this activity is a template for other activities. Default: false
    /// </summary>
    bool getTemplate() const;
    bool templateIsSet() const;
    void unsetTemplate();
    void setTemplate(bool value);
    /// <summary>
    /// An activity template this activity is validated against (private). May be null and no validation of additional_properties will be done
    /// </summary>
    utility::string_t getTemplateId() const;
    bool templateIdIsSet() const;
    void unsetTemplate_id();
    void setTemplateId(utility::string_t value);
    /// <summary>
    /// The type of the activity
    /// </summary>
    utility::string_t getType() const;
        void setType(utility::string_t value);
    /// <summary>
    /// The unique key (for static reference in code) of the activity
    /// </summary>
    utility::string_t getUniqueKey() const;
    bool uniqueKeyIsSet() const;
    void unsetUnique_key();
    void setUniqueKey(utility::string_t value);
    /// <summary>
    /// The date/time this resource was last updated in seconds since unix epoch
    /// </summary>
    int64_t getUpdatedDate() const;
    bool updatedDateIsSet() const;
    void unsetUpdated_date();
    void setUpdatedDate(int64_t value);

protected:
    std::map<utility::string_t, std::shared_ptr<Property>> m_Additional_properties;
    bool m_Additional_propertiesIsSet;
    int64_t m_Created_date;
    bool m_Created_dateIsSet;
    std::vector<std::shared_ptr<ActivityEntitlementResource>> m_Entitlements;
    bool m_EntitlementsIsSet;
    int64_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Launch;
    bool m_LaunchIsSet;
    utility::string_t m_Leaderboard_strategy;
    bool m_Leaderboard_strategyIsSet;
    utility::string_t m_Long_description;
    bool m_Long_descriptionIsSet;
    utility::string_t m_Name;
        std::shared_ptr<RewardSetResource> m_Reward_set;
    bool m_Reward_setIsSet;
    std::vector<std::shared_ptr<AvailableSettingResource>> m_Settings;
    bool m_SettingsIsSet;
    utility::string_t m_Short_description;
    bool m_Short_descriptionIsSet;
    bool m_Template;
    bool m_TemplateIsSet;
    utility::string_t m_Template_id;
    bool m_Template_idIsSet;
    utility::string_t m_Type;
        utility::string_t m_Unique_key;
    bool m_Unique_keyIsSet;
    int64_t m_Updated_date;
    bool m_Updated_dateIsSet;
};

}
}
}
}

#endif /* ActivityResource_H_ */
