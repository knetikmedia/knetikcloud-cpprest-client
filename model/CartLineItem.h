/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * CartLineItem.h
 *
 * 
 */

#ifndef CartLineItem_H_
#define CartLineItem_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "Discount.h"
#include <vector>

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  CartLineItem
    : public ModelBase
{
public:
    CartLineItem();
    virtual ~CartLineItem();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CartLineItem members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCurrencyCode() const;
    bool currencyCodeIsSet() const;
    void unsetCurrency_code();
    void setCurrencyCode(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();
    void setDescription(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Discount> getDiscount() const;
    bool discountIsSet() const;
    void unsetDiscount();
    void setDiscount(std::shared_ptr<Discount> value);
    /// <summary>
    /// 
    /// </summary>
    double getLineTotal() const;
    bool lineTotalIsSet() const;
    void unsetLine_total();
    void setLineTotal(double value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();
    void setName(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    double getOriginalLineTotal() const;
    bool originalLineTotalIsSet() const;
    void unsetOriginal_line_total();
    void setOriginalLineTotal(double value);
    /// <summary>
    /// 
    /// </summary>
    double getOriginalUnitPrice() const;
    bool originalUnitPriceIsSet() const;
    void unsetOriginal_unit_price();
    void setOriginalUnitPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getQty() const;
    bool qtyIsSet() const;
    void unsetQty();
    void setQty(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSaleName() const;
    bool saleNameIsSet() const;
    void unsetSale_name();
    void setSaleName(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSku() const;
    bool skuIsSet() const;
    void unsetSku();
    void setSku(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSkuDescription() const;
    bool skuDescriptionIsSet() const;
    void unsetSku_description();
    void setSkuDescription(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getStoreItemId() const;
    bool storeItemIdIsSet() const;
    void unsetStore_item_id();
    void setStoreItemId(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getTags();
    bool tagsIsSet() const;
    void unsetTags();
    void setTags(std::vector<utility::string_t> value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getThumbUrl() const;
    bool thumbUrlIsSet() const;
    void unsetThumb_url();
    void setThumbUrl(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUniqueKey() const;
    bool uniqueKeyIsSet() const;
    void unsetUnique_key();
    void setUniqueKey(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    double getUnitPrice() const;
    bool unitPriceIsSet() const;
    void unsetUnit_price();
    void setUnitPrice(double value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getVendorId() const;
    bool vendorIdIsSet() const;
    void unsetVendor_id();
    void setVendorId(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getVendorName() const;
    bool vendorNameIsSet() const;
    void unsetVendor_name();
    void setVendorName(utility::string_t value);

protected:
    utility::string_t m_Currency_code;
    bool m_Currency_codeIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    std::shared_ptr<Discount> m_Discount;
    bool m_DiscountIsSet;
    double m_Line_total;
    bool m_Line_totalIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    double m_Original_line_total;
    bool m_Original_line_totalIsSet;
    double m_Original_unit_price;
    bool m_Original_unit_priceIsSet;
    int32_t m_Qty;
    bool m_QtyIsSet;
    utility::string_t m_Sale_name;
    bool m_Sale_nameIsSet;
    utility::string_t m_Sku;
    bool m_SkuIsSet;
    utility::string_t m_Sku_description;
    bool m_Sku_descriptionIsSet;
    int32_t m_Store_item_id;
    bool m_Store_item_idIsSet;
    std::vector<utility::string_t> m_Tags;
    bool m_TagsIsSet;
    utility::string_t m_Thumb_url;
    bool m_Thumb_urlIsSet;
    utility::string_t m_Unique_key;
    bool m_Unique_keyIsSet;
    double m_Unit_price;
    bool m_Unit_priceIsSet;
    int32_t m_Vendor_id;
    bool m_Vendor_idIsSet;
    utility::string_t m_Vendor_name;
    bool m_Vendor_nameIsSet;
};

}
}
}
}

#endif /* CartLineItem_H_ */
