/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Discount.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

Discount::Discount()
{
    m_Description = U("");
    m_DescriptionIsSet = false;
    m_Name = U("");
    m_NameIsSet = false;
    m_Sku = U("");
    m_SkuIsSet = false;
    m_Unique_key = U("");
    m_Unique_keyIsSet = false;
    m_Value = 0.0;
    m_ValueIsSet = false;
}

Discount::~Discount()
{
}

void Discount::validate()
{
    // TODO: implement validation
}

web::json::value Discount::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_DescriptionIsSet)
    {
        val[U("description")] = ModelBase::toJson(m_Description);
    }
    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }
    if(m_SkuIsSet)
    {
        val[U("sku")] = ModelBase::toJson(m_Sku);
    }
    if(m_Unique_keyIsSet)
    {
        val[U("unique_key")] = ModelBase::toJson(m_Unique_key);
    }
    if(m_ValueIsSet)
    {
        val[U("value")] = ModelBase::toJson(m_Value);
    }

    return val;
}

void Discount::fromJson(web::json::value& val)
{
    if(val.has_field(U("description")))
    {
        setDescription(ModelBase::stringFromJson(val[U("description")]));
    }
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
    }
    if(val.has_field(U("sku")))
    {
        setSku(ModelBase::stringFromJson(val[U("sku")]));
    }
    if(val.has_field(U("unique_key")))
    {
        setUniqueKey(ModelBase::stringFromJson(val[U("unique_key")]));
    }
    if(val.has_field(U("value")))
    {
        setValue(ModelBase::doubleFromJson(val[U("value")]));
    }
}

void Discount::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("description"), m_Description));
        
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
    if(m_SkuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("sku"), m_Sku));
        
    }
    if(m_Unique_keyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("unique_key"), m_Unique_key));
        
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("value"), m_Value));
    }
}

void Discount::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("description"))));
    }
    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    }
    if(multipart->hasContent(U("sku")))
    {
        setSku(ModelBase::stringFromHttpContent(multipart->getContent(U("sku"))));
    }
    if(multipart->hasContent(U("unique_key")))
    {
        setUniqueKey(ModelBase::stringFromHttpContent(multipart->getContent(U("unique_key"))));
    }
    if(multipart->hasContent(U("value")))
    {
        setValue(ModelBase::doubleFromHttpContent(multipart->getContent(U("value"))));
    }
}

utility::string_t Discount::getDescription() const
{
    return m_Description;
}


void Discount::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool Discount::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void Discount::unsetDescription()
{
    m_DescriptionIsSet = false;
}

utility::string_t Discount::getName() const
{
    return m_Name;
}


void Discount::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool Discount::nameIsSet() const
{
    return m_NameIsSet;
}

void Discount::unsetName()
{
    m_NameIsSet = false;
}

utility::string_t Discount::getSku() const
{
    return m_Sku;
}


void Discount::setSku(utility::string_t value)
{
    m_Sku = value;
    m_SkuIsSet = true;
}
bool Discount::skuIsSet() const
{
    return m_SkuIsSet;
}

void Discount::unsetSku()
{
    m_SkuIsSet = false;
}

utility::string_t Discount::getUniqueKey() const
{
    return m_Unique_key;
}


void Discount::setUniqueKey(utility::string_t value)
{
    m_Unique_key = value;
    m_Unique_keyIsSet = true;
}
bool Discount::uniqueKeyIsSet() const
{
    return m_Unique_keyIsSet;
}

void Discount::unsetUnique_key()
{
    m_Unique_keyIsSet = false;
}

double Discount::getValue() const
{
    return m_Value;
}


void Discount::setValue(double value)
{
    m_Value = value;
    m_ValueIsSet = true;
}
bool Discount::valueIsSet() const
{
    return m_ValueIsSet;
}

void Discount::unsetValue()
{
    m_ValueIsSet = false;
}

}
}
}
}

