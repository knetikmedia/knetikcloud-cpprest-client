/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "VideoContribution.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

VideoContribution::VideoContribution()
{
    m_ArtistIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_MediaIsSet = false;
    m_Role = U("");
    m_RoleIsSet = false;
    
}

VideoContribution::~VideoContribution()
{
}

void VideoContribution::validate()
{
    // TODO: implement validation
}

web::json::value VideoContribution::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ArtistIsSet)
    {
        val[U("artist")] = ModelBase::toJson(m_Artist);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_MediaIsSet)
    {
        val[U("media")] = ModelBase::toJson(m_Media);
    }
    if(m_RoleIsSet)
    {
        val[U("role")] = ModelBase::toJson(m_Role);
    }
    

    return val;
}

void VideoContribution::fromJson(web::json::value& val)
{
    if(val.has_field(U("artist")))
    {
        if(!val[U("artist")].is_null())
        {
            std::shared_ptr<Artist> newItem(new Artist());
            newItem->fromJson(val[U("artist")]);
            setArtist( newItem );
        }
        
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int32_tFromJson(val[U("id")]));
    }
    if(val.has_field(U("media")))
    {
        if(!val[U("media")].is_null())
        {
            std::shared_ptr<Video> newItem(new Video());
            newItem->fromJson(val[U("media")]);
            setMedia( newItem );
        }
        
    }
    if(val.has_field(U("role")))
    {
        setRole(ModelBase::stringFromJson(val[U("role")]));
        
    }
    
}

void VideoContribution::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_ArtistIsSet)
    {
        if (m_Artist.get())
        {
            m_Artist->toMultipart(multipart, U("artist."));
        }
        
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    if(m_MediaIsSet)
    {
        if (m_Media.get())
        {
            m_Media->toMultipart(multipart, U("media."));
        }
        
    }
    if(m_RoleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("role"), m_Role));
        
    }
    
}

void VideoContribution::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("artist")))
    {
        if(multipart->hasContent(U("artist")))
        {
            std::shared_ptr<Artist> newItem(new Artist());
            newItem->fromMultiPart(multipart, U("artist."));
            setArtist( newItem );
        }
        
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("media")))
    {
        if(multipart->hasContent(U("media")))
        {
            std::shared_ptr<Video> newItem(new Video());
            newItem->fromMultiPart(multipart, U("media."));
            setMedia( newItem );
        }
        
    }
    if(multipart->hasContent(U("role")))
    {
        setRole(ModelBase::stringFromHttpContent(multipart->getContent(U("role"))));
        
    }
    
}


std::shared_ptr<Artist> VideoContribution::getArtist() const
{
    return m_Artist;
}
void VideoContribution::setArtist(std::shared_ptr<Artist> value)
{
    m_Artist = value;
    m_ArtistIsSet = true;
}
bool VideoContribution::artistIsSet() const
{
    return m_ArtistIsSet;
}
void VideoContribution::unsetArtist()
{
    m_ArtistIsSet = false;
}
int32_t VideoContribution::getId() const
{
    return m_Id;
}
void VideoContribution::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool VideoContribution::idIsSet() const
{
    return m_IdIsSet;
}
void VideoContribution::unsetId()
{
    m_IdIsSet = false;
}
std::shared_ptr<Video> VideoContribution::getMedia() const
{
    return m_Media;
}
void VideoContribution::setMedia(std::shared_ptr<Video> value)
{
    m_Media = value;
    m_MediaIsSet = true;
}
bool VideoContribution::mediaIsSet() const
{
    return m_MediaIsSet;
}
void VideoContribution::unsetMedia()
{
    m_MediaIsSet = false;
}
utility::string_t VideoContribution::getRole() const
{
    return m_Role;
}
void VideoContribution::setRole(utility::string_t value)
{
    m_Role = value;
    m_RoleIsSet = true;
}
bool VideoContribution::roleIsSet() const
{
    return m_RoleIsSet;
}
void VideoContribution::unsetRole()
{
    m_RoleIsSet = false;
}

}
}
}
}

