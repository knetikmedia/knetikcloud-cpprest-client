/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "GrantTypeResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

GrantTypeResource::GrantTypeResource()
{
    m_Description = U("");
    m_DescriptionIsSet = false;
    m_Name = U("");
    m_NameIsSet = false;
    
}

GrantTypeResource::~GrantTypeResource()
{
}

void GrantTypeResource::validate()
{
    // TODO: implement validation
}

web::json::value GrantTypeResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_DescriptionIsSet)
    {
        val[U("description")] = ModelBase::toJson(m_Description);
    }
    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }
    

    return val;
}

void GrantTypeResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("description")))
    {
        setDescription(ModelBase::stringFromJson(val[U("description")]));
        
    }
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
        
    }
    
}

void GrantTypeResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("description"), m_Description));
        
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
    
}

void GrantTypeResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("description"))));
        
    }
    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
        
    }
    
}


utility::string_t GrantTypeResource::getDescription() const
{
    return m_Description;
}
void GrantTypeResource::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool GrantTypeResource::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void GrantTypeResource::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t GrantTypeResource::getName() const
{
    return m_Name;
}
void GrantTypeResource::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool GrantTypeResource::nameIsSet() const
{
    return m_NameIsSet;
}
void GrantTypeResource::unsetName()
{
    m_NameIsSet = false;
}

}
}
}
}

