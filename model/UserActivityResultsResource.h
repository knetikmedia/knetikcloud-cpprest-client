/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * UserActivityResultsResource.h
 *
 * 
 */

#ifndef UserActivityResultsResource_H_
#define UserActivityResultsResource_H_


#include "ModelBase.h"

#include "RewardCurrencyResource.h"
#include <cpprest/details/basic_types.h>
#include "SimpleUserResource.h"
#include "RewardItemResource.h"
#include <vector>

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  UserActivityResultsResource
    : public ModelBase
{
public:
    UserActivityResultsResource();
    virtual ~UserActivityResultsResource();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UserActivityResultsResource members

    /// <summary>
    /// Any currency rewarded to this user
    /// </summary>
    std::vector<std::shared_ptr<RewardCurrencyResource>>& getCurrencyRewards();
    bool currency_rewardsIsSet() const;
    void unsetCurrency_rewards();
    /// <summary>
    /// Any items rewarded to this user
    /// </summary>
    std::vector<std::shared_ptr<RewardItemResource>>& getItemRewards();
    bool item_rewardsIsSet() const;
    void unsetItem_rewards();
    /// <summary>
    /// The position of the user in the leaderboard. Null means non-compete or disqualification
    /// </summary>
    int64_t getRank() const;
    void setRank(int64_t value);
    bool rankIsSet() const;
    void unsetRank();
    /// <summary>
    /// The raw score in this leaderboard. Null means non-compete or disqualification
    /// </summary>
    int64_t getScore() const;
    void setScore(int64_t value);
    bool scoreIsSet() const;
    void unsetScore();
    /// <summary>
    /// Any tags for the metric. Each unique tag will translate into a unique leaderboard. Maximum 5 tags and 50 characters each
    /// </summary>
    std::vector<utility::string_t>& getTags();
    bool tagsIsSet() const;
    void unsetTags();
    /// <summary>
    /// The number of users tied at this rank, including this user. 1 means no tie
    /// </summary>
    int32_t getTies() const;
    void setTies(int32_t value);
    bool tiesIsSet() const;
    void unsetTies();
    /// <summary>
    /// The player for this entry
    /// </summary>
    std::shared_ptr<SimpleUserResource> getUser() const;
    void setUser(std::shared_ptr<SimpleUserResource> value);
    
protected:
    std::vector<std::shared_ptr<RewardCurrencyResource>> m_Currency_rewards;
    bool m_Currency_rewardsIsSet;
std::vector<std::shared_ptr<RewardItemResource>> m_Item_rewards;
    bool m_Item_rewardsIsSet;
int64_t m_Rank;
    bool m_RankIsSet;
int64_t m_Score;
    bool m_ScoreIsSet;
std::vector<utility::string_t> m_Tags;
    bool m_TagsIsSet;
int32_t m_Ties;
    bool m_TiesIsSet;
std::shared_ptr<SimpleUserResource> m_User;
    };

}
}
}
}

#endif /* UserActivityResultsResource_H_ */
