/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BreTriggerResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

BreTriggerResource::BreTriggerResource()
{
    m_Category = U("");
    m_CategoryIsSet = false;
    m_Event_name = U("");
    m_ParametersIsSet = false;
    m_System_trigger = false;
    m_System_triggerIsSet = false;
    m_TagsIsSet = false;
    m_Trigger_description = U("");
    m_Trigger_name = U("");
}

BreTriggerResource::~BreTriggerResource()
{
}

void BreTriggerResource::validate()
{
    // TODO: implement validation
}

web::json::value BreTriggerResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CategoryIsSet)
    {
        val[U("category")] = ModelBase::toJson(m_Category);
    }
    val[U("event_name")] = ModelBase::toJson(m_Event_name);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Parameters )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("parameters")] = web::json::value::array(jsonArray);
        }
    }
    if(m_System_triggerIsSet)
    {
        val[U("system_trigger")] = ModelBase::toJson(m_System_trigger);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("tags")] = web::json::value::array(jsonArray);
        }
    }
    val[U("trigger_description")] = ModelBase::toJson(m_Trigger_description);
    val[U("trigger_name")] = ModelBase::toJson(m_Trigger_name);

    return val;
}

void BreTriggerResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("category")))
    {
        setCategory(ModelBase::stringFromJson(val[U("category")]));
    }
    setEventName(ModelBase::stringFromJson(val[U("event_name")]));
    {
        m_Parameters.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("parameters")))
        {
        for( auto& item : val[U("parameters")].as_array() )
        {
            if(item.is_null())
            {
                m_Parameters.push_back( std::shared_ptr<BreTriggerParameterDefinition>(nullptr) );
            }
            else
            {
                std::shared_ptr<BreTriggerParameterDefinition> newItem(new BreTriggerParameterDefinition());
                newItem->fromJson(item);
                m_Parameters.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(U("system_trigger")))
    {
        setSystemTrigger(ModelBase::boolFromJson(val[U("system_trigger")]));
    }
    {
        m_Tags.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("tags")))
        {
        for( auto& item : val[U("tags")].as_array() )
        {
            m_Tags.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    setTriggerDescription(ModelBase::stringFromJson(val[U("trigger_description")]));
    setTriggerName(ModelBase::stringFromJson(val[U("trigger_name")]));
}

void BreTriggerResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_CategoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("category"), m_Category));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("event_name"), m_Event_name));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Parameters )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("parameters"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_System_triggerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("system_trigger"), m_System_trigger));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("tags"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("trigger_description"), m_Trigger_description));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("trigger_name"), m_Trigger_name));
}

void BreTriggerResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("category")))
    {
        setCategory(ModelBase::stringFromHttpContent(multipart->getContent(U("category"))));
    }
    setEventName(ModelBase::stringFromHttpContent(multipart->getContent(U("event_name"))));
    {
        m_Parameters.clear();
        if(multipart->hasContent(U("parameters")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("parameters"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Parameters.push_back( std::shared_ptr<BreTriggerParameterDefinition>(nullptr) );
            }
            else
            {
                std::shared_ptr<BreTriggerParameterDefinition> newItem(new BreTriggerParameterDefinition());
                newItem->fromJson(item);
                m_Parameters.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(U("system_trigger")))
    {
        setSystemTrigger(ModelBase::boolFromHttpContent(multipart->getContent(U("system_trigger"))));
    }
    {
        m_Tags.clear();
        if(multipart->hasContent(U("tags")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("tags"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Tags.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    setTriggerDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("trigger_description"))));
    setTriggerName(ModelBase::stringFromHttpContent(multipart->getContent(U("trigger_name"))));
}

utility::string_t BreTriggerResource::getCategory() const
{
    return m_Category;
}


void BreTriggerResource::setCategory(utility::string_t value)
{
    m_Category = value;
    m_CategoryIsSet = true;
}
bool BreTriggerResource::categoryIsSet() const
{
    return m_CategoryIsSet;
}

void BreTriggerResource::unsetCategory()
{
    m_CategoryIsSet = false;
}

utility::string_t BreTriggerResource::getEventName() const
{
    return m_Event_name;
}


void BreTriggerResource::setEventName(utility::string_t value)
{
    m_Event_name = value;
    
}
std::vector<std::shared_ptr<BreTriggerParameterDefinition>>& BreTriggerResource::getParameters()
{
    return m_Parameters;
}

void BreTriggerResource::setParameters(std::vector<std::shared_ptr<BreTriggerParameterDefinition>> value)
{
    m_Parameters = value;
    m_ParametersIsSet = true;
}
bool BreTriggerResource::parametersIsSet() const
{
    return m_ParametersIsSet;
}

void BreTriggerResource::unsetParameters()
{
    m_ParametersIsSet = false;
}

bool BreTriggerResource::getSystemTrigger() const
{
    return m_System_trigger;
}


void BreTriggerResource::setSystemTrigger(bool value)
{
    m_System_trigger = value;
    m_System_triggerIsSet = true;
}
bool BreTriggerResource::systemTriggerIsSet() const
{
    return m_System_triggerIsSet;
}

void BreTriggerResource::unsetSystem_trigger()
{
    m_System_triggerIsSet = false;
}

std::vector<utility::string_t>& BreTriggerResource::getTags()
{
    return m_Tags;
}

void BreTriggerResource::setTags(std::vector<utility::string_t> value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}
bool BreTriggerResource::tagsIsSet() const
{
    return m_TagsIsSet;
}

void BreTriggerResource::unsetTags()
{
    m_TagsIsSet = false;
}

utility::string_t BreTriggerResource::getTriggerDescription() const
{
    return m_Trigger_description;
}


void BreTriggerResource::setTriggerDescription(utility::string_t value)
{
    m_Trigger_description = value;
    
}
utility::string_t BreTriggerResource::getTriggerName() const
{
    return m_Trigger_name;
}


void BreTriggerResource::setTriggerName(utility::string_t value)
{
    m_Trigger_name = value;
    
}
}
}
}
}

