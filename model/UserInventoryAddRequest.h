/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * UserInventoryAddRequest.h
 *
 * 
 */

#ifndef UserInventoryAddRequest_H_
#define UserInventoryAddRequest_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  UserInventoryAddRequest
    : public ModelBase
{
public:
    UserInventoryAddRequest();
    virtual ~UserInventoryAddRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UserInventoryAddRequest members

    /// <summary>
    /// A note to be passed to the invoice or transaction
    /// </summary>
    utility::string_t getNote() const;
    void setNote(utility::string_t value);
        /// <summary>
    /// A list of behaviors to ignore explicitely.  Ex: &#39;limited_gettable&#39;
    /// </summary>
    std::vector<utility::string_t>& getOverrides();
    bool overridesIsSet() const;
    void unsetOverrides();
    /// <summary>
    /// If set to true will cause the endpoint to skip creation of cart and invoice to track the inventory change
    /// </summary>
    bool getSkipInvoice() const;
    void setSkipInvoice(bool value);
        /// <summary>
    /// The specific SKU of the item to be added to the inventory
    /// </summary>
    utility::string_t getSku() const;
    void setSku(utility::string_t value);
    
protected:
    utility::string_t m_Note;
    std::vector<utility::string_t> m_Overrides;
    bool m_OverridesIsSet;
bool m_Skip_invoice;
    utility::string_t m_Sku;
    };

}
}
}
}

#endif /* UserInventoryAddRequest_H_ */
