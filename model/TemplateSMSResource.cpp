/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "TemplateSMSResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

TemplateSMSResource::TemplateSMSResource()
{
    m_From = U("");
    m_FromIsSet = false;
    m_LocalizerIsSet = false;
    m_Template_key = U("");
    m_Template_varsIsSet = false;
    
}

TemplateSMSResource::~TemplateSMSResource()
{
}

void TemplateSMSResource::validate()
{
    // TODO: implement validation
}

web::json::value TemplateSMSResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_FromIsSet)
    {
        val[U("from")] = ModelBase::toJson(m_From);
    }
    if(m_LocalizerIsSet)
    {
        val[U("localizer")] = ModelBase::toJson(m_Localizer);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Recipients )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[U("recipients")] = web::json::value::array(jsonArray);
            }
    val[U("template_key")] = ModelBase::toJson(m_Template_key);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Template_vars )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("template_vars")] = web::json::value::array(jsonArray);
        }
    }
    

    return val;
}

void TemplateSMSResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("from")))
    {
        setFrom(ModelBase::stringFromJson(val[U("from")]));
        
    }
    if(val.has_field(U("localizer")))
    {
        if(!val[U("localizer")].is_null())
        {
            std::shared_ptr<Localizer> newItem(new Localizer());
            newItem->fromJson(val[U("localizer")]);
            setLocalizer( newItem );
        }
        
    }
    {
        m_Recipients.clear();
        std::vector<web::json::value> jsonArray;
                for( auto& item : val[U("recipients")].as_array() )
        {
            m_Recipients.push_back(ModelBase::int32_tFromJson(item));
            
        }
    }
    setTemplateKey(ModelBase::stringFromJson(val[U("template_key")]));
    {
        m_Template_vars.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("template_vars")))
        {
        for( auto& item : val[U("template_vars")].as_array() )
        {
            m_Template_vars.push_back(ModelBase::stringFromJson(item));
            
        }
        }
    }
    
}

void TemplateSMSResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_FromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("from"), m_From));
        
    }
    if(m_LocalizerIsSet)
    {
        if (m_Localizer.get())
        {
            m_Localizer->toMultipart(multipart, U("localizer."));
        }
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Recipients )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + U("recipients"), web::json::value::array(jsonArray), U("application/json")));
            }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("template_key"), m_Template_key));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Template_vars )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("template_vars"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    
}

void TemplateSMSResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("from")))
    {
        setFrom(ModelBase::stringFromHttpContent(multipart->getContent(U("from"))));
        
    }
    if(multipart->hasContent(U("localizer")))
    {
        if(multipart->hasContent(U("localizer")))
        {
            std::shared_ptr<Localizer> newItem(new Localizer());
            newItem->fromMultiPart(multipart, U("localizer."));
            setLocalizer( newItem );
        }
        
    }
    {
        m_Recipients.clear();
        
        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("recipients"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Recipients.push_back(ModelBase::int32_tFromJson(item));
            
        }
    }
    setTemplateKey(ModelBase::stringFromHttpContent(multipart->getContent(U("template_key"))));
    {
        m_Template_vars.clear();
        if(multipart->hasContent(U("template_vars")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("template_vars"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Template_vars.push_back(ModelBase::stringFromJson(item));
            
        }
        }
    }
    
}


utility::string_t TemplateSMSResource::getFrom() const
{
    return m_From;
}
void TemplateSMSResource::setFrom(utility::string_t value)
{
    m_From = value;
    m_FromIsSet = true;
}
bool TemplateSMSResource::fromIsSet() const
{
    return m_FromIsSet;
}
void TemplateSMSResource::unsetFrom()
{
    m_FromIsSet = false;
}
std::shared_ptr<Localizer> TemplateSMSResource::getLocalizer() const
{
    return m_Localizer;
}
void TemplateSMSResource::setLocalizer(std::shared_ptr<Localizer> value)
{
    m_Localizer = value;
    m_LocalizerIsSet = true;
}
bool TemplateSMSResource::localizerIsSet() const
{
    return m_LocalizerIsSet;
}
void TemplateSMSResource::unsetLocalizer()
{
    m_LocalizerIsSet = false;
}
std::vector<int32_t>& TemplateSMSResource::getRecipients()
{
    return m_Recipients;
}
utility::string_t TemplateSMSResource::getTemplateKey() const
{
    return m_Template_key;
}
void TemplateSMSResource::setTemplateKey(utility::string_t value)
{
    m_Template_key = value;
    
}
std::vector<utility::string_t>& TemplateSMSResource::getTemplateVars()
{
    return m_Template_vars;
}
bool TemplateSMSResource::template_varsIsSet() const
{
    return m_Template_varsIsSet;
}
void TemplateSMSResource::unsetTemplate_vars()
{
    m_Template_varsIsSet = false;
}

}
}
}
}

