/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BreActionLog.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

BreActionLog::BreActionLog()
{
    m_Name = U("");
    m_NameIsSet = false;
    m_Runtime = 0L;
    m_RuntimeIsSet = false;
    m_Status = U("");
    m_StatusIsSet = false;
}

BreActionLog::~BreActionLog()
{
}

void BreActionLog::validate()
{
    // TODO: implement validation
}

web::json::value BreActionLog::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }
    if(m_RuntimeIsSet)
    {
        val[U("runtime")] = ModelBase::toJson(m_Runtime);
    }
    if(m_StatusIsSet)
    {
        val[U("status")] = ModelBase::toJson(m_Status);
    }

    return val;
}

void BreActionLog::fromJson(web::json::value& val)
{
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
    }
    if(val.has_field(U("runtime")))
    {
        setRuntime(ModelBase::int64_tFromJson(val[U("runtime")]));
    }
    if(val.has_field(U("status")))
    {
        setStatus(ModelBase::stringFromJson(val[U("status")]));
    }
}

void BreActionLog::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
    if(m_RuntimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("runtime"), m_Runtime));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("status"), m_Status));
        
    }
}

void BreActionLog::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    }
    if(multipart->hasContent(U("runtime")))
    {
        setRuntime(ModelBase::int64_tFromHttpContent(multipart->getContent(U("runtime"))));
    }
    if(multipart->hasContent(U("status")))
    {
        setStatus(ModelBase::stringFromHttpContent(multipart->getContent(U("status"))));
    }
}

utility::string_t BreActionLog::getName() const
{
    return m_Name;
}


void BreActionLog::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool BreActionLog::nameIsSet() const
{
    return m_NameIsSet;
}

void BreActionLog::unsetName()
{
    m_NameIsSet = false;
}

int64_t BreActionLog::getRuntime() const
{
    return m_Runtime;
}


void BreActionLog::setRuntime(int64_t value)
{
    m_Runtime = value;
    m_RuntimeIsSet = true;
}
bool BreActionLog::runtimeIsSet() const
{
    return m_RuntimeIsSet;
}

void BreActionLog::unsetRuntime()
{
    m_RuntimeIsSet = false;
}

utility::string_t BreActionLog::getStatus() const
{
    return m_Status;
}


void BreActionLog::setStatus(utility::string_t value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool BreActionLog::statusIsSet() const
{
    return m_StatusIsSet;
}

void BreActionLog::unsetStatus()
{
    m_StatusIsSet = false;
}

}
}
}
}

