/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Subscription.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

Subscription::Subscription()
{
    m_Availability = U("");
    m_AvailabilityIsSet = false;
    m_Consolidation_day_of_month = 0;
    m_Consolidation_day_of_monthIsSet = false;
    m_Subscription_plansIsSet = false;
}

Subscription::~Subscription()
{
}

void Subscription::validate()
{
    // TODO: implement validation
}

web::json::value Subscription::toJson() const
{
    web::json::value val = this->StoreItem::toJson();

    if(m_AvailabilityIsSet)
    {
        val[U("availability")] = ModelBase::toJson(m_Availability);
    }
    if(m_Consolidation_day_of_monthIsSet)
    {
        val[U("consolidation_day_of_month")] = ModelBase::toJson(m_Consolidation_day_of_month);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Subscription_plans )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("subscription_plans")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void Subscription::fromJson(web::json::value& val)
{
    this->StoreItem::fromJson(val);

    if(val.has_field(U("availability")))
    {
        setAvailability(ModelBase::stringFromJson(val[U("availability")]));
    }
    if(val.has_field(U("consolidation_day_of_month")))
    {
        setConsolidationDayOfMonth(ModelBase::int32_tFromJson(val[U("consolidation_day_of_month")]));
    }
    {
        m_Subscription_plans.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("subscription_plans")))
        {
        for( auto& item : val[U("subscription_plans")].as_array() )
        {
            if(item.is_null())
            {
                m_Subscription_plans.push_back( std::shared_ptr<SubscriptionPlan>(nullptr) );
            }
            else
            {
                std::shared_ptr<SubscriptionPlan> newItem(new SubscriptionPlan());
                newItem->fromJson(item);
                m_Subscription_plans.push_back( newItem );
            }
        }
        }
    }
}

void Subscription::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Additional_properties )
        {
            web::json::value tmp = web::json::value::object();
            tmp[U("key")] = ModelBase::toJson(item.first);
            tmp[U("value")] = ModelBase::toJson(item.second);
            jsonArray.push_back(tmp);
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("additional_properties"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Behaviors )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("behaviors"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_CategoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("category"), m_Category));
        
    }
    if(m_Created_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("created_date"), m_Created_date));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    if(m_Long_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("long_description"), m_Long_description));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    if(m_Short_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("short_description"), m_Short_description));
        
    }
    if(m_SortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("sort"), m_Sort));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("tags"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_TemplateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("template"), m_Template));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("type_hint"), m_Type_hint));
    if(m_Unique_keyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("unique_key"), m_Unique_key));
        
    }
    if(m_Updated_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("updated_date"), m_Updated_date));
    }
    if(m_DisplayableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("displayable"), m_Displayable));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Geo_country_list )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("geo_country_list"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_Geo_policy_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("geo_policy_type"), m_Geo_policy_type));
        
    }
    if(m_Shipping_tierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("shipping_tier"), m_Shipping_tier));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Skus )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + U("skus"), web::json::value::array(jsonArray), U("application/json")));
            }
    if(m_Store_endIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("store_end"), m_Store_end));
    }
    if(m_Store_startIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("store_start"), m_Store_start));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("vendor_id"), m_Vendor_id));
    if(m_AvailabilityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("availability"), m_Availability));
        
    }
    if(m_Consolidation_day_of_monthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("consolidation_day_of_month"), m_Consolidation_day_of_month));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Subscription_plans )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("subscription_plans"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
}

void Subscription::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        m_Additional_properties.clear();
        if(multipart->hasContent(U("additional_properties")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("additional_properties"))));
        for( auto& item : jsonArray.as_array() )
        {
            utility::string_t key;
            if(item.has_field(U("key")))
            {
                key = ModelBase::stringFromJson(item[U("key")]);
            }
            if(item.is_null())
            {
                m_Additional_properties.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, std::shared_ptr<Property>(nullptr) ));
            }
            else
            {
                std::shared_ptr<Property> newItem(new Property());
                newItem->fromJson(item[U("value")]);
                m_Additional_properties.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, newItem ));
            }
        }
        }
    }
    {
        m_Behaviors.clear();
        if(multipart->hasContent(U("behaviors")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("behaviors"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Behaviors.push_back( std::shared_ptr<Behavior>(nullptr) );
            }
            else
            {
                std::shared_ptr<Behavior> newItem(new Behavior());
                newItem->fromJson(item);
                m_Behaviors.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(U("category")))
    {
        setCategory(ModelBase::stringFromHttpContent(multipart->getContent(U("category"))));
    }
    if(multipart->hasContent(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("created_date"))));
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("long_description")))
    {
        setLongDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("long_description"))));
    }
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    if(multipart->hasContent(U("short_description")))
    {
        setShortDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("short_description"))));
    }
    if(multipart->hasContent(U("sort")))
    {
        setSort(ModelBase::int32_tFromHttpContent(multipart->getContent(U("sort"))));
    }
    {
        m_Tags.clear();
        if(multipart->hasContent(U("tags")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("tags"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Tags.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(multipart->hasContent(U("template")))
    {
        setTemplate(ModelBase::stringFromHttpContent(multipart->getContent(U("template"))));
    }
    setTypeHint(ModelBase::stringFromHttpContent(multipart->getContent(U("type_hint"))));
    if(multipart->hasContent(U("unique_key")))
    {
        setUniqueKey(ModelBase::stringFromHttpContent(multipart->getContent(U("unique_key"))));
    }
    if(multipart->hasContent(U("updated_date")))
    {
        setUpdatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("updated_date"))));
    }
    if(multipart->hasContent(U("displayable")))
    {
        setDisplayable(ModelBase::boolFromHttpContent(multipart->getContent(U("displayable"))));
    }
    {
        m_Geo_country_list.clear();
        if(multipart->hasContent(U("geo_country_list")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("geo_country_list"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Geo_country_list.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(multipart->hasContent(U("geo_policy_type")))
    {
        setGeoPolicyType(ModelBase::stringFromHttpContent(multipart->getContent(U("geo_policy_type"))));
    }
    if(multipart->hasContent(U("shipping_tier")))
    {
        setShippingTier(ModelBase::int32_tFromHttpContent(multipart->getContent(U("shipping_tier"))));
    }
    {
        m_Skus.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("skus"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Skus.push_back( std::shared_ptr<Sku>(nullptr) );
            }
            else
            {
                std::shared_ptr<Sku> newItem(new Sku());
                newItem->fromJson(item);
                m_Skus.push_back( newItem );
            }
        }
    }
    if(multipart->hasContent(U("store_end")))
    {
        setStoreEnd(ModelBase::int64_tFromHttpContent(multipart->getContent(U("store_end"))));
    }
    if(multipart->hasContent(U("store_start")))
    {
        setStoreStart(ModelBase::int64_tFromHttpContent(multipart->getContent(U("store_start"))));
    }
    setVendorId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("vendor_id"))));
    if(multipart->hasContent(U("availability")))
    {
        setAvailability(ModelBase::stringFromHttpContent(multipart->getContent(U("availability"))));
    }
    if(multipart->hasContent(U("consolidation_day_of_month")))
    {
        setConsolidationDayOfMonth(ModelBase::int32_tFromHttpContent(multipart->getContent(U("consolidation_day_of_month"))));
    }
    {
        m_Subscription_plans.clear();
        if(multipart->hasContent(U("subscription_plans")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("subscription_plans"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Subscription_plans.push_back( std::shared_ptr<SubscriptionPlan>(nullptr) );
            }
            else
            {
                std::shared_ptr<SubscriptionPlan> newItem(new SubscriptionPlan());
                newItem->fromJson(item);
                m_Subscription_plans.push_back( newItem );
            }
        }
        }
    }
}

utility::string_t Subscription::getAvailability() const
{
    return m_Availability;
}


void Subscription::setAvailability(utility::string_t value)
{
    m_Availability = value;
    m_AvailabilityIsSet = true;
}
bool Subscription::availabilityIsSet() const
{
    return m_AvailabilityIsSet;
}

void Subscription::unsetAvailability()
{
    m_AvailabilityIsSet = false;
}

int32_t Subscription::getConsolidationDayOfMonth() const
{
    return m_Consolidation_day_of_month;
}


void Subscription::setConsolidationDayOfMonth(int32_t value)
{
    m_Consolidation_day_of_month = value;
    m_Consolidation_day_of_monthIsSet = true;
}
bool Subscription::consolidationDayOfMonthIsSet() const
{
    return m_Consolidation_day_of_monthIsSet;
}

void Subscription::unsetConsolidation_day_of_month()
{
    m_Consolidation_day_of_monthIsSet = false;
}

std::vector<std::shared_ptr<SubscriptionPlan>>& Subscription::getSubscriptionPlans()
{
    return m_Subscription_plans;
}

void Subscription::setSubscriptionPlans(std::vector<std::shared_ptr<SubscriptionPlan>> value)
{
    m_Subscription_plans = value;
    m_Subscription_plansIsSet = true;
}
bool Subscription::subscriptionPlansIsSet() const
{
    return m_Subscription_plansIsSet;
}

void Subscription::unsetSubscription_plans()
{
    m_Subscription_plansIsSet = false;
}

}
}
}
}

