/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ArtistResource.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

ArtistResource::ArtistResource()
{
    m_Additional_propertiesIsSet = false;
    m_Born = U("");
    m_BornIsSet = false;
    m_Contribution_count = 0;
    m_Contribution_countIsSet = false;
    m_ContributionsIsSet = false;
    m_Created_date = 0;
    m_Created_dateIsSet = false;
    m_Died = U("");
    m_DiedIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_Long_description = U("");
    m_Long_descriptionIsSet = false;
    m_Name = U("");
    m_Priority = 0;
    m_PriorityIsSet = false;
    m_Short_description = U("");
    m_Short_descriptionIsSet = false;
    m_Template = U("");
    m_TemplateIsSet = false;
    m_Updated_date = 0;
    m_Updated_dateIsSet = false;
    
}

ArtistResource::~ArtistResource()
{
}

void ArtistResource::validate()
{
    // TODO: implement validation
}

web::json::value ArtistResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Additional_propertiesIsSet)
    {
        val[U("additional_properties")] = ModelBase::toJson(m_Additional_properties);
    }
    if(m_BornIsSet)
    {
        val[U("born")] = ModelBase::toJson(m_Born);
    }
    if(m_Contribution_countIsSet)
    {
        val[U("contribution_count")] = ModelBase::toJson(m_Contribution_count);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Contributions )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("contributions")] = web::json::value::array(jsonArray);
        }
    }
    if(m_Created_dateIsSet)
    {
        val[U("created_date")] = ModelBase::toJson(m_Created_date);
    }
    if(m_DiedIsSet)
    {
        val[U("died")] = ModelBase::toJson(m_Died);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_Long_descriptionIsSet)
    {
        val[U("long_description")] = ModelBase::toJson(m_Long_description);
    }
    val[U("name")] = ModelBase::toJson(m_Name);
    if(m_PriorityIsSet)
    {
        val[U("priority")] = ModelBase::toJson(m_Priority);
    }
    if(m_Short_descriptionIsSet)
    {
        val[U("short_description")] = ModelBase::toJson(m_Short_description);
    }
    if(m_TemplateIsSet)
    {
        val[U("template")] = ModelBase::toJson(m_Template);
    }
    if(m_Updated_dateIsSet)
    {
        val[U("updated_date")] = ModelBase::toJson(m_Updated_date);
    }
    

    return val;
}

void ArtistResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("additional_properties")))
    {
        if(!val[U("additional_properties")].is_null())
        {
            std::map<utility::string_t, std::shared_ptr<Property>> newItem(std::map<utility::string_t, Property>());
            newItem->fromJson(val[U("additional_properties")]);
            setAdditionalProperties( newItem );
        }
        
    }
    if(val.has_field(U("born")))
    {
        setBorn(ModelBase::stringFromJson(val[U("born")]));
        
    }
    if(val.has_field(U("contribution_count")))
    {
        setContributionCount(ModelBase::int32_tFromJson(val[U("contribution_count")]));
    }
    {
        m_Contributions.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("contributions")))
        {
        for( auto& item : val[U("contributions")].as_array() )
        {
            
            if(item.is_null())
            {
                m_Contributions.push_back( std::shared_ptr<ContributionResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<ContributionResource> newItem(new ContributionResource());
                newItem->fromJson(item);
                m_Contributions.push_back( newItem );
            }
            
        }
        }
    }
    if(val.has_field(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromJson(val[U("created_date")]));
    }
    if(val.has_field(U("died")))
    {
        setDied(ModelBase::stringFromJson(val[U("died")]));
        
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int64_tFromJson(val[U("id")]));
    }
    if(val.has_field(U("long_description")))
    {
        setLongDescription(ModelBase::stringFromJson(val[U("long_description")]));
        
    }
    setName(ModelBase::stringFromJson(val[U("name")]));
    if(val.has_field(U("priority")))
    {
        setPriority(ModelBase::int32_tFromJson(val[U("priority")]));
    }
    if(val.has_field(U("short_description")))
    {
        setShortDescription(ModelBase::stringFromJson(val[U("short_description")]));
        
    }
    if(val.has_field(U("template")))
    {
        setTemplate(ModelBase::stringFromJson(val[U("template")]));
        
    }
    if(val.has_field(U("updated_date")))
    {
        setUpdatedDate(ModelBase::int64_tFromJson(val[U("updated_date")]));
    }
    
}

void ArtistResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Additional_propertiesIsSet)
    {
        if (m_Additional_properties.get())
        {
            m_Additional_properties->toMultipart(multipart, U("additional_properties."));
        }
        
    }
    if(m_BornIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("born"), m_Born));
        
    }
    if(m_Contribution_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("contribution_count"), m_Contribution_count));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Contributions )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("contributions"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_Created_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("created_date"), m_Created_date));
    }
    if(m_DiedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("died"), m_Died));
        
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    if(m_Long_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("long_description"), m_Long_description));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    if(m_PriorityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("priority"), m_Priority));
    }
    if(m_Short_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("short_description"), m_Short_description));
        
    }
    if(m_TemplateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("template"), m_Template));
        
    }
    if(m_Updated_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("updated_date"), m_Updated_date));
    }
    
}

void ArtistResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("additional_properties")))
    {
        if(multipart->hasContent(U("additional_properties")))
        {
            std::map<utility::string_t, std::shared_ptr<Property>> newItem(std::map<utility::string_t, Property>());
            newItem->fromMultiPart(multipart, U("additional_properties."));
            setAdditionalProperties( newItem );
        }
        
    }
    if(multipart->hasContent(U("born")))
    {
        setBorn(ModelBase::stringFromHttpContent(multipart->getContent(U("born"))));
        
    }
    if(multipart->hasContent(U("contribution_count")))
    {
        setContributionCount(ModelBase::int32_tFromHttpContent(multipart->getContent(U("contribution_count"))));
    }
    {
        m_Contributions.clear();
        if(multipart->hasContent(U("contributions")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("contributions"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_Contributions.push_back( std::shared_ptr<ContributionResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<ContributionResource> newItem(new ContributionResource());
                newItem->fromJson(item);
                m_Contributions.push_back( newItem );
            }
            
        }
        }
    }
    if(multipart->hasContent(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("created_date"))));
    }
    if(multipart->hasContent(U("died")))
    {
        setDied(ModelBase::stringFromHttpContent(multipart->getContent(U("died"))));
        
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int64_tFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("long_description")))
    {
        setLongDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("long_description"))));
        
    }
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    if(multipart->hasContent(U("priority")))
    {
        setPriority(ModelBase::int32_tFromHttpContent(multipart->getContent(U("priority"))));
    }
    if(multipart->hasContent(U("short_description")))
    {
        setShortDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("short_description"))));
        
    }
    if(multipart->hasContent(U("template")))
    {
        setTemplate(ModelBase::stringFromHttpContent(multipart->getContent(U("template"))));
        
    }
    if(multipart->hasContent(U("updated_date")))
    {
        setUpdatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("updated_date"))));
    }
    
}


std::map<utility::string_t, std::shared_ptr<Property>>& ArtistResource::getAdditionalProperties()
{
    return m_Additional_properties;
}
bool ArtistResource::additional_propertiesIsSet() const
{
    return m_Additional_propertiesIsSet;
}
void ArtistResource::unsetAdditional_properties()
{
    m_Additional_propertiesIsSet = false;
}
utility::string_t ArtistResource::getBorn() const
{
    return m_Born;
}
void ArtistResource::setBorn(utility::string_t value)
{
    m_Born = value;
    m_BornIsSet = true;
}
bool ArtistResource::bornIsSet() const
{
    return m_BornIsSet;
}
void ArtistResource::unsetBorn()
{
    m_BornIsSet = false;
}
int32_t ArtistResource::getContributionCount() const
{
    return m_Contribution_count;
}
void ArtistResource::setContributionCount(int32_t value)
{
    m_Contribution_count = value;
    m_Contribution_countIsSet = true;
}
bool ArtistResource::contribution_countIsSet() const
{
    return m_Contribution_countIsSet;
}
void ArtistResource::unsetContribution_count()
{
    m_Contribution_countIsSet = false;
}
std::vector<std::shared_ptr<ContributionResource>>& ArtistResource::getContributions()
{
    return m_Contributions;
}
bool ArtistResource::contributionsIsSet() const
{
    return m_ContributionsIsSet;
}
void ArtistResource::unsetContributions()
{
    m_ContributionsIsSet = false;
}
int64_t ArtistResource::getCreatedDate() const
{
    return m_Created_date;
}
void ArtistResource::setCreatedDate(int64_t value)
{
    m_Created_date = value;
    m_Created_dateIsSet = true;
}
bool ArtistResource::created_dateIsSet() const
{
    return m_Created_dateIsSet;
}
void ArtistResource::unsetCreated_date()
{
    m_Created_dateIsSet = false;
}
utility::string_t ArtistResource::getDied() const
{
    return m_Died;
}
void ArtistResource::setDied(utility::string_t value)
{
    m_Died = value;
    m_DiedIsSet = true;
}
bool ArtistResource::diedIsSet() const
{
    return m_DiedIsSet;
}
void ArtistResource::unsetDied()
{
    m_DiedIsSet = false;
}
int64_t ArtistResource::getId() const
{
    return m_Id;
}
void ArtistResource::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool ArtistResource::idIsSet() const
{
    return m_IdIsSet;
}
void ArtistResource::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t ArtistResource::getLongDescription() const
{
    return m_Long_description;
}
void ArtistResource::setLongDescription(utility::string_t value)
{
    m_Long_description = value;
    m_Long_descriptionIsSet = true;
}
bool ArtistResource::long_descriptionIsSet() const
{
    return m_Long_descriptionIsSet;
}
void ArtistResource::unsetLong_description()
{
    m_Long_descriptionIsSet = false;
}
utility::string_t ArtistResource::getName() const
{
    return m_Name;
}
void ArtistResource::setName(utility::string_t value)
{
    m_Name = value;
    
}
int32_t ArtistResource::getPriority() const
{
    return m_Priority;
}
void ArtistResource::setPriority(int32_t value)
{
    m_Priority = value;
    m_PriorityIsSet = true;
}
bool ArtistResource::priorityIsSet() const
{
    return m_PriorityIsSet;
}
void ArtistResource::unsetPriority()
{
    m_PriorityIsSet = false;
}
utility::string_t ArtistResource::getShortDescription() const
{
    return m_Short_description;
}
void ArtistResource::setShortDescription(utility::string_t value)
{
    m_Short_description = value;
    m_Short_descriptionIsSet = true;
}
bool ArtistResource::short_descriptionIsSet() const
{
    return m_Short_descriptionIsSet;
}
void ArtistResource::unsetShort_description()
{
    m_Short_descriptionIsSet = false;
}
utility::string_t ArtistResource::getTemplate() const
{
    return m_Template;
}
void ArtistResource::setTemplate(utility::string_t value)
{
    m_Template = value;
    m_TemplateIsSet = true;
}
bool ArtistResource::templateIsSet() const
{
    return m_TemplateIsSet;
}
void ArtistResource::unsetTemplate()
{
    m_TemplateIsSet = false;
}
int64_t ArtistResource::getUpdatedDate() const
{
    return m_Updated_date;
}
void ArtistResource::setUpdatedDate(int64_t value)
{
    m_Updated_date = value;
    m_Updated_dateIsSet = true;
}
bool ArtistResource::updated_dateIsSet() const
{
    return m_Updated_dateIsSet;
}
void ArtistResource::unsetUpdated_date()
{
    m_Updated_dateIsSet = false;
}

}
}
}
}

