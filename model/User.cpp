/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "User.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

User::User()
{
    m_Additional_propertiesIsSet = false;
    m_Address = U("");
    m_AddressIsSet = false;
    m_Address2 = U("");
    m_Address2IsSet = false;
    m_AffiliateIsSet = false;
    m_Avatar_url = U("");
    m_Avatar_urlIsSet = false;
    m_ChildrenIsSet = false;
    m_City = U("");
    m_CityIsSet = false;
    m_CountryIsSet = false;
    m_CurrencyIsSet = false;
    m_Date_created = 0;
    m_Date_createdIsSet = false;
    m_Date_of_birth = 0;
    m_Date_of_birthIsSet = false;
    m_Date_updated = 0;
    m_Date_updatedIsSet = false;
    m_Description = U("");
    m_DescriptionIsSet = false;
    m_Display_name = U("");
    m_Display_nameIsSet = false;
    m_Email = U("");
    m_EmailIsSet = false;
    m_First_name = U("");
    m_First_nameIsSet = false;
    m_Fullname = U("");
    m_FullnameIsSet = false;
    m_Gender = U("");
    m_GenderIsSet = false;
    m_GroupsIsSet = false;
    m_Guest = false;
    m_GuestIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_Invite_token = U("");
    m_Invite_tokenIsSet = false;
    m_LangIsSet = false;
    m_Last_activity = 0;
    m_Last_activityIsSet = false;
    m_Last_login = 0;
    m_Last_loginIsSet = false;
    m_Last_name = U("");
    m_Last_nameIsSet = false;
    m_Lockout_attempts = 0;
    m_Lockout_attemptsIsSet = false;
    m_Lockout_date = 0;
    m_Lockout_dateIsSet = false;
    m_Mobile_number = U("");
    m_Mobile_numberIsSet = false;
    m_Old_id = 0;
    m_Old_idIsSet = false;
    m_ParentsIsSet = false;
    m_Password = U("");
    m_PasswordIsSet = false;
    m_Postal_code = U("");
    m_Postal_codeIsSet = false;
    m_Properties_string = U("");
    m_Properties_stringIsSet = false;
    m_RolesIsSet = false;
    m_State = U("");
    m_StateIsSet = false;
    m_Status = U("");
    m_StatusIsSet = false;
    m_Tag_stringsIsSet = false;
    m_TagsIsSet = false;
    m_Template = U("");
    m_TemplateIsSet = false;
    m_TimezoneIsSet = false;
    m_Token = U("");
    m_TokenIsSet = false;
    m_Type_hint = U("");
    m_Type_hintIsSet = false;
    m_Username = U("");
    m_UsernameIsSet = false;
    
}

User::~User()
{
}

void User::validate()
{
    // TODO: implement validation
}

web::json::value User::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Additional_propertiesIsSet)
    {
        val[U("additional_properties")] = ModelBase::toJson(m_Additional_properties);
    }
    if(m_AddressIsSet)
    {
        val[U("address")] = ModelBase::toJson(m_Address);
    }
    if(m_Address2IsSet)
    {
        val[U("address2")] = ModelBase::toJson(m_Address2);
    }
    if(m_AffiliateIsSet)
    {
        val[U("affiliate")] = ModelBase::toJson(m_Affiliate);
    }
    if(m_Avatar_urlIsSet)
    {
        val[U("avatar_url")] = ModelBase::toJson(m_Avatar_url);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Children )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("children")] = web::json::value::array(jsonArray);
        }
    }
    if(m_CityIsSet)
    {
        val[U("city")] = ModelBase::toJson(m_City);
    }
    if(m_CountryIsSet)
    {
        val[U("country")] = ModelBase::toJson(m_Country);
    }
    if(m_CurrencyIsSet)
    {
        val[U("currency")] = ModelBase::toJson(m_Currency);
    }
    if(m_Date_createdIsSet)
    {
        val[U("date_created")] = ModelBase::toJson(m_Date_created);
    }
    if(m_Date_of_birthIsSet)
    {
        val[U("date_of_birth")] = ModelBase::toJson(m_Date_of_birth);
    }
    if(m_Date_updatedIsSet)
    {
        val[U("date_updated")] = ModelBase::toJson(m_Date_updated);
    }
    if(m_DescriptionIsSet)
    {
        val[U("description")] = ModelBase::toJson(m_Description);
    }
    if(m_Display_nameIsSet)
    {
        val[U("display_name")] = ModelBase::toJson(m_Display_name);
    }
    if(m_EmailIsSet)
    {
        val[U("email")] = ModelBase::toJson(m_Email);
    }
    if(m_First_nameIsSet)
    {
        val[U("first_name")] = ModelBase::toJson(m_First_name);
    }
    if(m_FullnameIsSet)
    {
        val[U("fullname")] = ModelBase::toJson(m_Fullname);
    }
    if(m_GenderIsSet)
    {
        val[U("gender")] = ModelBase::toJson(m_Gender);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Groups )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("groups")] = web::json::value::array(jsonArray);
        }
    }
    if(m_GuestIsSet)
    {
        val[U("guest")] = ModelBase::toJson(m_Guest);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_Invite_tokenIsSet)
    {
        val[U("invite_token")] = ModelBase::toJson(m_Invite_token);
    }
    if(m_LangIsSet)
    {
        val[U("lang")] = ModelBase::toJson(m_Lang);
    }
    if(m_Last_activityIsSet)
    {
        val[U("last_activity")] = ModelBase::toJson(m_Last_activity);
    }
    if(m_Last_loginIsSet)
    {
        val[U("last_login")] = ModelBase::toJson(m_Last_login);
    }
    if(m_Last_nameIsSet)
    {
        val[U("last_name")] = ModelBase::toJson(m_Last_name);
    }
    if(m_Lockout_attemptsIsSet)
    {
        val[U("lockout_attempts")] = ModelBase::toJson(m_Lockout_attempts);
    }
    if(m_Lockout_dateIsSet)
    {
        val[U("lockout_date")] = ModelBase::toJson(m_Lockout_date);
    }
    if(m_Mobile_numberIsSet)
    {
        val[U("mobile_number")] = ModelBase::toJson(m_Mobile_number);
    }
    if(m_Old_idIsSet)
    {
        val[U("old_id")] = ModelBase::toJson(m_Old_id);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Parents )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("parents")] = web::json::value::array(jsonArray);
        }
    }
    if(m_PasswordIsSet)
    {
        val[U("password")] = ModelBase::toJson(m_Password);
    }
    if(m_Postal_codeIsSet)
    {
        val[U("postal_code")] = ModelBase::toJson(m_Postal_code);
    }
    if(m_Properties_stringIsSet)
    {
        val[U("properties_string")] = ModelBase::toJson(m_Properties_string);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Roles )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("roles")] = web::json::value::array(jsonArray);
        }
    }
    if(m_StateIsSet)
    {
        val[U("state")] = ModelBase::toJson(m_State);
    }
    if(m_StatusIsSet)
    {
        val[U("status")] = ModelBase::toJson(m_Status);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tag_strings )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("tag_strings")] = web::json::value::array(jsonArray);
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("tags")] = web::json::value::array(jsonArray);
        }
    }
    if(m_TemplateIsSet)
    {
        val[U("template")] = ModelBase::toJson(m_Template);
    }
    if(m_TimezoneIsSet)
    {
        val[U("timezone")] = ModelBase::toJson(m_Timezone);
    }
    if(m_TokenIsSet)
    {
        val[U("token")] = ModelBase::toJson(m_Token);
    }
    if(m_Type_hintIsSet)
    {
        val[U("type_hint")] = ModelBase::toJson(m_Type_hint);
    }
    if(m_UsernameIsSet)
    {
        val[U("username")] = ModelBase::toJson(m_Username);
    }
    

    return val;
}

void User::fromJson(web::json::value& val)
{
    if(val.has_field(U("additional_properties")))
    {
        if(!val[U("additional_properties")].is_null())
        {
            std::map<utility::string_t, std::shared_ptr<Property>> newItem(std::map<utility::string_t, Property>());
            newItem->fromJson(val[U("additional_properties")]);
            setAdditionalProperties( newItem );
        }
        
    }
    if(val.has_field(U("address")))
    {
        setAddress(ModelBase::stringFromJson(val[U("address")]));
        
    }
    if(val.has_field(U("address2")))
    {
        setAddress2(ModelBase::stringFromJson(val[U("address2")]));
        
    }
    if(val.has_field(U("affiliate")))
    {
        if(!val[U("affiliate")].is_null())
        {
            std::shared_ptr<Affiliate> newItem(new Affiliate());
            newItem->fromJson(val[U("affiliate")]);
            setAffiliate( newItem );
        }
        
    }
    if(val.has_field(U("avatar_url")))
    {
        setAvatarUrl(ModelBase::stringFromJson(val[U("avatar_url")]));
        
    }
    {
        m_Children.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("children")))
        {
        for( auto& item : val[U("children")].as_array() )
        {
            
            if(item.is_null())
            {
                m_Children.push_back( std::shared_ptr<UserRelationship>(nullptr) );
            }
            else
            {
                std::shared_ptr<UserRelationship> newItem(new UserRelationship());
                newItem->fromJson(item);
                m_Children.push_back( newItem );
            }
            
        }
        }
    }
    if(val.has_field(U("city")))
    {
        setCity(ModelBase::stringFromJson(val[U("city")]));
        
    }
    if(val.has_field(U("country")))
    {
        if(!val[U("country")].is_null())
        {
            std::shared_ptr<Country> newItem(new Country());
            newItem->fromJson(val[U("country")]);
            setCountry( newItem );
        }
        
    }
    if(val.has_field(U("currency")))
    {
        if(!val[U("currency")].is_null())
        {
            std::shared_ptr<Currency> newItem(new Currency());
            newItem->fromJson(val[U("currency")]);
            setCurrency( newItem );
        }
        
    }
    if(val.has_field(U("date_created")))
    {
        setDateCreated(ModelBase::int64_tFromJson(val[U("date_created")]));
    }
    if(val.has_field(U("date_of_birth")))
    {
        setDateOfBirth(ModelBase::int64_tFromJson(val[U("date_of_birth")]));
    }
    if(val.has_field(U("date_updated")))
    {
        setDateUpdated(ModelBase::int64_tFromJson(val[U("date_updated")]));
    }
    if(val.has_field(U("description")))
    {
        setDescription(ModelBase::stringFromJson(val[U("description")]));
        
    }
    if(val.has_field(U("display_name")))
    {
        setDisplayName(ModelBase::stringFromJson(val[U("display_name")]));
        
    }
    if(val.has_field(U("email")))
    {
        setEmail(ModelBase::stringFromJson(val[U("email")]));
        
    }
    if(val.has_field(U("first_name")))
    {
        setFirstName(ModelBase::stringFromJson(val[U("first_name")]));
        
    }
    if(val.has_field(U("fullname")))
    {
        setFullname(ModelBase::stringFromJson(val[U("fullname")]));
        
    }
    if(val.has_field(U("gender")))
    {
        setGender(ModelBase::stringFromJson(val[U("gender")]));
        
    }
    {
        m_Groups.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("groups")))
        {
        for( auto& item : val[U("groups")].as_array() )
        {
            
            if(item.is_null())
            {
                m_Groups.push_back( std::shared_ptr<GroupMember>(nullptr) );
            }
            else
            {
                std::shared_ptr<GroupMember> newItem(new GroupMember());
                newItem->fromJson(item);
                m_Groups.push_back( newItem );
            }
            
        }
        }
    }
    if(val.has_field(U("guest")))
    {
        setGuest(ModelBase::boolFromJson(val[U("guest")]));
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int32_tFromJson(val[U("id")]));
    }
    if(val.has_field(U("invite_token")))
    {
        setInviteToken(ModelBase::stringFromJson(val[U("invite_token")]));
        
    }
    if(val.has_field(U("lang")))
    {
        if(!val[U("lang")].is_null())
        {
            std::shared_ptr<Language> newItem(new Language());
            newItem->fromJson(val[U("lang")]);
            setLang( newItem );
        }
        
    }
    if(val.has_field(U("last_activity")))
    {
        setLastActivity(ModelBase::int64_tFromJson(val[U("last_activity")]));
    }
    if(val.has_field(U("last_login")))
    {
        setLastLogin(ModelBase::int64_tFromJson(val[U("last_login")]));
    }
    if(val.has_field(U("last_name")))
    {
        setLastName(ModelBase::stringFromJson(val[U("last_name")]));
        
    }
    if(val.has_field(U("lockout_attempts")))
    {
        setLockoutAttempts(ModelBase::int32_tFromJson(val[U("lockout_attempts")]));
    }
    if(val.has_field(U("lockout_date")))
    {
        setLockoutDate(ModelBase::int64_tFromJson(val[U("lockout_date")]));
    }
    if(val.has_field(U("mobile_number")))
    {
        setMobileNumber(ModelBase::stringFromJson(val[U("mobile_number")]));
        
    }
    if(val.has_field(U("old_id")))
    {
        setOldId(ModelBase::int32_tFromJson(val[U("old_id")]));
    }
    {
        m_Parents.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("parents")))
        {
        for( auto& item : val[U("parents")].as_array() )
        {
            
            if(item.is_null())
            {
                m_Parents.push_back( std::shared_ptr<UserRelationship>(nullptr) );
            }
            else
            {
                std::shared_ptr<UserRelationship> newItem(new UserRelationship());
                newItem->fromJson(item);
                m_Parents.push_back( newItem );
            }
            
        }
        }
    }
    if(val.has_field(U("password")))
    {
        setPassword(ModelBase::stringFromJson(val[U("password")]));
        
    }
    if(val.has_field(U("postal_code")))
    {
        setPostalCode(ModelBase::stringFromJson(val[U("postal_code")]));
        
    }
    if(val.has_field(U("properties_string")))
    {
        setPropertiesString(ModelBase::stringFromJson(val[U("properties_string")]));
        
    }
    {
        m_Roles.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("roles")))
        {
        for( auto& item : val[U("roles")].as_array() )
        {
            
            if(item.is_null())
            {
                m_Roles.push_back( std::shared_ptr<Role>(nullptr) );
            }
            else
            {
                std::shared_ptr<Role> newItem(new Role());
                newItem->fromJson(item);
                m_Roles.push_back( newItem );
            }
            
        }
        }
    }
    if(val.has_field(U("state")))
    {
        setState(ModelBase::stringFromJson(val[U("state")]));
        
    }
    if(val.has_field(U("status")))
    {
        setStatus(ModelBase::stringFromJson(val[U("status")]));
        
    }
    {
        m_Tag_strings.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("tag_strings")))
        {
        for( auto& item : val[U("tag_strings")].as_array() )
        {
            m_Tag_strings.push_back(ModelBase::stringFromJson(item));
            
        }
        }
    }
    {
        m_Tags.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("tags")))
        {
        for( auto& item : val[U("tags")].as_array() )
        {
            
            if(item.is_null())
            {
                m_Tags.push_back( std::shared_ptr<UserTag>(nullptr) );
            }
            else
            {
                std::shared_ptr<UserTag> newItem(new UserTag());
                newItem->fromJson(item);
                m_Tags.push_back( newItem );
            }
            
        }
        }
    }
    if(val.has_field(U("template")))
    {
        setTemplate(ModelBase::stringFromJson(val[U("template")]));
        
    }
    if(val.has_field(U("timezone")))
    {
        if(!val[U("timezone")].is_null())
        {
            std::shared_ptr<Timezone> newItem(new Timezone());
            newItem->fromJson(val[U("timezone")]);
            setTimezone( newItem );
        }
        
    }
    if(val.has_field(U("token")))
    {
        setToken(ModelBase::stringFromJson(val[U("token")]));
        
    }
    if(val.has_field(U("type_hint")))
    {
        setTypeHint(ModelBase::stringFromJson(val[U("type_hint")]));
        
    }
    if(val.has_field(U("username")))
    {
        setUsername(ModelBase::stringFromJson(val[U("username")]));
        
    }
    
}

void User::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Additional_propertiesIsSet)
    {
        if (m_Additional_properties.get())
        {
            m_Additional_properties->toMultipart(multipart, U("additional_properties."));
        }
        
    }
    if(m_AddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("address"), m_Address));
        
    }
    if(m_Address2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("address2"), m_Address2));
        
    }
    if(m_AffiliateIsSet)
    {
        if (m_Affiliate.get())
        {
            m_Affiliate->toMultipart(multipart, U("affiliate."));
        }
        
    }
    if(m_Avatar_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("avatar_url"), m_Avatar_url));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Children )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("children"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_CityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("city"), m_City));
        
    }
    if(m_CountryIsSet)
    {
        if (m_Country.get())
        {
            m_Country->toMultipart(multipart, U("country."));
        }
        
    }
    if(m_CurrencyIsSet)
    {
        if (m_Currency.get())
        {
            m_Currency->toMultipart(multipart, U("currency."));
        }
        
    }
    if(m_Date_createdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("date_created"), m_Date_created));
    }
    if(m_Date_of_birthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("date_of_birth"), m_Date_of_birth));
    }
    if(m_Date_updatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("date_updated"), m_Date_updated));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("description"), m_Description));
        
    }
    if(m_Display_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("display_name"), m_Display_name));
        
    }
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("email"), m_Email));
        
    }
    if(m_First_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("first_name"), m_First_name));
        
    }
    if(m_FullnameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("fullname"), m_Fullname));
        
    }
    if(m_GenderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("gender"), m_Gender));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Groups )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("groups"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_GuestIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("guest"), m_Guest));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    if(m_Invite_tokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("invite_token"), m_Invite_token));
        
    }
    if(m_LangIsSet)
    {
        if (m_Lang.get())
        {
            m_Lang->toMultipart(multipart, U("lang."));
        }
        
    }
    if(m_Last_activityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("last_activity"), m_Last_activity));
    }
    if(m_Last_loginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("last_login"), m_Last_login));
    }
    if(m_Last_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("last_name"), m_Last_name));
        
    }
    if(m_Lockout_attemptsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("lockout_attempts"), m_Lockout_attempts));
    }
    if(m_Lockout_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("lockout_date"), m_Lockout_date));
    }
    if(m_Mobile_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("mobile_number"), m_Mobile_number));
        
    }
    if(m_Old_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("old_id"), m_Old_id));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Parents )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("parents"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_PasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("password"), m_Password));
        
    }
    if(m_Postal_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("postal_code"), m_Postal_code));
        
    }
    if(m_Properties_stringIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("properties_string"), m_Properties_string));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Roles )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("roles"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_StateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("state"), m_State));
        
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("status"), m_Status));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tag_strings )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("tag_strings"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("tags"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_TemplateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("template"), m_Template));
        
    }
    if(m_TimezoneIsSet)
    {
        if (m_Timezone.get())
        {
            m_Timezone->toMultipart(multipart, U("timezone."));
        }
        
    }
    if(m_TokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("token"), m_Token));
        
    }
    if(m_Type_hintIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("type_hint"), m_Type_hint));
        
    }
    if(m_UsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("username"), m_Username));
        
    }
    
}

void User::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("additional_properties")))
    {
        if(multipart->hasContent(U("additional_properties")))
        {
            std::map<utility::string_t, std::shared_ptr<Property>> newItem(std::map<utility::string_t, Property>());
            newItem->fromMultiPart(multipart, U("additional_properties."));
            setAdditionalProperties( newItem );
        }
        
    }
    if(multipart->hasContent(U("address")))
    {
        setAddress(ModelBase::stringFromHttpContent(multipart->getContent(U("address"))));
        
    }
    if(multipart->hasContent(U("address2")))
    {
        setAddress2(ModelBase::stringFromHttpContent(multipart->getContent(U("address2"))));
        
    }
    if(multipart->hasContent(U("affiliate")))
    {
        if(multipart->hasContent(U("affiliate")))
        {
            std::shared_ptr<Affiliate> newItem(new Affiliate());
            newItem->fromMultiPart(multipart, U("affiliate."));
            setAffiliate( newItem );
        }
        
    }
    if(multipart->hasContent(U("avatar_url")))
    {
        setAvatarUrl(ModelBase::stringFromHttpContent(multipart->getContent(U("avatar_url"))));
        
    }
    {
        m_Children.clear();
        if(multipart->hasContent(U("children")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("children"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_Children.push_back( std::shared_ptr<UserRelationship>(nullptr) );
            }
            else
            {
                std::shared_ptr<UserRelationship> newItem(new UserRelationship());
                newItem->fromJson(item);
                m_Children.push_back( newItem );
            }
            
        }
        }
    }
    if(multipart->hasContent(U("city")))
    {
        setCity(ModelBase::stringFromHttpContent(multipart->getContent(U("city"))));
        
    }
    if(multipart->hasContent(U("country")))
    {
        if(multipart->hasContent(U("country")))
        {
            std::shared_ptr<Country> newItem(new Country());
            newItem->fromMultiPart(multipart, U("country."));
            setCountry( newItem );
        }
        
    }
    if(multipart->hasContent(U("currency")))
    {
        if(multipart->hasContent(U("currency")))
        {
            std::shared_ptr<Currency> newItem(new Currency());
            newItem->fromMultiPart(multipart, U("currency."));
            setCurrency( newItem );
        }
        
    }
    if(multipart->hasContent(U("date_created")))
    {
        setDateCreated(ModelBase::int64_tFromHttpContent(multipart->getContent(U("date_created"))));
    }
    if(multipart->hasContent(U("date_of_birth")))
    {
        setDateOfBirth(ModelBase::int64_tFromHttpContent(multipart->getContent(U("date_of_birth"))));
    }
    if(multipart->hasContent(U("date_updated")))
    {
        setDateUpdated(ModelBase::int64_tFromHttpContent(multipart->getContent(U("date_updated"))));
    }
    if(multipart->hasContent(U("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("description"))));
        
    }
    if(multipart->hasContent(U("display_name")))
    {
        setDisplayName(ModelBase::stringFromHttpContent(multipart->getContent(U("display_name"))));
        
    }
    if(multipart->hasContent(U("email")))
    {
        setEmail(ModelBase::stringFromHttpContent(multipart->getContent(U("email"))));
        
    }
    if(multipart->hasContent(U("first_name")))
    {
        setFirstName(ModelBase::stringFromHttpContent(multipart->getContent(U("first_name"))));
        
    }
    if(multipart->hasContent(U("fullname")))
    {
        setFullname(ModelBase::stringFromHttpContent(multipart->getContent(U("fullname"))));
        
    }
    if(multipart->hasContent(U("gender")))
    {
        setGender(ModelBase::stringFromHttpContent(multipart->getContent(U("gender"))));
        
    }
    {
        m_Groups.clear();
        if(multipart->hasContent(U("groups")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("groups"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_Groups.push_back( std::shared_ptr<GroupMember>(nullptr) );
            }
            else
            {
                std::shared_ptr<GroupMember> newItem(new GroupMember());
                newItem->fromJson(item);
                m_Groups.push_back( newItem );
            }
            
        }
        }
    }
    if(multipart->hasContent(U("guest")))
    {
        setGuest(ModelBase::boolFromHttpContent(multipart->getContent(U("guest"))));
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("invite_token")))
    {
        setInviteToken(ModelBase::stringFromHttpContent(multipart->getContent(U("invite_token"))));
        
    }
    if(multipart->hasContent(U("lang")))
    {
        if(multipart->hasContent(U("lang")))
        {
            std::shared_ptr<Language> newItem(new Language());
            newItem->fromMultiPart(multipart, U("lang."));
            setLang( newItem );
        }
        
    }
    if(multipart->hasContent(U("last_activity")))
    {
        setLastActivity(ModelBase::int64_tFromHttpContent(multipart->getContent(U("last_activity"))));
    }
    if(multipart->hasContent(U("last_login")))
    {
        setLastLogin(ModelBase::int64_tFromHttpContent(multipart->getContent(U("last_login"))));
    }
    if(multipart->hasContent(U("last_name")))
    {
        setLastName(ModelBase::stringFromHttpContent(multipart->getContent(U("last_name"))));
        
    }
    if(multipart->hasContent(U("lockout_attempts")))
    {
        setLockoutAttempts(ModelBase::int32_tFromHttpContent(multipart->getContent(U("lockout_attempts"))));
    }
    if(multipart->hasContent(U("lockout_date")))
    {
        setLockoutDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("lockout_date"))));
    }
    if(multipart->hasContent(U("mobile_number")))
    {
        setMobileNumber(ModelBase::stringFromHttpContent(multipart->getContent(U("mobile_number"))));
        
    }
    if(multipart->hasContent(U("old_id")))
    {
        setOldId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("old_id"))));
    }
    {
        m_Parents.clear();
        if(multipart->hasContent(U("parents")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("parents"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_Parents.push_back( std::shared_ptr<UserRelationship>(nullptr) );
            }
            else
            {
                std::shared_ptr<UserRelationship> newItem(new UserRelationship());
                newItem->fromJson(item);
                m_Parents.push_back( newItem );
            }
            
        }
        }
    }
    if(multipart->hasContent(U("password")))
    {
        setPassword(ModelBase::stringFromHttpContent(multipart->getContent(U("password"))));
        
    }
    if(multipart->hasContent(U("postal_code")))
    {
        setPostalCode(ModelBase::stringFromHttpContent(multipart->getContent(U("postal_code"))));
        
    }
    if(multipart->hasContent(U("properties_string")))
    {
        setPropertiesString(ModelBase::stringFromHttpContent(multipart->getContent(U("properties_string"))));
        
    }
    {
        m_Roles.clear();
        if(multipart->hasContent(U("roles")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("roles"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_Roles.push_back( std::shared_ptr<Role>(nullptr) );
            }
            else
            {
                std::shared_ptr<Role> newItem(new Role());
                newItem->fromJson(item);
                m_Roles.push_back( newItem );
            }
            
        }
        }
    }
    if(multipart->hasContent(U("state")))
    {
        setState(ModelBase::stringFromHttpContent(multipart->getContent(U("state"))));
        
    }
    if(multipart->hasContent(U("status")))
    {
        setStatus(ModelBase::stringFromHttpContent(multipart->getContent(U("status"))));
        
    }
    {
        m_Tag_strings.clear();
        if(multipart->hasContent(U("tag_strings")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("tag_strings"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Tag_strings.push_back(ModelBase::stringFromJson(item));
            
        }
        }
    }
    {
        m_Tags.clear();
        if(multipart->hasContent(U("tags")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("tags"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_Tags.push_back( std::shared_ptr<UserTag>(nullptr) );
            }
            else
            {
                std::shared_ptr<UserTag> newItem(new UserTag());
                newItem->fromJson(item);
                m_Tags.push_back( newItem );
            }
            
        }
        }
    }
    if(multipart->hasContent(U("template")))
    {
        setTemplate(ModelBase::stringFromHttpContent(multipart->getContent(U("template"))));
        
    }
    if(multipart->hasContent(U("timezone")))
    {
        if(multipart->hasContent(U("timezone")))
        {
            std::shared_ptr<Timezone> newItem(new Timezone());
            newItem->fromMultiPart(multipart, U("timezone."));
            setTimezone( newItem );
        }
        
    }
    if(multipart->hasContent(U("token")))
    {
        setToken(ModelBase::stringFromHttpContent(multipart->getContent(U("token"))));
        
    }
    if(multipart->hasContent(U("type_hint")))
    {
        setTypeHint(ModelBase::stringFromHttpContent(multipart->getContent(U("type_hint"))));
        
    }
    if(multipart->hasContent(U("username")))
    {
        setUsername(ModelBase::stringFromHttpContent(multipart->getContent(U("username"))));
        
    }
    
}


std::map<utility::string_t, std::shared_ptr<Property>>& User::getAdditionalProperties()
{
    return m_Additional_properties;
}
bool User::additional_propertiesIsSet() const
{
    return m_Additional_propertiesIsSet;
}
void User::unsetAdditional_properties()
{
    m_Additional_propertiesIsSet = false;
}
utility::string_t User::getAddress() const
{
    return m_Address;
}
void User::setAddress(utility::string_t value)
{
    m_Address = value;
    m_AddressIsSet = true;
}
bool User::addressIsSet() const
{
    return m_AddressIsSet;
}
void User::unsetAddress()
{
    m_AddressIsSet = false;
}
utility::string_t User::getAddress2() const
{
    return m_Address2;
}
void User::setAddress2(utility::string_t value)
{
    m_Address2 = value;
    m_Address2IsSet = true;
}
bool User::address2IsSet() const
{
    return m_Address2IsSet;
}
void User::unsetAddress2()
{
    m_Address2IsSet = false;
}
std::shared_ptr<Affiliate> User::getAffiliate() const
{
    return m_Affiliate;
}
void User::setAffiliate(std::shared_ptr<Affiliate> value)
{
    m_Affiliate = value;
    m_AffiliateIsSet = true;
}
bool User::affiliateIsSet() const
{
    return m_AffiliateIsSet;
}
void User::unsetAffiliate()
{
    m_AffiliateIsSet = false;
}
utility::string_t User::getAvatarUrl() const
{
    return m_Avatar_url;
}
void User::setAvatarUrl(utility::string_t value)
{
    m_Avatar_url = value;
    m_Avatar_urlIsSet = true;
}
bool User::avatar_urlIsSet() const
{
    return m_Avatar_urlIsSet;
}
void User::unsetAvatar_url()
{
    m_Avatar_urlIsSet = false;
}
std::vector<std::shared_ptr<UserRelationship>>& User::getChildren()
{
    return m_Children;
}
bool User::childrenIsSet() const
{
    return m_ChildrenIsSet;
}
void User::unsetChildren()
{
    m_ChildrenIsSet = false;
}
utility::string_t User::getCity() const
{
    return m_City;
}
void User::setCity(utility::string_t value)
{
    m_City = value;
    m_CityIsSet = true;
}
bool User::cityIsSet() const
{
    return m_CityIsSet;
}
void User::unsetCity()
{
    m_CityIsSet = false;
}
std::shared_ptr<Country> User::getCountry() const
{
    return m_Country;
}
void User::setCountry(std::shared_ptr<Country> value)
{
    m_Country = value;
    m_CountryIsSet = true;
}
bool User::countryIsSet() const
{
    return m_CountryIsSet;
}
void User::unsetCountry()
{
    m_CountryIsSet = false;
}
std::shared_ptr<Currency> User::getCurrency() const
{
    return m_Currency;
}
void User::setCurrency(std::shared_ptr<Currency> value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}
bool User::currencyIsSet() const
{
    return m_CurrencyIsSet;
}
void User::unsetCurrency()
{
    m_CurrencyIsSet = false;
}
int64_t User::getDateCreated() const
{
    return m_Date_created;
}
void User::setDateCreated(int64_t value)
{
    m_Date_created = value;
    m_Date_createdIsSet = true;
}
bool User::date_createdIsSet() const
{
    return m_Date_createdIsSet;
}
void User::unsetDate_created()
{
    m_Date_createdIsSet = false;
}
int64_t User::getDateOfBirth() const
{
    return m_Date_of_birth;
}
void User::setDateOfBirth(int64_t value)
{
    m_Date_of_birth = value;
    m_Date_of_birthIsSet = true;
}
bool User::date_of_birthIsSet() const
{
    return m_Date_of_birthIsSet;
}
void User::unsetDate_of_birth()
{
    m_Date_of_birthIsSet = false;
}
int64_t User::getDateUpdated() const
{
    return m_Date_updated;
}
void User::setDateUpdated(int64_t value)
{
    m_Date_updated = value;
    m_Date_updatedIsSet = true;
}
bool User::date_updatedIsSet() const
{
    return m_Date_updatedIsSet;
}
void User::unsetDate_updated()
{
    m_Date_updatedIsSet = false;
}
utility::string_t User::getDescription() const
{
    return m_Description;
}
void User::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool User::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void User::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t User::getDisplayName() const
{
    return m_Display_name;
}
void User::setDisplayName(utility::string_t value)
{
    m_Display_name = value;
    m_Display_nameIsSet = true;
}
bool User::display_nameIsSet() const
{
    return m_Display_nameIsSet;
}
void User::unsetDisplay_name()
{
    m_Display_nameIsSet = false;
}
utility::string_t User::getEmail() const
{
    return m_Email;
}
void User::setEmail(utility::string_t value)
{
    m_Email = value;
    m_EmailIsSet = true;
}
bool User::emailIsSet() const
{
    return m_EmailIsSet;
}
void User::unsetEmail()
{
    m_EmailIsSet = false;
}
utility::string_t User::getFirstName() const
{
    return m_First_name;
}
void User::setFirstName(utility::string_t value)
{
    m_First_name = value;
    m_First_nameIsSet = true;
}
bool User::first_nameIsSet() const
{
    return m_First_nameIsSet;
}
void User::unsetFirst_name()
{
    m_First_nameIsSet = false;
}
utility::string_t User::getFullname() const
{
    return m_Fullname;
}
void User::setFullname(utility::string_t value)
{
    m_Fullname = value;
    m_FullnameIsSet = true;
}
bool User::fullnameIsSet() const
{
    return m_FullnameIsSet;
}
void User::unsetFullname()
{
    m_FullnameIsSet = false;
}
utility::string_t User::getGender() const
{
    return m_Gender;
}
void User::setGender(utility::string_t value)
{
    m_Gender = value;
    m_GenderIsSet = true;
}
bool User::genderIsSet() const
{
    return m_GenderIsSet;
}
void User::unsetGender()
{
    m_GenderIsSet = false;
}
std::vector<std::shared_ptr<GroupMember>>& User::getGroups()
{
    return m_Groups;
}
bool User::groupsIsSet() const
{
    return m_GroupsIsSet;
}
void User::unsetGroups()
{
    m_GroupsIsSet = false;
}
bool User::getGuest() const
{
    return m_Guest;
}
void User::setGuest(bool value)
{
    m_Guest = value;
    m_GuestIsSet = true;
}
bool User::guestIsSet() const
{
    return m_GuestIsSet;
}
void User::unsetGuest()
{
    m_GuestIsSet = false;
}
int32_t User::getId() const
{
    return m_Id;
}
void User::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool User::idIsSet() const
{
    return m_IdIsSet;
}
void User::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t User::getInviteToken() const
{
    return m_Invite_token;
}
void User::setInviteToken(utility::string_t value)
{
    m_Invite_token = value;
    m_Invite_tokenIsSet = true;
}
bool User::invite_tokenIsSet() const
{
    return m_Invite_tokenIsSet;
}
void User::unsetInvite_token()
{
    m_Invite_tokenIsSet = false;
}
std::shared_ptr<Language> User::getLang() const
{
    return m_Lang;
}
void User::setLang(std::shared_ptr<Language> value)
{
    m_Lang = value;
    m_LangIsSet = true;
}
bool User::langIsSet() const
{
    return m_LangIsSet;
}
void User::unsetLang()
{
    m_LangIsSet = false;
}
int64_t User::getLastActivity() const
{
    return m_Last_activity;
}
void User::setLastActivity(int64_t value)
{
    m_Last_activity = value;
    m_Last_activityIsSet = true;
}
bool User::last_activityIsSet() const
{
    return m_Last_activityIsSet;
}
void User::unsetLast_activity()
{
    m_Last_activityIsSet = false;
}
int64_t User::getLastLogin() const
{
    return m_Last_login;
}
void User::setLastLogin(int64_t value)
{
    m_Last_login = value;
    m_Last_loginIsSet = true;
}
bool User::last_loginIsSet() const
{
    return m_Last_loginIsSet;
}
void User::unsetLast_login()
{
    m_Last_loginIsSet = false;
}
utility::string_t User::getLastName() const
{
    return m_Last_name;
}
void User::setLastName(utility::string_t value)
{
    m_Last_name = value;
    m_Last_nameIsSet = true;
}
bool User::last_nameIsSet() const
{
    return m_Last_nameIsSet;
}
void User::unsetLast_name()
{
    m_Last_nameIsSet = false;
}
int32_t User::getLockoutAttempts() const
{
    return m_Lockout_attempts;
}
void User::setLockoutAttempts(int32_t value)
{
    m_Lockout_attempts = value;
    m_Lockout_attemptsIsSet = true;
}
bool User::lockout_attemptsIsSet() const
{
    return m_Lockout_attemptsIsSet;
}
void User::unsetLockout_attempts()
{
    m_Lockout_attemptsIsSet = false;
}
int64_t User::getLockoutDate() const
{
    return m_Lockout_date;
}
void User::setLockoutDate(int64_t value)
{
    m_Lockout_date = value;
    m_Lockout_dateIsSet = true;
}
bool User::lockout_dateIsSet() const
{
    return m_Lockout_dateIsSet;
}
void User::unsetLockout_date()
{
    m_Lockout_dateIsSet = false;
}
utility::string_t User::getMobileNumber() const
{
    return m_Mobile_number;
}
void User::setMobileNumber(utility::string_t value)
{
    m_Mobile_number = value;
    m_Mobile_numberIsSet = true;
}
bool User::mobile_numberIsSet() const
{
    return m_Mobile_numberIsSet;
}
void User::unsetMobile_number()
{
    m_Mobile_numberIsSet = false;
}
int32_t User::getOldId() const
{
    return m_Old_id;
}
void User::setOldId(int32_t value)
{
    m_Old_id = value;
    m_Old_idIsSet = true;
}
bool User::old_idIsSet() const
{
    return m_Old_idIsSet;
}
void User::unsetOld_id()
{
    m_Old_idIsSet = false;
}
std::vector<std::shared_ptr<UserRelationship>>& User::getParents()
{
    return m_Parents;
}
bool User::parentsIsSet() const
{
    return m_ParentsIsSet;
}
void User::unsetParents()
{
    m_ParentsIsSet = false;
}
utility::string_t User::getPassword() const
{
    return m_Password;
}
void User::setPassword(utility::string_t value)
{
    m_Password = value;
    m_PasswordIsSet = true;
}
bool User::passwordIsSet() const
{
    return m_PasswordIsSet;
}
void User::unsetPassword()
{
    m_PasswordIsSet = false;
}
utility::string_t User::getPostalCode() const
{
    return m_Postal_code;
}
void User::setPostalCode(utility::string_t value)
{
    m_Postal_code = value;
    m_Postal_codeIsSet = true;
}
bool User::postal_codeIsSet() const
{
    return m_Postal_codeIsSet;
}
void User::unsetPostal_code()
{
    m_Postal_codeIsSet = false;
}
utility::string_t User::getPropertiesString() const
{
    return m_Properties_string;
}
void User::setPropertiesString(utility::string_t value)
{
    m_Properties_string = value;
    m_Properties_stringIsSet = true;
}
bool User::properties_stringIsSet() const
{
    return m_Properties_stringIsSet;
}
void User::unsetProperties_string()
{
    m_Properties_stringIsSet = false;
}
std::vector<std::shared_ptr<Role>>& User::getRoles()
{
    return m_Roles;
}
bool User::rolesIsSet() const
{
    return m_RolesIsSet;
}
void User::unsetRoles()
{
    m_RolesIsSet = false;
}
utility::string_t User::getState() const
{
    return m_State;
}
void User::setState(utility::string_t value)
{
    m_State = value;
    m_StateIsSet = true;
}
bool User::stateIsSet() const
{
    return m_StateIsSet;
}
void User::unsetState()
{
    m_StateIsSet = false;
}
utility::string_t User::getStatus() const
{
    return m_Status;
}
void User::setStatus(utility::string_t value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool User::statusIsSet() const
{
    return m_StatusIsSet;
}
void User::unsetStatus()
{
    m_StatusIsSet = false;
}
std::vector<utility::string_t>& User::getTagStrings()
{
    return m_Tag_strings;
}
bool User::tag_stringsIsSet() const
{
    return m_Tag_stringsIsSet;
}
void User::unsetTag_strings()
{
    m_Tag_stringsIsSet = false;
}
std::vector<std::shared_ptr<UserTag>>& User::getTags()
{
    return m_Tags;
}
bool User::tagsIsSet() const
{
    return m_TagsIsSet;
}
void User::unsetTags()
{
    m_TagsIsSet = false;
}
utility::string_t User::getTemplate() const
{
    return m_Template;
}
void User::setTemplate(utility::string_t value)
{
    m_Template = value;
    m_TemplateIsSet = true;
}
bool User::templateIsSet() const
{
    return m_TemplateIsSet;
}
void User::unsetTemplate()
{
    m_TemplateIsSet = false;
}
std::shared_ptr<Timezone> User::getTimezone() const
{
    return m_Timezone;
}
void User::setTimezone(std::shared_ptr<Timezone> value)
{
    m_Timezone = value;
    m_TimezoneIsSet = true;
}
bool User::timezoneIsSet() const
{
    return m_TimezoneIsSet;
}
void User::unsetTimezone()
{
    m_TimezoneIsSet = false;
}
utility::string_t User::getToken() const
{
    return m_Token;
}
void User::setToken(utility::string_t value)
{
    m_Token = value;
    m_TokenIsSet = true;
}
bool User::tokenIsSet() const
{
    return m_TokenIsSet;
}
void User::unsetToken()
{
    m_TokenIsSet = false;
}
utility::string_t User::getTypeHint() const
{
    return m_Type_hint;
}
void User::setTypeHint(utility::string_t value)
{
    m_Type_hint = value;
    m_Type_hintIsSet = true;
}
bool User::type_hintIsSet() const
{
    return m_Type_hintIsSet;
}
void User::unsetType_hint()
{
    m_Type_hintIsSet = false;
}
utility::string_t User::getUsername() const
{
    return m_Username;
}
void User::setUsername(utility::string_t value)
{
    m_Username = value;
    m_UsernameIsSet = true;
}
bool User::usernameIsSet() const
{
    return m_UsernameIsSet;
}
void User::unsetUsername()
{
    m_UsernameIsSet = false;
}

}
}
}
}

