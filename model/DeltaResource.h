/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * DeltaResource.h
 *
 * 
 */

#ifndef DeltaResource_H_
#define DeltaResource_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  DeltaResource
    : public ModelBase
{
public:
    DeltaResource();
    virtual ~DeltaResource();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// DeltaResource members

    /// <summary>
    /// The id of the category for question
    /// </summary>
    utility::string_t getCategoryId() const;
    bool categoryIdIsSet() const;
    void unsetCategory_id();
    void setCategoryId(utility::string_t value);
    /// <summary>
    /// The media type of the question
    /// </summary>
    utility::string_t getMediaType() const;
    bool mediaTypeIsSet() const;
    void unsetMedia_type();
    void setMediaType(utility::string_t value);
    /// <summary>
    /// The id of the question
    /// </summary>
    utility::string_t getQuestionId() const;
    bool questionIdIsSet() const;
    void unsetQuestion_id();
    void setQuestionId(utility::string_t value);
    /// <summary>
    /// Whether the question was updated or removed
    /// </summary>
    utility::string_t getState() const;
    bool stateIsSet() const;
    void unsetState();
    void setState(utility::string_t value);
    /// <summary>
    /// The tags for the question
    /// </summary>
    std::vector<utility::string_t>& getTags();
    bool tagsIsSet() const;
    void unsetTags();
    void setTags(std::vector<utility::string_t> value);
    /// <summary>
    /// The date this question was last updated in seconds since unix epoch
    /// </summary>
    int64_t getUpdatedDate() const;
    bool updatedDateIsSet() const;
    void unsetUpdated_date();
    void setUpdatedDate(int64_t value);

protected:
    utility::string_t m_Category_id;
    bool m_Category_idIsSet;
    utility::string_t m_Media_type;
    bool m_Media_typeIsSet;
    utility::string_t m_Question_id;
    bool m_Question_idIsSet;
    utility::string_t m_State;
    bool m_StateIsSet;
    std::vector<utility::string_t> m_Tags;
    bool m_TagsIsSet;
    int64_t m_Updated_date;
    bool m_Updated_dateIsSet;
};

}
}
}
}

#endif /* DeltaResource_H_ */
