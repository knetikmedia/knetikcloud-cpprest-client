/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * PaymentsTransactionsApi.h
 *
 * 
 */

#ifndef PaymentsTransactionsApi_H_
#define PaymentsTransactionsApi_H_


#include "ApiClient.h"

#include "PageResource«TransactionResource».h"
#include "RefundRequest.h"
#include "RefundResource.h"
#include "Result.h"
#include "TransactionResource.h"
#include <cpprest/details/basic_types.h>

namespace com {
namespace knetikcloud {
namespace client {
namespace api {

using namespace com::knetikcloud::client::model;

class  PaymentsTransactionsApi
{
public:
    PaymentsTransactionsApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~PaymentsTransactionsApi();
    /// <summary>
    /// Get the details for a single transaction
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">id</param>
    pplx::task<std::shared_ptr<TransactionResource>> getTransaction(int32_t id);
    /// <summary>
    /// List and search transactions
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="filterInvoice">Filter for transactions from a specific invoice (optional)</param>/// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
    pplx::task<std::shared_ptr<PageResource«TransactionResource»>> getTransactions(int32_t filterInvoice, int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// Refund a payment transaction, in full or in part
    /// </summary>
    /// <remarks>
    /// Will not allow for refunding more than the full amount even with multiple partial refunds. Money is refunded to the payment method used to make the original payment. Payment method must support refunds.
    /// </remarks>
    /// <param name="id">The id of the transaction to refund</param>/// <param name="request">Request containing refund details (optional)</param>
    pplx::task<std::shared_ptr<RefundResource>> refundTransaction(int32_t id, std::shared_ptr<RefundRequest> request);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* PaymentsTransactionsApi_H_ */

