/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "MessageTemplateResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

MessageTemplateResource::MessageTemplateResource()
{
    m_Content = U("");
    m_Id = U("");
    m_IdIsSet = false;
    m_Name = U("");
    m_TagsIsSet = false;
}

MessageTemplateResource::~MessageTemplateResource()
{
}

void MessageTemplateResource::validate()
{
    // TODO: implement validation
}

web::json::value MessageTemplateResource::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("content")] = ModelBase::toJson(m_Content);
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    val[U("name")] = ModelBase::toJson(m_Name);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("tags")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void MessageTemplateResource::fromJson(web::json::value& val)
{
    setContent(ModelBase::stringFromJson(val[U("content")]));
    if(val.has_field(U("id")))
    {
        setId(ModelBase::stringFromJson(val[U("id")]));
    }
    setName(ModelBase::stringFromJson(val[U("name")]));
    {
        m_Tags.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("tags")))
        {
        for( auto& item : val[U("tags")].as_array() )
        {
            m_Tags.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
}

void MessageTemplateResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("content"), m_Content));
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("tags"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
}

void MessageTemplateResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setContent(ModelBase::stringFromHttpContent(multipart->getContent(U("content"))));
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(U("id"))));
    }
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    {
        m_Tags.clear();
        if(multipart->hasContent(U("tags")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("tags"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Tags.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
}

utility::string_t MessageTemplateResource::getContent() const
{
    return m_Content;
}


void MessageTemplateResource::setContent(utility::string_t value)
{
    m_Content = value;
    
}
utility::string_t MessageTemplateResource::getId() const
{
    return m_Id;
}


void MessageTemplateResource::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool MessageTemplateResource::idIsSet() const
{
    return m_IdIsSet;
}

void MessageTemplateResource::unsetId()
{
    m_IdIsSet = false;
}

utility::string_t MessageTemplateResource::getName() const
{
    return m_Name;
}


void MessageTemplateResource::setName(utility::string_t value)
{
    m_Name = value;
    
}
std::vector<utility::string_t>& MessageTemplateResource::getTags()
{
    return m_Tags;
}

void MessageTemplateResource::setTags(std::vector<utility::string_t> value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}
bool MessageTemplateResource::tagsIsSet() const
{
    return m_TagsIsSet;
}

void MessageTemplateResource::unsetTags()
{
    m_TagsIsSet = false;
}

}
}
}
}

