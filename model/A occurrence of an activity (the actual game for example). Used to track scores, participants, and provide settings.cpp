/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings()
{
    m_Activity_id = 0;
    m_Challenge_activity_id = 0;
    m_Challenge_activity_idIsSet = false;
    m_Created_date = 0;
    m_Created_dateIsSet = false;
    m_EntitlementIsSet = false;
    m_Event_id = 0;
    m_Event_idIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_Reward_status = U("");
    m_Reward_statusIsSet = false;
    m_SettingsIsSet = false;
    m_Simulated = false;
    m_SimulatedIsSet = false;
    m_Start_date = 0;
    m_Start_dateIsSet = false;
    m_Status = U("");
    m_StatusIsSet = false;
    m_Updated_date = 0;
    m_Updated_dateIsSet = false;
    m_UsersIsSet = false;
    
}

A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::~A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings()
{
}

void A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::validate()
{
    // TODO: implement validation
}

web::json::value A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("activity_id")] = ModelBase::toJson(m_Activity_id);
    if(m_Challenge_activity_idIsSet)
    {
        val[U("challenge_activity_id")] = ModelBase::toJson(m_Challenge_activity_id);
    }
    if(m_Created_dateIsSet)
    {
        val[U("created_date")] = ModelBase::toJson(m_Created_date);
    }
    if(m_EntitlementIsSet)
    {
        val[U("entitlement")] = ModelBase::toJson(m_Entitlement);
    }
    if(m_Event_idIsSet)
    {
        val[U("event_id")] = ModelBase::toJson(m_Event_id);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_Reward_statusIsSet)
    {
        val[U("reward_status")] = ModelBase::toJson(m_Reward_status);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Settings )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("settings")] = web::json::value::array(jsonArray);
        }
    }
    if(m_SimulatedIsSet)
    {
        val[U("simulated")] = ModelBase::toJson(m_Simulated);
    }
    if(m_Start_dateIsSet)
    {
        val[U("start_date")] = ModelBase::toJson(m_Start_date);
    }
    if(m_StatusIsSet)
    {
        val[U("status")] = ModelBase::toJson(m_Status);
    }
    if(m_Updated_dateIsSet)
    {
        val[U("updated_date")] = ModelBase::toJson(m_Updated_date);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Users )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("users")] = web::json::value::array(jsonArray);
        }
    }
    

    return val;
}

void A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::fromJson(web::json::value& val)
{
    setActivityId(ModelBase::int64_tFromJson(val[U("activity_id")]));
    if(val.has_field(U("challenge_activity_id")))
    {
        setChallengeActivityId(ModelBase::int64_tFromJson(val[U("challenge_activity_id")]));
    }
    if(val.has_field(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromJson(val[U("created_date")]));
    }
    if(val.has_field(U("entitlement")))
    {
        if(!val[U("entitlement")].is_null())
        {
            std::shared_ptr<ActivityEntitlementResource> newItem(new ActivityEntitlementResource());
            newItem->fromJson(val[U("entitlement")]);
            setEntitlement( newItem );
        }
        
    }
    if(val.has_field(U("event_id")))
    {
        setEventId(ModelBase::int64_tFromJson(val[U("event_id")]));
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int64_tFromJson(val[U("id")]));
    }
    if(val.has_field(U("reward_status")))
    {
        setRewardStatus(ModelBase::stringFromJson(val[U("reward_status")]));
        
    }
    {
        m_Settings.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("settings")))
        {
        for( auto& item : val[U("settings")].as_array() )
        {
            
            if(item.is_null())
            {
                m_Settings.push_back( std::shared_ptr<SelectedSettingResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<SelectedSettingResource> newItem(new SelectedSettingResource());
                newItem->fromJson(item);
                m_Settings.push_back( newItem );
            }
            
        }
        }
    }
    if(val.has_field(U("simulated")))
    {
        setSimulated(ModelBase::boolFromJson(val[U("simulated")]));
    }
    if(val.has_field(U("start_date")))
    {
        setStartDate(ModelBase::int64_tFromJson(val[U("start_date")]));
    }
    if(val.has_field(U("status")))
    {
        setStatus(ModelBase::stringFromJson(val[U("status")]));
        
    }
    if(val.has_field(U("updated_date")))
    {
        setUpdatedDate(ModelBase::int64_tFromJson(val[U("updated_date")]));
    }
    {
        m_Users.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("users")))
        {
        for( auto& item : val[U("users")].as_array() )
        {
            
            if(item.is_null())
            {
                m_Users.push_back( std::shared_ptr<ActivityUserResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<ActivityUserResource> newItem(new ActivityUserResource());
                newItem->fromJson(item);
                m_Users.push_back( newItem );
            }
            
        }
        }
    }
    
}

void A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("activity_id"), m_Activity_id));
    if(m_Challenge_activity_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("challenge_activity_id"), m_Challenge_activity_id));
    }
    if(m_Created_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("created_date"), m_Created_date));
    }
    if(m_EntitlementIsSet)
    {
        if (m_Entitlement.get())
        {
            m_Entitlement->toMultipart(multipart, U("entitlement."));
        }
        
    }
    if(m_Event_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("event_id"), m_Event_id));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    if(m_Reward_statusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("reward_status"), m_Reward_status));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Settings )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("settings"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_SimulatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("simulated"), m_Simulated));
    }
    if(m_Start_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("start_date"), m_Start_date));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("status"), m_Status));
        
    }
    if(m_Updated_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("updated_date"), m_Updated_date));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Users )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("users"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    
}

void A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setActivityId(ModelBase::int64_tFromHttpContent(multipart->getContent(U("activity_id"))));
    if(multipart->hasContent(U("challenge_activity_id")))
    {
        setChallengeActivityId(ModelBase::int64_tFromHttpContent(multipart->getContent(U("challenge_activity_id"))));
    }
    if(multipart->hasContent(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("created_date"))));
    }
    if(multipart->hasContent(U("entitlement")))
    {
        if(multipart->hasContent(U("entitlement")))
        {
            std::shared_ptr<ActivityEntitlementResource> newItem(new ActivityEntitlementResource());
            newItem->fromMultiPart(multipart, U("entitlement."));
            setEntitlement( newItem );
        }
        
    }
    if(multipart->hasContent(U("event_id")))
    {
        setEventId(ModelBase::int64_tFromHttpContent(multipart->getContent(U("event_id"))));
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int64_tFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("reward_status")))
    {
        setRewardStatus(ModelBase::stringFromHttpContent(multipart->getContent(U("reward_status"))));
        
    }
    {
        m_Settings.clear();
        if(multipart->hasContent(U("settings")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("settings"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_Settings.push_back( std::shared_ptr<SelectedSettingResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<SelectedSettingResource> newItem(new SelectedSettingResource());
                newItem->fromJson(item);
                m_Settings.push_back( newItem );
            }
            
        }
        }
    }
    if(multipart->hasContent(U("simulated")))
    {
        setSimulated(ModelBase::boolFromHttpContent(multipart->getContent(U("simulated"))));
    }
    if(multipart->hasContent(U("start_date")))
    {
        setStartDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("start_date"))));
    }
    if(multipart->hasContent(U("status")))
    {
        setStatus(ModelBase::stringFromHttpContent(multipart->getContent(U("status"))));
        
    }
    if(multipart->hasContent(U("updated_date")))
    {
        setUpdatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("updated_date"))));
    }
    {
        m_Users.clear();
        if(multipart->hasContent(U("users")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("users"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_Users.push_back( std::shared_ptr<ActivityUserResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<ActivityUserResource> newItem(new ActivityUserResource());
                newItem->fromJson(item);
                m_Users.push_back( newItem );
            }
            
        }
        }
    }
    
}


int64_t A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::getActivityId() const
{
    return m_Activity_id;
}
void A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::setActivityId(int64_t value)
{
    m_Activity_id = value;
    
}
int64_t A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::getChallengeActivityId() const
{
    return m_Challenge_activity_id;
}
void A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::setChallengeActivityId(int64_t value)
{
    m_Challenge_activity_id = value;
    m_Challenge_activity_idIsSet = true;
}
bool A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::challenge_activity_idIsSet() const
{
    return m_Challenge_activity_idIsSet;
}
void A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::unsetChallenge_activity_id()
{
    m_Challenge_activity_idIsSet = false;
}
int64_t A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::getCreatedDate() const
{
    return m_Created_date;
}
void A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::setCreatedDate(int64_t value)
{
    m_Created_date = value;
    m_Created_dateIsSet = true;
}
bool A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::created_dateIsSet() const
{
    return m_Created_dateIsSet;
}
void A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::unsetCreated_date()
{
    m_Created_dateIsSet = false;
}
std::shared_ptr<ActivityEntitlementResource> A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::getEntitlement() const
{
    return m_Entitlement;
}
void A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::setEntitlement(std::shared_ptr<ActivityEntitlementResource> value)
{
    m_Entitlement = value;
    m_EntitlementIsSet = true;
}
bool A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::entitlementIsSet() const
{
    return m_EntitlementIsSet;
}
void A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::unsetEntitlement()
{
    m_EntitlementIsSet = false;
}
int64_t A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::getEventId() const
{
    return m_Event_id;
}
void A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::setEventId(int64_t value)
{
    m_Event_id = value;
    m_Event_idIsSet = true;
}
bool A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::event_idIsSet() const
{
    return m_Event_idIsSet;
}
void A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::unsetEvent_id()
{
    m_Event_idIsSet = false;
}
int64_t A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::getId() const
{
    return m_Id;
}
void A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::idIsSet() const
{
    return m_IdIsSet;
}
void A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::getRewardStatus() const
{
    return m_Reward_status;
}
void A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::setRewardStatus(utility::string_t value)
{
    m_Reward_status = value;
    m_Reward_statusIsSet = true;
}
bool A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::reward_statusIsSet() const
{
    return m_Reward_statusIsSet;
}
void A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::unsetReward_status()
{
    m_Reward_statusIsSet = false;
}
std::vector<std::shared_ptr<SelectedSettingResource>>& A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::getSettings()
{
    return m_Settings;
}
bool A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::settingsIsSet() const
{
    return m_SettingsIsSet;
}
void A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::unsetSettings()
{
    m_SettingsIsSet = false;
}
bool A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::getSimulated() const
{
    return m_Simulated;
}
void A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::setSimulated(bool value)
{
    m_Simulated = value;
    m_SimulatedIsSet = true;
}
bool A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::simulatedIsSet() const
{
    return m_SimulatedIsSet;
}
void A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::unsetSimulated()
{
    m_SimulatedIsSet = false;
}
int64_t A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::getStartDate() const
{
    return m_Start_date;
}
void A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::setStartDate(int64_t value)
{
    m_Start_date = value;
    m_Start_dateIsSet = true;
}
bool A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::start_dateIsSet() const
{
    return m_Start_dateIsSet;
}
void A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::unsetStart_date()
{
    m_Start_dateIsSet = false;
}
utility::string_t A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::getStatus() const
{
    return m_Status;
}
void A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::setStatus(utility::string_t value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::statusIsSet() const
{
    return m_StatusIsSet;
}
void A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::unsetStatus()
{
    m_StatusIsSet = false;
}
int64_t A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::getUpdatedDate() const
{
    return m_Updated_date;
}
void A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::setUpdatedDate(int64_t value)
{
    m_Updated_date = value;
    m_Updated_dateIsSet = true;
}
bool A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::updated_dateIsSet() const
{
    return m_Updated_dateIsSet;
}
void A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::unsetUpdated_date()
{
    m_Updated_dateIsSet = false;
}
std::vector<std::shared_ptr<ActivityUserResource>>& A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::getUsers()
{
    return m_Users;
}
bool A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::usersIsSet() const
{
    return m_UsersIsSet;
}
void A occurrence of an activity (the actual game for example). Used to track scores, participants, and provide settings::unsetUsers()
{
    m_UsersIsSet = false;
}

}
}
}
}

