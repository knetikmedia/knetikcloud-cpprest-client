/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ActivityUserResource.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

ActivityUserResource::ActivityUserResource()
{
    m_Host = false;
    m_HostIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_Joined_date = 0;
    m_Joined_dateIsSet = false;
    m_Left_date = 0;
    m_Left_dateIsSet = false;
    m_MetricIsSet = false;
    m_Status = U("");
    m_StatusIsSet = false;
    
}

ActivityUserResource::~ActivityUserResource()
{
}

void ActivityUserResource::validate()
{
    // TODO: implement validation
}

web::json::value ActivityUserResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_HostIsSet)
    {
        val[U("host")] = ModelBase::toJson(m_Host);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_Joined_dateIsSet)
    {
        val[U("joined_date")] = ModelBase::toJson(m_Joined_date);
    }
    if(m_Left_dateIsSet)
    {
        val[U("left_date")] = ModelBase::toJson(m_Left_date);
    }
    if(m_MetricIsSet)
    {
        val[U("metric")] = ModelBase::toJson(m_Metric);
    }
    if(m_StatusIsSet)
    {
        val[U("status")] = ModelBase::toJson(m_Status);
    }
    val[U("user")] = ModelBase::toJson(m_User);
    

    return val;
}

void ActivityUserResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("host")))
    {
        setHost(ModelBase::boolFromJson(val[U("host")]));
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int64_tFromJson(val[U("id")]));
    }
    if(val.has_field(U("joined_date")))
    {
        setJoinedDate(ModelBase::int64_tFromJson(val[U("joined_date")]));
    }
    if(val.has_field(U("left_date")))
    {
        setLeftDate(ModelBase::int64_tFromJson(val[U("left_date")]));
    }
    if(val.has_field(U("metric")))
    {
        if(!val[U("metric")].is_null())
        {
            std::shared_ptr<MetricResource> newItem(new MetricResource());
            newItem->fromJson(val[U("metric")]);
            setMetric( newItem );
        }
        
    }
    if(val.has_field(U("status")))
    {
        setStatus(ModelBase::stringFromJson(val[U("status")]));
        
    }
    std::shared_ptr<SimpleUserResource> newUser(new SimpleUserResource());
    newUser->fromJson(val[U("user")]);
    setUser( newItem );
    
}

void ActivityUserResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_HostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("host"), m_Host));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    if(m_Joined_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("joined_date"), m_Joined_date));
    }
    if(m_Left_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("left_date"), m_Left_date));
    }
    if(m_MetricIsSet)
    {
        if (m_Metric.get())
        {
            m_Metric->toMultipart(multipart, U("metric."));
        }
        
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("status"), m_Status));
        
    }
    m_User->toMultipart(multipart, U("user."));
    
}

void ActivityUserResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("host")))
    {
        setHost(ModelBase::boolFromHttpContent(multipart->getContent(U("host"))));
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int64_tFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("joined_date")))
    {
        setJoinedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("joined_date"))));
    }
    if(multipart->hasContent(U("left_date")))
    {
        setLeftDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("left_date"))));
    }
    if(multipart->hasContent(U("metric")))
    {
        if(multipart->hasContent(U("metric")))
        {
            std::shared_ptr<MetricResource> newItem(new MetricResource());
            newItem->fromMultiPart(multipart, U("metric."));
            setMetric( newItem );
        }
        
    }
    if(multipart->hasContent(U("status")))
    {
        setStatus(ModelBase::stringFromHttpContent(multipart->getContent(U("status"))));
        
    }
    std::shared_ptr<SimpleUserResource> newUser(new SimpleUserResource());
    newUser->fromMultiPart(multipart, U("user."));
    setUser( newUser );
    
}


bool ActivityUserResource::getHost() const
{
    return m_Host;
}
void ActivityUserResource::setHost(bool value)
{
    m_Host = value;
    m_HostIsSet = true;
}
bool ActivityUserResource::hostIsSet() const
{
    return m_HostIsSet;
}
void ActivityUserResource::unsetHost()
{
    m_HostIsSet = false;
}
int64_t ActivityUserResource::getId() const
{
    return m_Id;
}
void ActivityUserResource::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool ActivityUserResource::idIsSet() const
{
    return m_IdIsSet;
}
void ActivityUserResource::unsetId()
{
    m_IdIsSet = false;
}
int64_t ActivityUserResource::getJoinedDate() const
{
    return m_Joined_date;
}
void ActivityUserResource::setJoinedDate(int64_t value)
{
    m_Joined_date = value;
    m_Joined_dateIsSet = true;
}
bool ActivityUserResource::joined_dateIsSet() const
{
    return m_Joined_dateIsSet;
}
void ActivityUserResource::unsetJoined_date()
{
    m_Joined_dateIsSet = false;
}
int64_t ActivityUserResource::getLeftDate() const
{
    return m_Left_date;
}
void ActivityUserResource::setLeftDate(int64_t value)
{
    m_Left_date = value;
    m_Left_dateIsSet = true;
}
bool ActivityUserResource::left_dateIsSet() const
{
    return m_Left_dateIsSet;
}
void ActivityUserResource::unsetLeft_date()
{
    m_Left_dateIsSet = false;
}
std::shared_ptr<MetricResource> ActivityUserResource::getMetric() const
{
    return m_Metric;
}
void ActivityUserResource::setMetric(std::shared_ptr<MetricResource> value)
{
    m_Metric = value;
    m_MetricIsSet = true;
}
bool ActivityUserResource::metricIsSet() const
{
    return m_MetricIsSet;
}
void ActivityUserResource::unsetMetric()
{
    m_MetricIsSet = false;
}
utility::string_t ActivityUserResource::getStatus() const
{
    return m_Status;
}
void ActivityUserResource::setStatus(utility::string_t value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool ActivityUserResource::statusIsSet() const
{
    return m_StatusIsSet;
}
void ActivityUserResource::unsetStatus()
{
    m_StatusIsSet = false;
}
std::shared_ptr<SimpleUserResource> ActivityUserResource::getUser() const
{
    return m_User;
}
void ActivityUserResource::setUser(std::shared_ptr<SimpleUserResource> value)
{
    m_User = value;
    
}

}
}
}
}

