/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ActionResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

ActionResource::ActionResource()
{
    m_Category = U("");
    m_CategoryIsSet = false;
    m_Description = U("");
    m_Name = U("");
    m_TagsIsSet = false;
}

ActionResource::~ActionResource()
{
}

void ActionResource::validate()
{
    // TODO: implement validation
}

web::json::value ActionResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CategoryIsSet)
    {
        val[U("category")] = ModelBase::toJson(m_Category);
    }
    val[U("description")] = ModelBase::toJson(m_Description);
    val[U("name")] = ModelBase::toJson(m_Name);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("tags")] = web::json::value::array(jsonArray);
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Variables )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[U("variables")] = web::json::value::array(jsonArray);
    }

    return val;
}

void ActionResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("category")))
    {
        setCategory(ModelBase::stringFromJson(val[U("category")]));
    }
    setDescription(ModelBase::stringFromJson(val[U("description")]));
    setName(ModelBase::stringFromJson(val[U("name")]));
    {
        m_Tags.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("tags")))
        {
        for( auto& item : val[U("tags")].as_array() )
        {
            m_Tags.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_Variables.clear();
        std::vector<web::json::value> jsonArray;
        for( auto& item : val[U("variables")].as_array() )
        {
            if(item.is_null())
            {
                m_Variables.push_back( std::shared_ptr<ActionVariableResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<ActionVariableResource> newItem(new ActionVariableResource());
                newItem->fromJson(item);
                m_Variables.push_back( newItem );
            }
        }
    }
}

void ActionResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_CategoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("category"), m_Category));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("description"), m_Description));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("tags"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Variables )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + U("variables"), web::json::value::array(jsonArray), U("application/json")));
            }
}

void ActionResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("category")))
    {
        setCategory(ModelBase::stringFromHttpContent(multipart->getContent(U("category"))));
    }
    setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("description"))));
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    {
        m_Tags.clear();
        if(multipart->hasContent(U("tags")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("tags"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Tags.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    {
        m_Variables.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("variables"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Variables.push_back( std::shared_ptr<ActionVariableResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<ActionVariableResource> newItem(new ActionVariableResource());
                newItem->fromJson(item);
                m_Variables.push_back( newItem );
            }
        }
    }
}

utility::string_t ActionResource::getCategory() const
{
    return m_Category;
}


void ActionResource::setCategory(utility::string_t value)
{
    m_Category = value;
    m_CategoryIsSet = true;
}
bool ActionResource::categoryIsSet() const
{
    return m_CategoryIsSet;
}

void ActionResource::unsetCategory()
{
    m_CategoryIsSet = false;
}

utility::string_t ActionResource::getDescription() const
{
    return m_Description;
}


void ActionResource::setDescription(utility::string_t value)
{
    m_Description = value;
    
}
utility::string_t ActionResource::getName() const
{
    return m_Name;
}


void ActionResource::setName(utility::string_t value)
{
    m_Name = value;
    
}
std::vector<utility::string_t>& ActionResource::getTags()
{
    return m_Tags;
}

void ActionResource::setTags(std::vector<utility::string_t> value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}
bool ActionResource::tagsIsSet() const
{
    return m_TagsIsSet;
}

void ActionResource::unsetTags()
{
    m_TagsIsSet = false;
}

std::vector<std::shared_ptr<ActionVariableResource>>& ActionResource::getVariables()
{
    return m_Variables;
}

void ActionResource::setVariables(std::vector<std::shared_ptr<ActionVariableResource>> value)
{
    m_Variables = value;
    
}
}
}
}
}

