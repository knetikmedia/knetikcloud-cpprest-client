/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Store_ShippingApi.h
 *
 * 
 */

#ifndef Store_ShippingApi_H_
#define Store_ShippingApi_H_


#include "ApiClient.h"

#include "ItemTemplateResource.h"
#include "PageResource«ItemTemplateResource».h"
#include "Result.h"
#include "ShippingItem.h"
#include <cpprest/details/basic_types.h>

namespace com {
namespace knetikcloud {
namespace client {
namespace api {

using namespace com::knetikcloud::client::model;

class  Store_ShippingApi
{
public:
    Store_ShippingApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~Store_ShippingApi();
    /// <summary>
    /// Create a shipping item
    /// </summary>
    /// <remarks>
    /// A shipping item represents a shipping option and cost. SKUs have to be unique in the entire store. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; SHIPPING_ADMIN
    /// </remarks>
    /// <param name="cascade">Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (optional, default to false)</param>/// <param name="shippingItem">The shipping item object (optional)</param>
    pplx::task<std::shared_ptr<ShippingItem>> createShippingItem(bool cascade, std::shared_ptr<ShippingItem> shippingItem);
    /// <summary>
    /// Create a shipping template
    /// </summary>
    /// <remarks>
    /// Shipping Templates define a type of shipping and the properties they have.
    /// </remarks>
    /// <param name="shippingTemplateResource">The new shipping template (optional)</param>
    pplx::task<std::shared_ptr<ItemTemplateResource>> createShippingTemplate(std::shared_ptr<ItemTemplateResource> shippingTemplateResource);
    /// <summary>
    /// Delete a shipping item
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; SHIPPING_ADMIN
    /// </remarks>
    /// <param name="id">The id of the shipping item</param>
    pplx::task<void> deleteShippingItem(int32_t id);
    /// <summary>
    /// Delete a shipping template
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
    /// </remarks>
    /// <param name="id">The id of the template</param>/// <param name="cascade">force deleting the template if it&#39;s attached to other objects, cascade &#x3D; detach (optional)</param>
    pplx::task<void> deleteShippingTemplate(utility::string_t id, utility::string_t cascade);
    /// <summary>
    /// Get a single shipping item
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
    /// </remarks>
    /// <param name="id">The id of the shipping item</param>
    pplx::task<std::shared_ptr<ShippingItem>> getShippingItem(int32_t id);
    /// <summary>
    /// Get a single shipping template
    /// </summary>
    /// <remarks>
    /// Shipping Templates define a type of shipping and the properties they have. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or SHIPPING_ADMIN
    /// </remarks>
    /// <param name="id">The id of the template</param>
    pplx::task<std::shared_ptr<ItemTemplateResource>> getShippingTemplate(utility::string_t id);
    /// <summary>
    /// List and search shipping templates
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or SHIPPING_ADMIN
    /// </remarks>
    /// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
    pplx::task<std::shared_ptr<PageResource«ItemTemplateResource»>> getShippingTemplates(int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// Update a shipping item
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; SHIPPING_ADMIN
    /// </remarks>
    /// <param name="id">The id of the shipping item</param>/// <param name="cascade">Whether to cascade group changes, such as in the limited gettable behavior. A 400 error will return otherwise if the group is already in use with different values. (optional, default to false)</param>/// <param name="shippingItem">The shipping item object (optional)</param>
    pplx::task<std::shared_ptr<ShippingItem>> updateShippingItem(int32_t id, bool cascade, std::shared_ptr<ShippingItem> shippingItem);
    /// <summary>
    /// Update a shipping template
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
    /// </remarks>
    /// <param name="id">The id of the template</param>/// <param name="shippingTemplateResource">The shipping template resource object (optional)</param>
    pplx::task<std::shared_ptr<ItemTemplateResource>> updateShippingTemplate(utility::string_t id, std::shared_ptr<ItemTemplateResource> shippingTemplateResource);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* Store_ShippingApi_H_ */

