/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * BreRuleLog.h
 *
 * 
 */

#ifndef BreRuleLog_H_
#define BreRuleLog_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  BreRuleLog
    : public ModelBase
{
public:
    BreRuleLog();
    virtual ~BreRuleLog();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BreRuleLog members

    /// <summary>
    /// Whether the rule ran
    /// </summary>
    bool getRan() const;
    void setRan(bool value);
    bool ranIsSet() const;
    void unsetRan();
    /// <summary>
    /// The reason for the rule
    /// </summary>
    utility::string_t getReason() const;
    void setReason(utility::string_t value);
    bool reasonIsSet() const;
    void unsetReason();
    /// <summary>
    /// The end date of the rule in seconds
    /// </summary>
    int64_t getRuleEndDate() const;
    void setRuleEndDate(int64_t value);
    bool rule_end_dateIsSet() const;
    void unsetRule_end_date();
    /// <summary>
    /// The id of the rule
    /// </summary>
    utility::string_t getRuleId() const;
    void setRuleId(utility::string_t value);
    bool rule_idIsSet() const;
    void unsetRule_id();
    /// <summary>
    /// The name of the rule
    /// </summary>
    utility::string_t getRuleName() const;
    void setRuleName(utility::string_t value);
    bool rule_nameIsSet() const;
    void unsetRule_name();
    /// <summary>
    /// The start date of the rule in seconds
    /// </summary>
    int64_t getRuleStartDate() const;
    void setRuleStartDate(int64_t value);
    bool rule_start_dateIsSet() const;
    void unsetRule_start_date();

protected:
    bool m_Ran;
    bool m_RanIsSet;
utility::string_t m_Reason;
    bool m_ReasonIsSet;
int64_t m_Rule_end_date;
    bool m_Rule_end_dateIsSet;
utility::string_t m_Rule_id;
    bool m_Rule_idIsSet;
utility::string_t m_Rule_name;
    bool m_Rule_nameIsSet;
int64_t m_Rule_start_date;
    bool m_Rule_start_dateIsSet;
};

}
}
}
}

#endif /* BreRuleLog_H_ */
