/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "InvoiceResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

InvoiceResource::InvoiceResource()
{
    m_Billing_address1 = U("");
    m_Billing_address1IsSet = false;
    m_Billing_address2 = U("");
    m_Billing_address2IsSet = false;
    m_Billing_city_name = U("");
    m_Billing_city_nameIsSet = false;
    m_Billing_country_name = U("");
    m_Billing_country_nameIsSet = false;
    m_Billing_full_name = U("");
    m_Billing_full_nameIsSet = false;
    m_Billing_postal_code = U("");
    m_Billing_postal_codeIsSet = false;
    m_Billing_state_name = U("");
    m_Billing_state_nameIsSet = false;
    m_Cart_id = U("");
    m_Cart_idIsSet = false;
    m_Created_date = 0;
    m_Created_dateIsSet = false;
    m_Currency = U("");
    m_CurrencyIsSet = false;
    m_Current_fulfillment_status = U("");
    m_Current_fulfillment_statusIsSet = false;
    m_Current_payment_status = U("");
    m_Current_payment_statusIsSet = false;
    m_Discount = 0.0;
    m_DiscountIsSet = false;
    m_Email = U("");
    m_EmailIsSet = false;
    m_External_ref = U("");
    m_External_refIsSet = false;
    m_Fed_tax = 0.0;
    m_Fed_taxIsSet = false;
    m_Grand_total = 0.0;
    m_Grand_totalIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_Invoice_number = U("");
    m_Invoice_numberIsSet = false;
    m_ItemsIsSet = false;
    m_Name_prefix = U("");
    m_Name_prefixIsSet = false;
    m_Order_notes = U("");
    m_Order_notesIsSet = false;
    m_Parent_invoice_id = 0;
    m_Parent_invoice_idIsSet = false;
    m_Payment_method_id = 0;
    m_Payment_method_idIsSet = false;
    m_Phone = U("");
    m_PhoneIsSet = false;
    m_Phone_number = U("");
    m_Phone_numberIsSet = false;
    m_Shipping = 0.0;
    m_ShippingIsSet = false;
    m_Shipping_address1 = U("");
    m_Shipping_address1IsSet = false;
    m_Shipping_address2 = U("");
    m_Shipping_address2IsSet = false;
    m_Shipping_city_name = U("");
    m_Shipping_city_nameIsSet = false;
    m_Shipping_country_name = U("");
    m_Shipping_country_nameIsSet = false;
    m_Shipping_full_name = U("");
    m_Shipping_full_nameIsSet = false;
    m_Shipping_postal_code = U("");
    m_Shipping_postal_codeIsSet = false;
    m_Shipping_state_name = U("");
    m_Shipping_state_nameIsSet = false;
    m_Sort = 0;
    m_SortIsSet = false;
    m_State_tax = 0.0;
    m_State_taxIsSet = false;
    m_Subtotal = 0.0;
    m_SubtotalIsSet = false;
    m_Updated_date = 0;
    m_Updated_dateIsSet = false;
    m_UserIsSet = false;
    m_Vendor_id = 0;
    m_Vendor_idIsSet = false;
    m_Vendor_name = U("");
    m_Vendor_nameIsSet = false;
    
}

InvoiceResource::~InvoiceResource()
{
}

void InvoiceResource::validate()
{
    // TODO: implement validation
}

web::json::value InvoiceResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Billing_address1IsSet)
    {
        val[U("billing_address1")] = ModelBase::toJson(m_Billing_address1);
    }
    if(m_Billing_address2IsSet)
    {
        val[U("billing_address2")] = ModelBase::toJson(m_Billing_address2);
    }
    if(m_Billing_city_nameIsSet)
    {
        val[U("billing_city_name")] = ModelBase::toJson(m_Billing_city_name);
    }
    if(m_Billing_country_nameIsSet)
    {
        val[U("billing_country_name")] = ModelBase::toJson(m_Billing_country_name);
    }
    if(m_Billing_full_nameIsSet)
    {
        val[U("billing_full_name")] = ModelBase::toJson(m_Billing_full_name);
    }
    if(m_Billing_postal_codeIsSet)
    {
        val[U("billing_postal_code")] = ModelBase::toJson(m_Billing_postal_code);
    }
    if(m_Billing_state_nameIsSet)
    {
        val[U("billing_state_name")] = ModelBase::toJson(m_Billing_state_name);
    }
    if(m_Cart_idIsSet)
    {
        val[U("cart_id")] = ModelBase::toJson(m_Cart_id);
    }
    if(m_Created_dateIsSet)
    {
        val[U("created_date")] = ModelBase::toJson(m_Created_date);
    }
    if(m_CurrencyIsSet)
    {
        val[U("currency")] = ModelBase::toJson(m_Currency);
    }
    if(m_Current_fulfillment_statusIsSet)
    {
        val[U("current_fulfillment_status")] = ModelBase::toJson(m_Current_fulfillment_status);
    }
    if(m_Current_payment_statusIsSet)
    {
        val[U("current_payment_status")] = ModelBase::toJson(m_Current_payment_status);
    }
    if(m_DiscountIsSet)
    {
        val[U("discount")] = ModelBase::toJson(m_Discount);
    }
    if(m_EmailIsSet)
    {
        val[U("email")] = ModelBase::toJson(m_Email);
    }
    if(m_External_refIsSet)
    {
        val[U("external_ref")] = ModelBase::toJson(m_External_ref);
    }
    if(m_Fed_taxIsSet)
    {
        val[U("fed_tax")] = ModelBase::toJson(m_Fed_tax);
    }
    if(m_Grand_totalIsSet)
    {
        val[U("grand_total")] = ModelBase::toJson(m_Grand_total);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_Invoice_numberIsSet)
    {
        val[U("invoice_number")] = ModelBase::toJson(m_Invoice_number);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Items )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("items")] = web::json::value::array(jsonArray);
        }
    }
    if(m_Name_prefixIsSet)
    {
        val[U("name_prefix")] = ModelBase::toJson(m_Name_prefix);
    }
    if(m_Order_notesIsSet)
    {
        val[U("order_notes")] = ModelBase::toJson(m_Order_notes);
    }
    if(m_Parent_invoice_idIsSet)
    {
        val[U("parent_invoice_id")] = ModelBase::toJson(m_Parent_invoice_id);
    }
    if(m_Payment_method_idIsSet)
    {
        val[U("payment_method_id")] = ModelBase::toJson(m_Payment_method_id);
    }
    if(m_PhoneIsSet)
    {
        val[U("phone")] = ModelBase::toJson(m_Phone);
    }
    if(m_Phone_numberIsSet)
    {
        val[U("phone_number")] = ModelBase::toJson(m_Phone_number);
    }
    if(m_ShippingIsSet)
    {
        val[U("shipping")] = ModelBase::toJson(m_Shipping);
    }
    if(m_Shipping_address1IsSet)
    {
        val[U("shipping_address1")] = ModelBase::toJson(m_Shipping_address1);
    }
    if(m_Shipping_address2IsSet)
    {
        val[U("shipping_address2")] = ModelBase::toJson(m_Shipping_address2);
    }
    if(m_Shipping_city_nameIsSet)
    {
        val[U("shipping_city_name")] = ModelBase::toJson(m_Shipping_city_name);
    }
    if(m_Shipping_country_nameIsSet)
    {
        val[U("shipping_country_name")] = ModelBase::toJson(m_Shipping_country_name);
    }
    if(m_Shipping_full_nameIsSet)
    {
        val[U("shipping_full_name")] = ModelBase::toJson(m_Shipping_full_name);
    }
    if(m_Shipping_postal_codeIsSet)
    {
        val[U("shipping_postal_code")] = ModelBase::toJson(m_Shipping_postal_code);
    }
    if(m_Shipping_state_nameIsSet)
    {
        val[U("shipping_state_name")] = ModelBase::toJson(m_Shipping_state_name);
    }
    if(m_SortIsSet)
    {
        val[U("sort")] = ModelBase::toJson(m_Sort);
    }
    if(m_State_taxIsSet)
    {
        val[U("state_tax")] = ModelBase::toJson(m_State_tax);
    }
    if(m_SubtotalIsSet)
    {
        val[U("subtotal")] = ModelBase::toJson(m_Subtotal);
    }
    if(m_Updated_dateIsSet)
    {
        val[U("updated_date")] = ModelBase::toJson(m_Updated_date);
    }
    if(m_UserIsSet)
    {
        val[U("user")] = ModelBase::toJson(m_User);
    }
    if(m_Vendor_idIsSet)
    {
        val[U("vendor_id")] = ModelBase::toJson(m_Vendor_id);
    }
    if(m_Vendor_nameIsSet)
    {
        val[U("vendor_name")] = ModelBase::toJson(m_Vendor_name);
    }
    

    return val;
}

void InvoiceResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("billing_address1")))
    {
        setBillingAddress1(ModelBase::stringFromJson(val[U("billing_address1")]));
        
    }
    if(val.has_field(U("billing_address2")))
    {
        setBillingAddress2(ModelBase::stringFromJson(val[U("billing_address2")]));
        
    }
    if(val.has_field(U("billing_city_name")))
    {
        setBillingCityName(ModelBase::stringFromJson(val[U("billing_city_name")]));
        
    }
    if(val.has_field(U("billing_country_name")))
    {
        setBillingCountryName(ModelBase::stringFromJson(val[U("billing_country_name")]));
        
    }
    if(val.has_field(U("billing_full_name")))
    {
        setBillingFullName(ModelBase::stringFromJson(val[U("billing_full_name")]));
        
    }
    if(val.has_field(U("billing_postal_code")))
    {
        setBillingPostalCode(ModelBase::stringFromJson(val[U("billing_postal_code")]));
        
    }
    if(val.has_field(U("billing_state_name")))
    {
        setBillingStateName(ModelBase::stringFromJson(val[U("billing_state_name")]));
        
    }
    if(val.has_field(U("cart_id")))
    {
        setCartId(ModelBase::stringFromJson(val[U("cart_id")]));
        
    }
    if(val.has_field(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromJson(val[U("created_date")]));
    }
    if(val.has_field(U("currency")))
    {
        setCurrency(ModelBase::stringFromJson(val[U("currency")]));
        
    }
    if(val.has_field(U("current_fulfillment_status")))
    {
        setCurrentFulfillmentStatus(ModelBase::stringFromJson(val[U("current_fulfillment_status")]));
        
    }
    if(val.has_field(U("current_payment_status")))
    {
        setCurrentPaymentStatus(ModelBase::stringFromJson(val[U("current_payment_status")]));
        
    }
    if(val.has_field(U("discount")))
    {
        setDiscount(ModelBase::doubleFromJson(val[U("discount")]));
    }
    if(val.has_field(U("email")))
    {
        setEmail(ModelBase::stringFromJson(val[U("email")]));
        
    }
    if(val.has_field(U("external_ref")))
    {
        setExternalRef(ModelBase::stringFromJson(val[U("external_ref")]));
        
    }
    if(val.has_field(U("fed_tax")))
    {
        setFedTax(ModelBase::doubleFromJson(val[U("fed_tax")]));
    }
    if(val.has_field(U("grand_total")))
    {
        setGrandTotal(ModelBase::doubleFromJson(val[U("grand_total")]));
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int32_tFromJson(val[U("id")]));
    }
    if(val.has_field(U("invoice_number")))
    {
        setInvoiceNumber(ModelBase::stringFromJson(val[U("invoice_number")]));
        
    }
    {
        m_Items.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("items")))
        {
        for( auto& item : val[U("items")].as_array() )
        {
            
            if(item.is_null())
            {
                m_Items.push_back( std::shared_ptr<InvoiceItemResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<InvoiceItemResource> newItem(new InvoiceItemResource());
                newItem->fromJson(item);
                m_Items.push_back( newItem );
            }
            
        }
        }
    }
    if(val.has_field(U("name_prefix")))
    {
        setNamePrefix(ModelBase::stringFromJson(val[U("name_prefix")]));
        
    }
    if(val.has_field(U("order_notes")))
    {
        setOrderNotes(ModelBase::stringFromJson(val[U("order_notes")]));
        
    }
    if(val.has_field(U("parent_invoice_id")))
    {
        setParentInvoiceId(ModelBase::int32_tFromJson(val[U("parent_invoice_id")]));
    }
    if(val.has_field(U("payment_method_id")))
    {
        setPaymentMethodId(ModelBase::int32_tFromJson(val[U("payment_method_id")]));
    }
    if(val.has_field(U("phone")))
    {
        setPhone(ModelBase::stringFromJson(val[U("phone")]));
        
    }
    if(val.has_field(U("phone_number")))
    {
        setPhoneNumber(ModelBase::stringFromJson(val[U("phone_number")]));
        
    }
    if(val.has_field(U("shipping")))
    {
        setShipping(ModelBase::doubleFromJson(val[U("shipping")]));
    }
    if(val.has_field(U("shipping_address1")))
    {
        setShippingAddress1(ModelBase::stringFromJson(val[U("shipping_address1")]));
        
    }
    if(val.has_field(U("shipping_address2")))
    {
        setShippingAddress2(ModelBase::stringFromJson(val[U("shipping_address2")]));
        
    }
    if(val.has_field(U("shipping_city_name")))
    {
        setShippingCityName(ModelBase::stringFromJson(val[U("shipping_city_name")]));
        
    }
    if(val.has_field(U("shipping_country_name")))
    {
        setShippingCountryName(ModelBase::stringFromJson(val[U("shipping_country_name")]));
        
    }
    if(val.has_field(U("shipping_full_name")))
    {
        setShippingFullName(ModelBase::stringFromJson(val[U("shipping_full_name")]));
        
    }
    if(val.has_field(U("shipping_postal_code")))
    {
        setShippingPostalCode(ModelBase::stringFromJson(val[U("shipping_postal_code")]));
        
    }
    if(val.has_field(U("shipping_state_name")))
    {
        setShippingStateName(ModelBase::stringFromJson(val[U("shipping_state_name")]));
        
    }
    if(val.has_field(U("sort")))
    {
        setSort(ModelBase::int32_tFromJson(val[U("sort")]));
    }
    if(val.has_field(U("state_tax")))
    {
        setStateTax(ModelBase::doubleFromJson(val[U("state_tax")]));
    }
    if(val.has_field(U("subtotal")))
    {
        setSubtotal(ModelBase::doubleFromJson(val[U("subtotal")]));
    }
    if(val.has_field(U("updated_date")))
    {
        setUpdatedDate(ModelBase::int64_tFromJson(val[U("updated_date")]));
    }
    if(val.has_field(U("user")))
    {
        if(!val[U("user")].is_null())
        {
            std::shared_ptr<SimpleUserResource> newItem(new SimpleUserResource());
            newItem->fromJson(val[U("user")]);
            setUser( newItem );
        }
        
    }
    if(val.has_field(U("vendor_id")))
    {
        setVendorId(ModelBase::int32_tFromJson(val[U("vendor_id")]));
    }
    if(val.has_field(U("vendor_name")))
    {
        setVendorName(ModelBase::stringFromJson(val[U("vendor_name")]));
        
    }
    
}

void InvoiceResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Billing_address1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("billing_address1"), m_Billing_address1));
        
    }
    if(m_Billing_address2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("billing_address2"), m_Billing_address2));
        
    }
    if(m_Billing_city_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("billing_city_name"), m_Billing_city_name));
        
    }
    if(m_Billing_country_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("billing_country_name"), m_Billing_country_name));
        
    }
    if(m_Billing_full_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("billing_full_name"), m_Billing_full_name));
        
    }
    if(m_Billing_postal_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("billing_postal_code"), m_Billing_postal_code));
        
    }
    if(m_Billing_state_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("billing_state_name"), m_Billing_state_name));
        
    }
    if(m_Cart_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("cart_id"), m_Cart_id));
        
    }
    if(m_Created_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("created_date"), m_Created_date));
    }
    if(m_CurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("currency"), m_Currency));
        
    }
    if(m_Current_fulfillment_statusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("current_fulfillment_status"), m_Current_fulfillment_status));
        
    }
    if(m_Current_payment_statusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("current_payment_status"), m_Current_payment_status));
        
    }
    if(m_DiscountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("discount"), m_Discount));
    }
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("email"), m_Email));
        
    }
    if(m_External_refIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("external_ref"), m_External_ref));
        
    }
    if(m_Fed_taxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("fed_tax"), m_Fed_tax));
    }
    if(m_Grand_totalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("grand_total"), m_Grand_total));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    if(m_Invoice_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("invoice_number"), m_Invoice_number));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Items )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("items"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_Name_prefixIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name_prefix"), m_Name_prefix));
        
    }
    if(m_Order_notesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("order_notes"), m_Order_notes));
        
    }
    if(m_Parent_invoice_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("parent_invoice_id"), m_Parent_invoice_id));
    }
    if(m_Payment_method_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("payment_method_id"), m_Payment_method_id));
    }
    if(m_PhoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("phone"), m_Phone));
        
    }
    if(m_Phone_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("phone_number"), m_Phone_number));
        
    }
    if(m_ShippingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("shipping"), m_Shipping));
    }
    if(m_Shipping_address1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("shipping_address1"), m_Shipping_address1));
        
    }
    if(m_Shipping_address2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("shipping_address2"), m_Shipping_address2));
        
    }
    if(m_Shipping_city_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("shipping_city_name"), m_Shipping_city_name));
        
    }
    if(m_Shipping_country_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("shipping_country_name"), m_Shipping_country_name));
        
    }
    if(m_Shipping_full_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("shipping_full_name"), m_Shipping_full_name));
        
    }
    if(m_Shipping_postal_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("shipping_postal_code"), m_Shipping_postal_code));
        
    }
    if(m_Shipping_state_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("shipping_state_name"), m_Shipping_state_name));
        
    }
    if(m_SortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("sort"), m_Sort));
    }
    if(m_State_taxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("state_tax"), m_State_tax));
    }
    if(m_SubtotalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("subtotal"), m_Subtotal));
    }
    if(m_Updated_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("updated_date"), m_Updated_date));
    }
    if(m_UserIsSet)
    {
        if (m_User.get())
        {
            m_User->toMultipart(multipart, U("user."));
        }
        
    }
    if(m_Vendor_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("vendor_id"), m_Vendor_id));
    }
    if(m_Vendor_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("vendor_name"), m_Vendor_name));
        
    }
    
}

void InvoiceResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("billing_address1")))
    {
        setBillingAddress1(ModelBase::stringFromHttpContent(multipart->getContent(U("billing_address1"))));
        
    }
    if(multipart->hasContent(U("billing_address2")))
    {
        setBillingAddress2(ModelBase::stringFromHttpContent(multipart->getContent(U("billing_address2"))));
        
    }
    if(multipart->hasContent(U("billing_city_name")))
    {
        setBillingCityName(ModelBase::stringFromHttpContent(multipart->getContent(U("billing_city_name"))));
        
    }
    if(multipart->hasContent(U("billing_country_name")))
    {
        setBillingCountryName(ModelBase::stringFromHttpContent(multipart->getContent(U("billing_country_name"))));
        
    }
    if(multipart->hasContent(U("billing_full_name")))
    {
        setBillingFullName(ModelBase::stringFromHttpContent(multipart->getContent(U("billing_full_name"))));
        
    }
    if(multipart->hasContent(U("billing_postal_code")))
    {
        setBillingPostalCode(ModelBase::stringFromHttpContent(multipart->getContent(U("billing_postal_code"))));
        
    }
    if(multipart->hasContent(U("billing_state_name")))
    {
        setBillingStateName(ModelBase::stringFromHttpContent(multipart->getContent(U("billing_state_name"))));
        
    }
    if(multipart->hasContent(U("cart_id")))
    {
        setCartId(ModelBase::stringFromHttpContent(multipart->getContent(U("cart_id"))));
        
    }
    if(multipart->hasContent(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("created_date"))));
    }
    if(multipart->hasContent(U("currency")))
    {
        setCurrency(ModelBase::stringFromHttpContent(multipart->getContent(U("currency"))));
        
    }
    if(multipart->hasContent(U("current_fulfillment_status")))
    {
        setCurrentFulfillmentStatus(ModelBase::stringFromHttpContent(multipart->getContent(U("current_fulfillment_status"))));
        
    }
    if(multipart->hasContent(U("current_payment_status")))
    {
        setCurrentPaymentStatus(ModelBase::stringFromHttpContent(multipart->getContent(U("current_payment_status"))));
        
    }
    if(multipart->hasContent(U("discount")))
    {
        setDiscount(ModelBase::doubleFromHttpContent(multipart->getContent(U("discount"))));
    }
    if(multipart->hasContent(U("email")))
    {
        setEmail(ModelBase::stringFromHttpContent(multipart->getContent(U("email"))));
        
    }
    if(multipart->hasContent(U("external_ref")))
    {
        setExternalRef(ModelBase::stringFromHttpContent(multipart->getContent(U("external_ref"))));
        
    }
    if(multipart->hasContent(U("fed_tax")))
    {
        setFedTax(ModelBase::doubleFromHttpContent(multipart->getContent(U("fed_tax"))));
    }
    if(multipart->hasContent(U("grand_total")))
    {
        setGrandTotal(ModelBase::doubleFromHttpContent(multipart->getContent(U("grand_total"))));
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("invoice_number")))
    {
        setInvoiceNumber(ModelBase::stringFromHttpContent(multipart->getContent(U("invoice_number"))));
        
    }
    {
        m_Items.clear();
        if(multipart->hasContent(U("items")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("items"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_Items.push_back( std::shared_ptr<InvoiceItemResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<InvoiceItemResource> newItem(new InvoiceItemResource());
                newItem->fromJson(item);
                m_Items.push_back( newItem );
            }
            
        }
        }
    }
    if(multipart->hasContent(U("name_prefix")))
    {
        setNamePrefix(ModelBase::stringFromHttpContent(multipart->getContent(U("name_prefix"))));
        
    }
    if(multipart->hasContent(U("order_notes")))
    {
        setOrderNotes(ModelBase::stringFromHttpContent(multipart->getContent(U("order_notes"))));
        
    }
    if(multipart->hasContent(U("parent_invoice_id")))
    {
        setParentInvoiceId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("parent_invoice_id"))));
    }
    if(multipart->hasContent(U("payment_method_id")))
    {
        setPaymentMethodId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("payment_method_id"))));
    }
    if(multipart->hasContent(U("phone")))
    {
        setPhone(ModelBase::stringFromHttpContent(multipart->getContent(U("phone"))));
        
    }
    if(multipart->hasContent(U("phone_number")))
    {
        setPhoneNumber(ModelBase::stringFromHttpContent(multipart->getContent(U("phone_number"))));
        
    }
    if(multipart->hasContent(U("shipping")))
    {
        setShipping(ModelBase::doubleFromHttpContent(multipart->getContent(U("shipping"))));
    }
    if(multipart->hasContent(U("shipping_address1")))
    {
        setShippingAddress1(ModelBase::stringFromHttpContent(multipart->getContent(U("shipping_address1"))));
        
    }
    if(multipart->hasContent(U("shipping_address2")))
    {
        setShippingAddress2(ModelBase::stringFromHttpContent(multipart->getContent(U("shipping_address2"))));
        
    }
    if(multipart->hasContent(U("shipping_city_name")))
    {
        setShippingCityName(ModelBase::stringFromHttpContent(multipart->getContent(U("shipping_city_name"))));
        
    }
    if(multipart->hasContent(U("shipping_country_name")))
    {
        setShippingCountryName(ModelBase::stringFromHttpContent(multipart->getContent(U("shipping_country_name"))));
        
    }
    if(multipart->hasContent(U("shipping_full_name")))
    {
        setShippingFullName(ModelBase::stringFromHttpContent(multipart->getContent(U("shipping_full_name"))));
        
    }
    if(multipart->hasContent(U("shipping_postal_code")))
    {
        setShippingPostalCode(ModelBase::stringFromHttpContent(multipart->getContent(U("shipping_postal_code"))));
        
    }
    if(multipart->hasContent(U("shipping_state_name")))
    {
        setShippingStateName(ModelBase::stringFromHttpContent(multipart->getContent(U("shipping_state_name"))));
        
    }
    if(multipart->hasContent(U("sort")))
    {
        setSort(ModelBase::int32_tFromHttpContent(multipart->getContent(U("sort"))));
    }
    if(multipart->hasContent(U("state_tax")))
    {
        setStateTax(ModelBase::doubleFromHttpContent(multipart->getContent(U("state_tax"))));
    }
    if(multipart->hasContent(U("subtotal")))
    {
        setSubtotal(ModelBase::doubleFromHttpContent(multipart->getContent(U("subtotal"))));
    }
    if(multipart->hasContent(U("updated_date")))
    {
        setUpdatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("updated_date"))));
    }
    if(multipart->hasContent(U("user")))
    {
        if(multipart->hasContent(U("user")))
        {
            std::shared_ptr<SimpleUserResource> newItem(new SimpleUserResource());
            newItem->fromMultiPart(multipart, U("user."));
            setUser( newItem );
        }
        
    }
    if(multipart->hasContent(U("vendor_id")))
    {
        setVendorId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("vendor_id"))));
    }
    if(multipart->hasContent(U("vendor_name")))
    {
        setVendorName(ModelBase::stringFromHttpContent(multipart->getContent(U("vendor_name"))));
        
    }
    
}


utility::string_t InvoiceResource::getBillingAddress1() const
{
    return m_Billing_address1;
}
void InvoiceResource::setBillingAddress1(utility::string_t value)
{
    m_Billing_address1 = value;
    m_Billing_address1IsSet = true;
}
bool InvoiceResource::billing_address1IsSet() const
{
    return m_Billing_address1IsSet;
}
void InvoiceResource::unsetBilling_address1()
{
    m_Billing_address1IsSet = false;
}
utility::string_t InvoiceResource::getBillingAddress2() const
{
    return m_Billing_address2;
}
void InvoiceResource::setBillingAddress2(utility::string_t value)
{
    m_Billing_address2 = value;
    m_Billing_address2IsSet = true;
}
bool InvoiceResource::billing_address2IsSet() const
{
    return m_Billing_address2IsSet;
}
void InvoiceResource::unsetBilling_address2()
{
    m_Billing_address2IsSet = false;
}
utility::string_t InvoiceResource::getBillingCityName() const
{
    return m_Billing_city_name;
}
void InvoiceResource::setBillingCityName(utility::string_t value)
{
    m_Billing_city_name = value;
    m_Billing_city_nameIsSet = true;
}
bool InvoiceResource::billing_city_nameIsSet() const
{
    return m_Billing_city_nameIsSet;
}
void InvoiceResource::unsetBilling_city_name()
{
    m_Billing_city_nameIsSet = false;
}
utility::string_t InvoiceResource::getBillingCountryName() const
{
    return m_Billing_country_name;
}
void InvoiceResource::setBillingCountryName(utility::string_t value)
{
    m_Billing_country_name = value;
    m_Billing_country_nameIsSet = true;
}
bool InvoiceResource::billing_country_nameIsSet() const
{
    return m_Billing_country_nameIsSet;
}
void InvoiceResource::unsetBilling_country_name()
{
    m_Billing_country_nameIsSet = false;
}
utility::string_t InvoiceResource::getBillingFullName() const
{
    return m_Billing_full_name;
}
void InvoiceResource::setBillingFullName(utility::string_t value)
{
    m_Billing_full_name = value;
    m_Billing_full_nameIsSet = true;
}
bool InvoiceResource::billing_full_nameIsSet() const
{
    return m_Billing_full_nameIsSet;
}
void InvoiceResource::unsetBilling_full_name()
{
    m_Billing_full_nameIsSet = false;
}
utility::string_t InvoiceResource::getBillingPostalCode() const
{
    return m_Billing_postal_code;
}
void InvoiceResource::setBillingPostalCode(utility::string_t value)
{
    m_Billing_postal_code = value;
    m_Billing_postal_codeIsSet = true;
}
bool InvoiceResource::billing_postal_codeIsSet() const
{
    return m_Billing_postal_codeIsSet;
}
void InvoiceResource::unsetBilling_postal_code()
{
    m_Billing_postal_codeIsSet = false;
}
utility::string_t InvoiceResource::getBillingStateName() const
{
    return m_Billing_state_name;
}
void InvoiceResource::setBillingStateName(utility::string_t value)
{
    m_Billing_state_name = value;
    m_Billing_state_nameIsSet = true;
}
bool InvoiceResource::billing_state_nameIsSet() const
{
    return m_Billing_state_nameIsSet;
}
void InvoiceResource::unsetBilling_state_name()
{
    m_Billing_state_nameIsSet = false;
}
utility::string_t InvoiceResource::getCartId() const
{
    return m_Cart_id;
}
void InvoiceResource::setCartId(utility::string_t value)
{
    m_Cart_id = value;
    m_Cart_idIsSet = true;
}
bool InvoiceResource::cart_idIsSet() const
{
    return m_Cart_idIsSet;
}
void InvoiceResource::unsetCart_id()
{
    m_Cart_idIsSet = false;
}
int64_t InvoiceResource::getCreatedDate() const
{
    return m_Created_date;
}
void InvoiceResource::setCreatedDate(int64_t value)
{
    m_Created_date = value;
    m_Created_dateIsSet = true;
}
bool InvoiceResource::created_dateIsSet() const
{
    return m_Created_dateIsSet;
}
void InvoiceResource::unsetCreated_date()
{
    m_Created_dateIsSet = false;
}
utility::string_t InvoiceResource::getCurrency() const
{
    return m_Currency;
}
void InvoiceResource::setCurrency(utility::string_t value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}
bool InvoiceResource::currencyIsSet() const
{
    return m_CurrencyIsSet;
}
void InvoiceResource::unsetCurrency()
{
    m_CurrencyIsSet = false;
}
utility::string_t InvoiceResource::getCurrentFulfillmentStatus() const
{
    return m_Current_fulfillment_status;
}
void InvoiceResource::setCurrentFulfillmentStatus(utility::string_t value)
{
    m_Current_fulfillment_status = value;
    m_Current_fulfillment_statusIsSet = true;
}
bool InvoiceResource::current_fulfillment_statusIsSet() const
{
    return m_Current_fulfillment_statusIsSet;
}
void InvoiceResource::unsetCurrent_fulfillment_status()
{
    m_Current_fulfillment_statusIsSet = false;
}
utility::string_t InvoiceResource::getCurrentPaymentStatus() const
{
    return m_Current_payment_status;
}
void InvoiceResource::setCurrentPaymentStatus(utility::string_t value)
{
    m_Current_payment_status = value;
    m_Current_payment_statusIsSet = true;
}
bool InvoiceResource::current_payment_statusIsSet() const
{
    return m_Current_payment_statusIsSet;
}
void InvoiceResource::unsetCurrent_payment_status()
{
    m_Current_payment_statusIsSet = false;
}
double InvoiceResource::getDiscount() const
{
    return m_Discount;
}
void InvoiceResource::setDiscount(double value)
{
    m_Discount = value;
    m_DiscountIsSet = true;
}
bool InvoiceResource::discountIsSet() const
{
    return m_DiscountIsSet;
}
void InvoiceResource::unsetDiscount()
{
    m_DiscountIsSet = false;
}
utility::string_t InvoiceResource::getEmail() const
{
    return m_Email;
}
void InvoiceResource::setEmail(utility::string_t value)
{
    m_Email = value;
    m_EmailIsSet = true;
}
bool InvoiceResource::emailIsSet() const
{
    return m_EmailIsSet;
}
void InvoiceResource::unsetEmail()
{
    m_EmailIsSet = false;
}
utility::string_t InvoiceResource::getExternalRef() const
{
    return m_External_ref;
}
void InvoiceResource::setExternalRef(utility::string_t value)
{
    m_External_ref = value;
    m_External_refIsSet = true;
}
bool InvoiceResource::external_refIsSet() const
{
    return m_External_refIsSet;
}
void InvoiceResource::unsetExternal_ref()
{
    m_External_refIsSet = false;
}
double InvoiceResource::getFedTax() const
{
    return m_Fed_tax;
}
void InvoiceResource::setFedTax(double value)
{
    m_Fed_tax = value;
    m_Fed_taxIsSet = true;
}
bool InvoiceResource::fed_taxIsSet() const
{
    return m_Fed_taxIsSet;
}
void InvoiceResource::unsetFed_tax()
{
    m_Fed_taxIsSet = false;
}
double InvoiceResource::getGrandTotal() const
{
    return m_Grand_total;
}
void InvoiceResource::setGrandTotal(double value)
{
    m_Grand_total = value;
    m_Grand_totalIsSet = true;
}
bool InvoiceResource::grand_totalIsSet() const
{
    return m_Grand_totalIsSet;
}
void InvoiceResource::unsetGrand_total()
{
    m_Grand_totalIsSet = false;
}
int32_t InvoiceResource::getId() const
{
    return m_Id;
}
void InvoiceResource::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool InvoiceResource::idIsSet() const
{
    return m_IdIsSet;
}
void InvoiceResource::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t InvoiceResource::getInvoiceNumber() const
{
    return m_Invoice_number;
}
void InvoiceResource::setInvoiceNumber(utility::string_t value)
{
    m_Invoice_number = value;
    m_Invoice_numberIsSet = true;
}
bool InvoiceResource::invoice_numberIsSet() const
{
    return m_Invoice_numberIsSet;
}
void InvoiceResource::unsetInvoice_number()
{
    m_Invoice_numberIsSet = false;
}
std::vector<std::shared_ptr<InvoiceItemResource>>& InvoiceResource::getItems()
{
    return m_Items;
}
bool InvoiceResource::itemsIsSet() const
{
    return m_ItemsIsSet;
}
void InvoiceResource::unsetItems()
{
    m_ItemsIsSet = false;
}
utility::string_t InvoiceResource::getNamePrefix() const
{
    return m_Name_prefix;
}
void InvoiceResource::setNamePrefix(utility::string_t value)
{
    m_Name_prefix = value;
    m_Name_prefixIsSet = true;
}
bool InvoiceResource::name_prefixIsSet() const
{
    return m_Name_prefixIsSet;
}
void InvoiceResource::unsetName_prefix()
{
    m_Name_prefixIsSet = false;
}
utility::string_t InvoiceResource::getOrderNotes() const
{
    return m_Order_notes;
}
void InvoiceResource::setOrderNotes(utility::string_t value)
{
    m_Order_notes = value;
    m_Order_notesIsSet = true;
}
bool InvoiceResource::order_notesIsSet() const
{
    return m_Order_notesIsSet;
}
void InvoiceResource::unsetOrder_notes()
{
    m_Order_notesIsSet = false;
}
int32_t InvoiceResource::getParentInvoiceId() const
{
    return m_Parent_invoice_id;
}
void InvoiceResource::setParentInvoiceId(int32_t value)
{
    m_Parent_invoice_id = value;
    m_Parent_invoice_idIsSet = true;
}
bool InvoiceResource::parent_invoice_idIsSet() const
{
    return m_Parent_invoice_idIsSet;
}
void InvoiceResource::unsetParent_invoice_id()
{
    m_Parent_invoice_idIsSet = false;
}
int32_t InvoiceResource::getPaymentMethodId() const
{
    return m_Payment_method_id;
}
void InvoiceResource::setPaymentMethodId(int32_t value)
{
    m_Payment_method_id = value;
    m_Payment_method_idIsSet = true;
}
bool InvoiceResource::payment_method_idIsSet() const
{
    return m_Payment_method_idIsSet;
}
void InvoiceResource::unsetPayment_method_id()
{
    m_Payment_method_idIsSet = false;
}
utility::string_t InvoiceResource::getPhone() const
{
    return m_Phone;
}
void InvoiceResource::setPhone(utility::string_t value)
{
    m_Phone = value;
    m_PhoneIsSet = true;
}
bool InvoiceResource::phoneIsSet() const
{
    return m_PhoneIsSet;
}
void InvoiceResource::unsetPhone()
{
    m_PhoneIsSet = false;
}
utility::string_t InvoiceResource::getPhoneNumber() const
{
    return m_Phone_number;
}
void InvoiceResource::setPhoneNumber(utility::string_t value)
{
    m_Phone_number = value;
    m_Phone_numberIsSet = true;
}
bool InvoiceResource::phone_numberIsSet() const
{
    return m_Phone_numberIsSet;
}
void InvoiceResource::unsetPhone_number()
{
    m_Phone_numberIsSet = false;
}
double InvoiceResource::getShipping() const
{
    return m_Shipping;
}
void InvoiceResource::setShipping(double value)
{
    m_Shipping = value;
    m_ShippingIsSet = true;
}
bool InvoiceResource::shippingIsSet() const
{
    return m_ShippingIsSet;
}
void InvoiceResource::unsetShipping()
{
    m_ShippingIsSet = false;
}
utility::string_t InvoiceResource::getShippingAddress1() const
{
    return m_Shipping_address1;
}
void InvoiceResource::setShippingAddress1(utility::string_t value)
{
    m_Shipping_address1 = value;
    m_Shipping_address1IsSet = true;
}
bool InvoiceResource::shipping_address1IsSet() const
{
    return m_Shipping_address1IsSet;
}
void InvoiceResource::unsetShipping_address1()
{
    m_Shipping_address1IsSet = false;
}
utility::string_t InvoiceResource::getShippingAddress2() const
{
    return m_Shipping_address2;
}
void InvoiceResource::setShippingAddress2(utility::string_t value)
{
    m_Shipping_address2 = value;
    m_Shipping_address2IsSet = true;
}
bool InvoiceResource::shipping_address2IsSet() const
{
    return m_Shipping_address2IsSet;
}
void InvoiceResource::unsetShipping_address2()
{
    m_Shipping_address2IsSet = false;
}
utility::string_t InvoiceResource::getShippingCityName() const
{
    return m_Shipping_city_name;
}
void InvoiceResource::setShippingCityName(utility::string_t value)
{
    m_Shipping_city_name = value;
    m_Shipping_city_nameIsSet = true;
}
bool InvoiceResource::shipping_city_nameIsSet() const
{
    return m_Shipping_city_nameIsSet;
}
void InvoiceResource::unsetShipping_city_name()
{
    m_Shipping_city_nameIsSet = false;
}
utility::string_t InvoiceResource::getShippingCountryName() const
{
    return m_Shipping_country_name;
}
void InvoiceResource::setShippingCountryName(utility::string_t value)
{
    m_Shipping_country_name = value;
    m_Shipping_country_nameIsSet = true;
}
bool InvoiceResource::shipping_country_nameIsSet() const
{
    return m_Shipping_country_nameIsSet;
}
void InvoiceResource::unsetShipping_country_name()
{
    m_Shipping_country_nameIsSet = false;
}
utility::string_t InvoiceResource::getShippingFullName() const
{
    return m_Shipping_full_name;
}
void InvoiceResource::setShippingFullName(utility::string_t value)
{
    m_Shipping_full_name = value;
    m_Shipping_full_nameIsSet = true;
}
bool InvoiceResource::shipping_full_nameIsSet() const
{
    return m_Shipping_full_nameIsSet;
}
void InvoiceResource::unsetShipping_full_name()
{
    m_Shipping_full_nameIsSet = false;
}
utility::string_t InvoiceResource::getShippingPostalCode() const
{
    return m_Shipping_postal_code;
}
void InvoiceResource::setShippingPostalCode(utility::string_t value)
{
    m_Shipping_postal_code = value;
    m_Shipping_postal_codeIsSet = true;
}
bool InvoiceResource::shipping_postal_codeIsSet() const
{
    return m_Shipping_postal_codeIsSet;
}
void InvoiceResource::unsetShipping_postal_code()
{
    m_Shipping_postal_codeIsSet = false;
}
utility::string_t InvoiceResource::getShippingStateName() const
{
    return m_Shipping_state_name;
}
void InvoiceResource::setShippingStateName(utility::string_t value)
{
    m_Shipping_state_name = value;
    m_Shipping_state_nameIsSet = true;
}
bool InvoiceResource::shipping_state_nameIsSet() const
{
    return m_Shipping_state_nameIsSet;
}
void InvoiceResource::unsetShipping_state_name()
{
    m_Shipping_state_nameIsSet = false;
}
int32_t InvoiceResource::getSort() const
{
    return m_Sort;
}
void InvoiceResource::setSort(int32_t value)
{
    m_Sort = value;
    m_SortIsSet = true;
}
bool InvoiceResource::sortIsSet() const
{
    return m_SortIsSet;
}
void InvoiceResource::unsetSort()
{
    m_SortIsSet = false;
}
double InvoiceResource::getStateTax() const
{
    return m_State_tax;
}
void InvoiceResource::setStateTax(double value)
{
    m_State_tax = value;
    m_State_taxIsSet = true;
}
bool InvoiceResource::state_taxIsSet() const
{
    return m_State_taxIsSet;
}
void InvoiceResource::unsetState_tax()
{
    m_State_taxIsSet = false;
}
double InvoiceResource::getSubtotal() const
{
    return m_Subtotal;
}
void InvoiceResource::setSubtotal(double value)
{
    m_Subtotal = value;
    m_SubtotalIsSet = true;
}
bool InvoiceResource::subtotalIsSet() const
{
    return m_SubtotalIsSet;
}
void InvoiceResource::unsetSubtotal()
{
    m_SubtotalIsSet = false;
}
int64_t InvoiceResource::getUpdatedDate() const
{
    return m_Updated_date;
}
void InvoiceResource::setUpdatedDate(int64_t value)
{
    m_Updated_date = value;
    m_Updated_dateIsSet = true;
}
bool InvoiceResource::updated_dateIsSet() const
{
    return m_Updated_dateIsSet;
}
void InvoiceResource::unsetUpdated_date()
{
    m_Updated_dateIsSet = false;
}
std::shared_ptr<SimpleUserResource> InvoiceResource::getUser() const
{
    return m_User;
}
void InvoiceResource::setUser(std::shared_ptr<SimpleUserResource> value)
{
    m_User = value;
    m_UserIsSet = true;
}
bool InvoiceResource::userIsSet() const
{
    return m_UserIsSet;
}
void InvoiceResource::unsetUser()
{
    m_UserIsSet = false;
}
int32_t InvoiceResource::getVendorId() const
{
    return m_Vendor_id;
}
void InvoiceResource::setVendorId(int32_t value)
{
    m_Vendor_id = value;
    m_Vendor_idIsSet = true;
}
bool InvoiceResource::vendor_idIsSet() const
{
    return m_Vendor_idIsSet;
}
void InvoiceResource::unsetVendor_id()
{
    m_Vendor_idIsSet = false;
}
utility::string_t InvoiceResource::getVendorName() const
{
    return m_Vendor_name;
}
void InvoiceResource::setVendorName(utility::string_t value)
{
    m_Vendor_name = value;
    m_Vendor_nameIsSet = true;
}
bool InvoiceResource::vendor_nameIsSet() const
{
    return m_Vendor_nameIsSet;
}
void InvoiceResource::unsetVendor_name()
{
    m_Vendor_nameIsSet = false;
}

}
}
}
}

