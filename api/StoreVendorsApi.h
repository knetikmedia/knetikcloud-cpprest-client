/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * StoreVendorsApi.h
 *
 * 
 */

#ifndef StoreVendorsApi_H_
#define StoreVendorsApi_H_


#include "ApiClient.h"

#include "ItemTemplateResource.h"
#include "PageResource«ItemTemplateResource».h"
#include "PageResource«VendorResource».h"
#include "Result.h"
#include "VendorResource.h"
#include <cpprest/details/basic_types.h>

namespace com {
namespace knetikcloud {
namespace client {
namespace api {

using namespace com::knetikcloud::client::model;

class  StoreVendorsApi
{
public:
    StoreVendorsApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~StoreVendorsApi();
    /// <summary>
    /// Create a vendor
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="vendor">The vendor (optional)</param>
    pplx::task<std::shared_ptr<VendorResource>> createVendor(std::shared_ptr<VendorResource> vendor);
    /// <summary>
    /// Create a vendor template
    /// </summary>
    /// <remarks>
    /// Vendor Templates define a type of vendor and the properties they have.
    /// </remarks>
    /// <param name="vendorTemplateResource">The new vendor template (optional)</param>
    pplx::task<std::shared_ptr<ItemTemplateResource>> createVendorTemplate(std::shared_ptr<ItemTemplateResource> vendorTemplateResource);
    /// <summary>
    /// Delete a vendor
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">The id of the vendor</param>
    pplx::task<void> deleteVendor(int32_t id);
    /// <summary>
    /// Delete a vendor template
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">The id of the template</param>/// <param name="cascade">force deleting the template if it&#39;s attached to other objects, cascade &#x3D; detach (optional)</param>
    pplx::task<void> deleteVendorTemplate(utility::string_t id, utility::string_t cascade);
    /// <summary>
    /// Get a single vendor
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">The id of the vendor</param>
    pplx::task<std::shared_ptr<VendorResource>> getVendor(int32_t id);
    /// <summary>
    /// Get a single vendor template
    /// </summary>
    /// <remarks>
    /// Vendor Templates define a type of vendor and the properties they have.
    /// </remarks>
    /// <param name="id">The id of the template</param>
    pplx::task<std::shared_ptr<ItemTemplateResource>> getVendorTemplate(utility::string_t id);
    /// <summary>
    /// List and search vendor templates
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to 1)</param>
    pplx::task<std::shared_ptr<PageResource«ItemTemplateResource»>> getVendorTemplates(int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// List and search vendors
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="filterName">Filters vendors by name starting with the text provided in the filter (optional)</param>/// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
    pplx::task<std::shared_ptr<PageResource«VendorResource»>> getVendors(utility::string_t filterName, int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// Update a vendor
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">The id of the vendor</param>/// <param name="vendor">The vendor (optional)</param>
    pplx::task<std::shared_ptr<VendorResource>> updateVendor(int32_t id, std::shared_ptr<VendorResource> vendor);
    /// <summary>
    /// Update a vendor template
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">The id of the template</param>/// <param name="vendorTemplateResource">The vendor template resource object (optional)</param>
    pplx::task<std::shared_ptr<ItemTemplateResource>> updateVendorTemplate(utility::string_t id, std::shared_ptr<ItemTemplateResource> vendorTemplateResource);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* StoreVendorsApi_H_ */

