/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "VideoTag.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

VideoTag::VideoTag()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Tag = U("");
    m_TagIsSet = false;
    m_VideoIsSet = false;
    
}

VideoTag::~VideoTag()
{
}

void VideoTag::validate()
{
    // TODO: implement validation
}

web::json::value VideoTag::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_TagIsSet)
    {
        val[U("tag")] = ModelBase::toJson(m_Tag);
    }
    if(m_VideoIsSet)
    {
        val[U("video")] = ModelBase::toJson(m_Video);
    }
    

    return val;
}

void VideoTag::fromJson(web::json::value& val)
{
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int64_tFromJson(val[U("id")]));
    }
    if(val.has_field(U("tag")))
    {
        setTag(ModelBase::stringFromJson(val[U("tag")]));
        
    }
    if(val.has_field(U("video")))
    {
        if(!val[U("video")].is_null())
        {
            std::shared_ptr<Video> newItem(new Video());
            newItem->fromJson(val[U("video")]);
            setVideo( newItem );
        }
        
    }
    
}

void VideoTag::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    if(m_TagIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("tag"), m_Tag));
        
    }
    if(m_VideoIsSet)
    {
        if (m_Video.get())
        {
            m_Video->toMultipart(multipart, U("video."));
        }
        
    }
    
}

void VideoTag::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int64_tFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("tag")))
    {
        setTag(ModelBase::stringFromHttpContent(multipart->getContent(U("tag"))));
        
    }
    if(multipart->hasContent(U("video")))
    {
        if(multipart->hasContent(U("video")))
        {
            std::shared_ptr<Video> newItem(new Video());
            newItem->fromMultiPart(multipart, U("video."));
            setVideo( newItem );
        }
        
    }
    
}


int64_t VideoTag::getId() const
{
    return m_Id;
}
void VideoTag::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool VideoTag::idIsSet() const
{
    return m_IdIsSet;
}
void VideoTag::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t VideoTag::getTag() const
{
    return m_Tag;
}
void VideoTag::setTag(utility::string_t value)
{
    m_Tag = value;
    m_TagIsSet = true;
}
bool VideoTag::tagIsSet() const
{
    return m_TagIsSet;
}
void VideoTag::unsetTag()
{
    m_TagIsSet = false;
}
std::shared_ptr<Video> VideoTag::getVideo() const
{
    return m_Video;
}
void VideoTag::setVideo(std::shared_ptr<Video> value)
{
    m_Video = value;
    m_VideoIsSet = true;
}
bool VideoTag::videoIsSet() const
{
    return m_VideoIsSet;
}
void VideoTag::unsetVideo()
{
    m_VideoIsSet = false;
}

}
}
}
}

