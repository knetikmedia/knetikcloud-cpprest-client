/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Messaging_TopicsApi.h
 *
 * 
 */

#ifndef Messaging_TopicsApi_H_
#define Messaging_TopicsApi_H_


#include "ApiClient.h"

#include "PageResource«TopicResource».h"
#include "Result.h"
#include "TopicSubscriberResource.h"
#include "ValueWrapper«boolean».h"
#include <cpprest/details/basic_types.h>

namespace com {
namespace knetikcloud {
namespace client {
namespace api {

using namespace com::knetikcloud::client::model;

class  Messaging_TopicsApi
{
public:
    Messaging_TopicsApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~Messaging_TopicsApi();
    /// <summary>
    /// Enable or disable messages for a user
    /// </summary>
    /// <remarks>
    /// Useful for opt-out options on a single topic. Consider multiple topics for multiple opt-out options. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TOPICS_ADMIN or self
    /// </remarks>
    /// <param name="id">The id of the topic</param>/// <param name="userId">The id of the subscriber or &#39;me&#39;</param>/// <param name="disabled">disabled</param>
    pplx::task<void> disableTopicSubscriber(utility::string_t id, utility::string_t userId, std::shared_ptr<ValueWrapper«boolean»> disabled);
    /// <summary>
    /// Get a subscriber to a topic
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; TOPICS_ADMIN or self
    /// </remarks>
    /// <param name="id">The id of the topic</param>/// <param name="userId">The id of the subscriber or &#39;me&#39;</param>
    pplx::task<std::shared_ptr<TopicSubscriberResource>> getTopicSubscriber(utility::string_t id, utility::string_t userId);
    /// <summary>
    /// Get all messaging topics for a given user
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; TOPICS_ADMIN or self
    /// </remarks>
    /// <param name="id">The id of the user or &#39;me&#39;</param>
    pplx::task<std::shared_ptr<PageResource«TopicResource»>> getUserTopics(utility::string_t id);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* Messaging_TopicsApi_H_ */

