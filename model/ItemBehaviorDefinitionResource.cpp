/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ItemBehaviorDefinitionResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

ItemBehaviorDefinitionResource::ItemBehaviorDefinitionResource()
{
    m_Modifiable = false;
    m_Required = false;
}

ItemBehaviorDefinitionResource::~ItemBehaviorDefinitionResource()
{
}

void ItemBehaviorDefinitionResource::validate()
{
    // TODO: implement validation
}

web::json::value ItemBehaviorDefinitionResource::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("behavior")] = ModelBase::toJson(m_Behavior);
    val[U("modifiable")] = ModelBase::toJson(m_Modifiable);
    val[U("required")] = ModelBase::toJson(m_Required);

    return val;
}

void ItemBehaviorDefinitionResource::fromJson(web::json::value& val)
{
    std::shared_ptr<Behavior> newBehavior(new Behavior());
    newBehavior->fromJson(val[U("behavior")]);
    setBehavior( newBehavior );
    setModifiable(ModelBase::boolFromJson(val[U("modifiable")]));
    setRequired(ModelBase::boolFromJson(val[U("required")]));
}

void ItemBehaviorDefinitionResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    m_Behavior->toMultipart(multipart, U("behavior."));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("modifiable"), m_Modifiable));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("required"), m_Required));
}

void ItemBehaviorDefinitionResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    std::shared_ptr<Behavior> newBehavior(new Behavior());
    newBehavior->fromMultiPart(multipart, U("behavior."));
    setBehavior( newBehavior );
    setModifiable(ModelBase::boolFromHttpContent(multipart->getContent(U("modifiable"))));
    setRequired(ModelBase::boolFromHttpContent(multipart->getContent(U("required"))));
}

std::shared_ptr<Behavior> ItemBehaviorDefinitionResource::getBehavior() const
{
    return m_Behavior;
}


void ItemBehaviorDefinitionResource::setBehavior(std::shared_ptr<Behavior> value)
{
    m_Behavior = value;
    
}
bool ItemBehaviorDefinitionResource::getModifiable() const
{
    return m_Modifiable;
}


void ItemBehaviorDefinitionResource::setModifiable(bool value)
{
    m_Modifiable = value;
    
}
bool ItemBehaviorDefinitionResource::getRequired() const
{
    return m_Required;
}


void ItemBehaviorDefinitionResource::setRequired(bool value)
{
    m_Required = value;
    
}
}
}
}
}

