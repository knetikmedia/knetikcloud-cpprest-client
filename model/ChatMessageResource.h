/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * ChatMessageResource.h
 *
 * 
 */

#ifndef ChatMessageResource_H_
#define ChatMessageResource_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "Object.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ChatMessageResource
    : public ModelBase
{
public:
    ChatMessageResource();
    virtual ~ChatMessageResource();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ChatMessageResource members

    /// <summary>
    /// The content of the message
    /// </summary>
    std::shared_ptr<Object> getContent() const;
        void setContent(std::shared_ptr<Object> value);
    /// <summary>
    /// The date the chat message was created
    /// </summary>
    int64_t getCreatedDate() const;
    bool createdDateIsSet() const;
    void unsetCreated_date();
    void setCreatedDate(int64_t value);
    /// <summary>
    /// Whether the message has been edited
    /// </summary>
    bool getEdited() const;
    bool editedIsSet() const;
    void unsetEdited();
    void setEdited(bool value);
    /// <summary>
    /// The id for this message
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();
    void setId(utility::string_t value);
    /// <summary>
    /// The type of the message set by the client
    /// </summary>
    utility::string_t getMessageType() const;
        void setMessageType(utility::string_t value);
    /// <summary>
    /// The id of the recipient: user id or topic id
    /// </summary>
    utility::string_t getRecipientId() const;
        void setRecipientId(utility::string_t value);
    /// <summary>
    /// The recipient type of the message
    /// </summary>
    utility::string_t getRecipientType() const;
        void setRecipientType(utility::string_t value);
    /// <summary>
    /// The id of the sender
    /// </summary>
    int32_t getSenderId() const;
    bool senderIdIsSet() const;
    void unsetSender_id();
    void setSenderId(int32_t value);
    /// <summary>
    /// The id of the thread
    /// </summary>
    utility::string_t getThreadId() const;
    bool threadIdIsSet() const;
    void unsetThread_id();
    void setThreadId(utility::string_t value);
    /// <summary>
    /// The date the chat message was updated
    /// </summary>
    int64_t getUpdatedDate() const;
    bool updatedDateIsSet() const;
    void unsetUpdated_date();
    void setUpdatedDate(int64_t value);

protected:
    std::shared_ptr<Object> m_Content;
        int64_t m_Created_date;
    bool m_Created_dateIsSet;
    bool m_Edited;
    bool m_EditedIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Message_type;
        utility::string_t m_Recipient_id;
        utility::string_t m_Recipient_type;
        int32_t m_Sender_id;
    bool m_Sender_idIsSet;
    utility::string_t m_Thread_id;
    bool m_Thread_idIsSet;
    int64_t m_Updated_date;
    bool m_Updated_dateIsSet;
};

}
}
}
}

#endif /* ChatMessageResource_H_ */
