/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "StripePaymentRequest.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

StripePaymentRequest::StripePaymentRequest()
{
    m_Amount = 0.0;
    m_AmountIsSet = false;
    m_Invoice_id = 0;
    m_Token = U("");
}

StripePaymentRequest::~StripePaymentRequest()
{
}

void StripePaymentRequest::validate()
{
    // TODO: implement validation
}

web::json::value StripePaymentRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_AmountIsSet)
    {
        val[U("amount")] = ModelBase::toJson(m_Amount);
    }
    val[U("invoice_id")] = ModelBase::toJson(m_Invoice_id);
    val[U("token")] = ModelBase::toJson(m_Token);

    return val;
}

void StripePaymentRequest::fromJson(web::json::value& val)
{
    if(val.has_field(U("amount")))
    {
        setAmount(ModelBase::doubleFromJson(val[U("amount")]));
    }
    setInvoiceId(ModelBase::int32_tFromJson(val[U("invoice_id")]));
    setToken(ModelBase::stringFromJson(val[U("token")]));
}

void StripePaymentRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_AmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("amount"), m_Amount));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("invoice_id"), m_Invoice_id));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("token"), m_Token));
}

void StripePaymentRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("amount")))
    {
        setAmount(ModelBase::doubleFromHttpContent(multipart->getContent(U("amount"))));
    }
    setInvoiceId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("invoice_id"))));
    setToken(ModelBase::stringFromHttpContent(multipart->getContent(U("token"))));
}

double StripePaymentRequest::getAmount() const
{
    return m_Amount;
}


void StripePaymentRequest::setAmount(double value)
{
    m_Amount = value;
    m_AmountIsSet = true;
}
bool StripePaymentRequest::amountIsSet() const
{
    return m_AmountIsSet;
}

void StripePaymentRequest::unsetAmount()
{
    m_AmountIsSet = false;
}

int32_t StripePaymentRequest::getInvoiceId() const
{
    return m_Invoice_id;
}


void StripePaymentRequest::setInvoiceId(int32_t value)
{
    m_Invoice_id = value;
    
}
utility::string_t StripePaymentRequest::getToken() const
{
    return m_Token;
}


void StripePaymentRequest::setToken(utility::string_t value)
{
    m_Token = value;
    
}
}
}
}
}

