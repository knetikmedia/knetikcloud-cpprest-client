/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * The definition of an activity parameters: ex: difficulty level.h
 *
 * 
 */

#ifndef The definition of an activity parameters: ex: difficulty level_H_
#define The definition of an activity parameters: ex: difficulty level_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "SettingOption.h"
#include <vector>

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  The definition of an activity parameters: ex: difficulty level
    : public ModelBase
{
public:
    The definition of an activity parameters: ex: difficulty level();
    virtual ~The definition of an activity parameters: ex: difficulty level();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// The definition of an activity parameters: ex: difficulty level members

    /// <summary>
    /// Whether the setting is advanced. Default: false
    /// </summary>
    bool getAdvancedOption() const;
    void setAdvancedOption(bool value);
    bool advanced_optionIsSet() const;
    void unsetAdvanced_option();
    /// <summary>
    /// The default value of the setting (must be in options array). Ex: easy
    /// </summary>
    utility::string_t getDefaultValue() const;
    void setDefaultValue(utility::string_t value);
        /// <summary>
    /// The description of the setting: Ex: Choose the difficulty level to show more or less complicated questions (for a trivia activity)
    /// </summary>
    utility::string_t getDescription() const;
    void setDescription(utility::string_t value);
    bool descriptionIsSet() const;
    void unsetDescription();
    /// <summary>
    /// The unique ID for the setting: Ex: difficulty
    /// </summary>
    utility::string_t getKey() const;
    void setKey(utility::string_t value);
        /// <summary>
    /// The textual name of the setting: Ex: Difficulty Level
    /// </summary>
    utility::string_t getName() const;
    void setName(utility::string_t value);
        /// <summary>
    /// The set of options available for this setting, Ex: easy, medium, hard
    /// </summary>
    std::vector<std::shared_ptr<SettingOption>>& getOptions();
    
protected:
    bool m_Advanced_option;
    bool m_Advanced_optionIsSet;
utility::string_t m_Default_value;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
utility::string_t m_Key;
    utility::string_t m_Name;
    std::vector<std::shared_ptr<SettingOption>> m_Options;
    };

}
}
}
}

#endif /* The definition of an activity parameters: ex: difficulty level_H_ */
