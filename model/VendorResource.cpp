/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "VendorResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

VendorResource::VendorResource()
{
    m_Active = false;
    m_ActiveIsSet = false;
    m_Additional_propertiesIsSet = false;
    m_Create_date = 0;
    m_Create_dateIsSet = false;
    m_Description = U("");
    m_DescriptionIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_Image_url = U("");
    m_Image_urlIsSet = false;
    m_Manual_approval = false;
    m_Manual_approvalIsSet = false;
    m_Name = U("");
    m_Primary_contact_email = U("");
    m_Primary_contact_emailIsSet = false;
    m_Primary_contact_name = U("");
    m_Primary_contact_nameIsSet = false;
    m_Primary_contact_phone = U("");
    m_Primary_contact_phoneIsSet = false;
    m_Sales_email = U("");
    m_Sales_emailIsSet = false;
    m_Support_email = U("");
    m_Support_emailIsSet = false;
    m_Template = U("");
    m_TemplateIsSet = false;
    m_Update_date = 0;
    m_Update_dateIsSet = false;
    m_Url = U("");
    m_UrlIsSet = false;
    
}

VendorResource::~VendorResource()
{
}

void VendorResource::validate()
{
    // TODO: implement validation
}

web::json::value VendorResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ActiveIsSet)
    {
        val[U("active")] = ModelBase::toJson(m_Active);
    }
    if(m_Additional_propertiesIsSet)
    {
        val[U("additional_properties")] = ModelBase::toJson(m_Additional_properties);
    }
    if(m_Create_dateIsSet)
    {
        val[U("create_date")] = ModelBase::toJson(m_Create_date);
    }
    if(m_DescriptionIsSet)
    {
        val[U("description")] = ModelBase::toJson(m_Description);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_Image_urlIsSet)
    {
        val[U("image_url")] = ModelBase::toJson(m_Image_url);
    }
    if(m_Manual_approvalIsSet)
    {
        val[U("manual_approval")] = ModelBase::toJson(m_Manual_approval);
    }
    val[U("name")] = ModelBase::toJson(m_Name);
    if(m_Primary_contact_emailIsSet)
    {
        val[U("primary_contact_email")] = ModelBase::toJson(m_Primary_contact_email);
    }
    if(m_Primary_contact_nameIsSet)
    {
        val[U("primary_contact_name")] = ModelBase::toJson(m_Primary_contact_name);
    }
    if(m_Primary_contact_phoneIsSet)
    {
        val[U("primary_contact_phone")] = ModelBase::toJson(m_Primary_contact_phone);
    }
    if(m_Sales_emailIsSet)
    {
        val[U("sales_email")] = ModelBase::toJson(m_Sales_email);
    }
    if(m_Support_emailIsSet)
    {
        val[U("support_email")] = ModelBase::toJson(m_Support_email);
    }
    if(m_TemplateIsSet)
    {
        val[U("template")] = ModelBase::toJson(m_Template);
    }
    if(m_Update_dateIsSet)
    {
        val[U("update_date")] = ModelBase::toJson(m_Update_date);
    }
    if(m_UrlIsSet)
    {
        val[U("url")] = ModelBase::toJson(m_Url);
    }
    

    return val;
}

void VendorResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("active")))
    {
        setActive(ModelBase::boolFromJson(val[U("active")]));
    }
    if(val.has_field(U("additional_properties")))
    {
        if(!val[U("additional_properties")].is_null())
        {
            std::map<utility::string_t, std::shared_ptr<Property>> newItem(std::map<utility::string_t, Property>());
            newItem->fromJson(val[U("additional_properties")]);
            setAdditionalProperties( newItem );
        }
        
    }
    if(val.has_field(U("create_date")))
    {
        setCreateDate(ModelBase::int64_tFromJson(val[U("create_date")]));
    }
    if(val.has_field(U("description")))
    {
        setDescription(ModelBase::stringFromJson(val[U("description")]));
        
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int32_tFromJson(val[U("id")]));
    }
    if(val.has_field(U("image_url")))
    {
        setImageUrl(ModelBase::stringFromJson(val[U("image_url")]));
        
    }
    if(val.has_field(U("manual_approval")))
    {
        setManualApproval(ModelBase::boolFromJson(val[U("manual_approval")]));
    }
    setName(ModelBase::stringFromJson(val[U("name")]));
    if(val.has_field(U("primary_contact_email")))
    {
        setPrimaryContactEmail(ModelBase::stringFromJson(val[U("primary_contact_email")]));
        
    }
    if(val.has_field(U("primary_contact_name")))
    {
        setPrimaryContactName(ModelBase::stringFromJson(val[U("primary_contact_name")]));
        
    }
    if(val.has_field(U("primary_contact_phone")))
    {
        setPrimaryContactPhone(ModelBase::stringFromJson(val[U("primary_contact_phone")]));
        
    }
    if(val.has_field(U("sales_email")))
    {
        setSalesEmail(ModelBase::stringFromJson(val[U("sales_email")]));
        
    }
    if(val.has_field(U("support_email")))
    {
        setSupportEmail(ModelBase::stringFromJson(val[U("support_email")]));
        
    }
    if(val.has_field(U("template")))
    {
        setTemplate(ModelBase::stringFromJson(val[U("template")]));
        
    }
    if(val.has_field(U("update_date")))
    {
        setUpdateDate(ModelBase::int64_tFromJson(val[U("update_date")]));
    }
    if(val.has_field(U("url")))
    {
        setUrl(ModelBase::stringFromJson(val[U("url")]));
        
    }
    
}

void VendorResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_ActiveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("active"), m_Active));
    }
    if(m_Additional_propertiesIsSet)
    {
        if (m_Additional_properties.get())
        {
            m_Additional_properties->toMultipart(multipart, U("additional_properties."));
        }
        
    }
    if(m_Create_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("create_date"), m_Create_date));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("description"), m_Description));
        
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    if(m_Image_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("image_url"), m_Image_url));
        
    }
    if(m_Manual_approvalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("manual_approval"), m_Manual_approval));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    if(m_Primary_contact_emailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("primary_contact_email"), m_Primary_contact_email));
        
    }
    if(m_Primary_contact_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("primary_contact_name"), m_Primary_contact_name));
        
    }
    if(m_Primary_contact_phoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("primary_contact_phone"), m_Primary_contact_phone));
        
    }
    if(m_Sales_emailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("sales_email"), m_Sales_email));
        
    }
    if(m_Support_emailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("support_email"), m_Support_email));
        
    }
    if(m_TemplateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("template"), m_Template));
        
    }
    if(m_Update_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("update_date"), m_Update_date));
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("url"), m_Url));
        
    }
    
}

void VendorResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("active")))
    {
        setActive(ModelBase::boolFromHttpContent(multipart->getContent(U("active"))));
    }
    if(multipart->hasContent(U("additional_properties")))
    {
        if(multipart->hasContent(U("additional_properties")))
        {
            std::map<utility::string_t, std::shared_ptr<Property>> newItem(std::map<utility::string_t, Property>());
            newItem->fromMultiPart(multipart, U("additional_properties."));
            setAdditionalProperties( newItem );
        }
        
    }
    if(multipart->hasContent(U("create_date")))
    {
        setCreateDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("create_date"))));
    }
    if(multipart->hasContent(U("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("description"))));
        
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("image_url")))
    {
        setImageUrl(ModelBase::stringFromHttpContent(multipart->getContent(U("image_url"))));
        
    }
    if(multipart->hasContent(U("manual_approval")))
    {
        setManualApproval(ModelBase::boolFromHttpContent(multipart->getContent(U("manual_approval"))));
    }
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    if(multipart->hasContent(U("primary_contact_email")))
    {
        setPrimaryContactEmail(ModelBase::stringFromHttpContent(multipart->getContent(U("primary_contact_email"))));
        
    }
    if(multipart->hasContent(U("primary_contact_name")))
    {
        setPrimaryContactName(ModelBase::stringFromHttpContent(multipart->getContent(U("primary_contact_name"))));
        
    }
    if(multipart->hasContent(U("primary_contact_phone")))
    {
        setPrimaryContactPhone(ModelBase::stringFromHttpContent(multipart->getContent(U("primary_contact_phone"))));
        
    }
    if(multipart->hasContent(U("sales_email")))
    {
        setSalesEmail(ModelBase::stringFromHttpContent(multipart->getContent(U("sales_email"))));
        
    }
    if(multipart->hasContent(U("support_email")))
    {
        setSupportEmail(ModelBase::stringFromHttpContent(multipart->getContent(U("support_email"))));
        
    }
    if(multipart->hasContent(U("template")))
    {
        setTemplate(ModelBase::stringFromHttpContent(multipart->getContent(U("template"))));
        
    }
    if(multipart->hasContent(U("update_date")))
    {
        setUpdateDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("update_date"))));
    }
    if(multipart->hasContent(U("url")))
    {
        setUrl(ModelBase::stringFromHttpContent(multipart->getContent(U("url"))));
        
    }
    
}


bool VendorResource::getActive() const
{
    return m_Active;
}
void VendorResource::setActive(bool value)
{
    m_Active = value;
    m_ActiveIsSet = true;
}
bool VendorResource::activeIsSet() const
{
    return m_ActiveIsSet;
}
void VendorResource::unsetActive()
{
    m_ActiveIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<Property>>& VendorResource::getAdditionalProperties()
{
    return m_Additional_properties;
}
bool VendorResource::additional_propertiesIsSet() const
{
    return m_Additional_propertiesIsSet;
}
void VendorResource::unsetAdditional_properties()
{
    m_Additional_propertiesIsSet = false;
}
int64_t VendorResource::getCreateDate() const
{
    return m_Create_date;
}
void VendorResource::setCreateDate(int64_t value)
{
    m_Create_date = value;
    m_Create_dateIsSet = true;
}
bool VendorResource::create_dateIsSet() const
{
    return m_Create_dateIsSet;
}
void VendorResource::unsetCreate_date()
{
    m_Create_dateIsSet = false;
}
utility::string_t VendorResource::getDescription() const
{
    return m_Description;
}
void VendorResource::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool VendorResource::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void VendorResource::unsetDescription()
{
    m_DescriptionIsSet = false;
}
int32_t VendorResource::getId() const
{
    return m_Id;
}
void VendorResource::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool VendorResource::idIsSet() const
{
    return m_IdIsSet;
}
void VendorResource::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t VendorResource::getImageUrl() const
{
    return m_Image_url;
}
void VendorResource::setImageUrl(utility::string_t value)
{
    m_Image_url = value;
    m_Image_urlIsSet = true;
}
bool VendorResource::image_urlIsSet() const
{
    return m_Image_urlIsSet;
}
void VendorResource::unsetImage_url()
{
    m_Image_urlIsSet = false;
}
bool VendorResource::getManualApproval() const
{
    return m_Manual_approval;
}
void VendorResource::setManualApproval(bool value)
{
    m_Manual_approval = value;
    m_Manual_approvalIsSet = true;
}
bool VendorResource::manual_approvalIsSet() const
{
    return m_Manual_approvalIsSet;
}
void VendorResource::unsetManual_approval()
{
    m_Manual_approvalIsSet = false;
}
utility::string_t VendorResource::getName() const
{
    return m_Name;
}
void VendorResource::setName(utility::string_t value)
{
    m_Name = value;
    
}
utility::string_t VendorResource::getPrimaryContactEmail() const
{
    return m_Primary_contact_email;
}
void VendorResource::setPrimaryContactEmail(utility::string_t value)
{
    m_Primary_contact_email = value;
    m_Primary_contact_emailIsSet = true;
}
bool VendorResource::primary_contact_emailIsSet() const
{
    return m_Primary_contact_emailIsSet;
}
void VendorResource::unsetPrimary_contact_email()
{
    m_Primary_contact_emailIsSet = false;
}
utility::string_t VendorResource::getPrimaryContactName() const
{
    return m_Primary_contact_name;
}
void VendorResource::setPrimaryContactName(utility::string_t value)
{
    m_Primary_contact_name = value;
    m_Primary_contact_nameIsSet = true;
}
bool VendorResource::primary_contact_nameIsSet() const
{
    return m_Primary_contact_nameIsSet;
}
void VendorResource::unsetPrimary_contact_name()
{
    m_Primary_contact_nameIsSet = false;
}
utility::string_t VendorResource::getPrimaryContactPhone() const
{
    return m_Primary_contact_phone;
}
void VendorResource::setPrimaryContactPhone(utility::string_t value)
{
    m_Primary_contact_phone = value;
    m_Primary_contact_phoneIsSet = true;
}
bool VendorResource::primary_contact_phoneIsSet() const
{
    return m_Primary_contact_phoneIsSet;
}
void VendorResource::unsetPrimary_contact_phone()
{
    m_Primary_contact_phoneIsSet = false;
}
utility::string_t VendorResource::getSalesEmail() const
{
    return m_Sales_email;
}
void VendorResource::setSalesEmail(utility::string_t value)
{
    m_Sales_email = value;
    m_Sales_emailIsSet = true;
}
bool VendorResource::sales_emailIsSet() const
{
    return m_Sales_emailIsSet;
}
void VendorResource::unsetSales_email()
{
    m_Sales_emailIsSet = false;
}
utility::string_t VendorResource::getSupportEmail() const
{
    return m_Support_email;
}
void VendorResource::setSupportEmail(utility::string_t value)
{
    m_Support_email = value;
    m_Support_emailIsSet = true;
}
bool VendorResource::support_emailIsSet() const
{
    return m_Support_emailIsSet;
}
void VendorResource::unsetSupport_email()
{
    m_Support_emailIsSet = false;
}
utility::string_t VendorResource::getTemplate() const
{
    return m_Template;
}
void VendorResource::setTemplate(utility::string_t value)
{
    m_Template = value;
    m_TemplateIsSet = true;
}
bool VendorResource::templateIsSet() const
{
    return m_TemplateIsSet;
}
void VendorResource::unsetTemplate()
{
    m_TemplateIsSet = false;
}
int64_t VendorResource::getUpdateDate() const
{
    return m_Update_date;
}
void VendorResource::setUpdateDate(int64_t value)
{
    m_Update_date = value;
    m_Update_dateIsSet = true;
}
bool VendorResource::update_dateIsSet() const
{
    return m_Update_dateIsSet;
}
void VendorResource::unsetUpdate_date()
{
    m_Update_dateIsSet = false;
}
utility::string_t VendorResource::getUrl() const
{
    return m_Url;
}
void VendorResource::setUrl(utility::string_t value)
{
    m_Url = value;
    m_UrlIsSet = true;
}
bool VendorResource::urlIsSet() const
{
    return m_UrlIsSet;
}
void VendorResource::unsetUrl()
{
    m_UrlIsSet = false;
}

}
}
}
}

