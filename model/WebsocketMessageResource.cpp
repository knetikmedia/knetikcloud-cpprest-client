/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "WebsocketMessageResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

WebsocketMessageResource::WebsocketMessageResource()
{
    m_Message_type = U("");
    m_Message_typeIsSet = false;
}

WebsocketMessageResource::~WebsocketMessageResource()
{
}

void WebsocketMessageResource::validate()
{
    // TODO: implement validation
}

web::json::value WebsocketMessageResource::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("content")] = ModelBase::toJson(m_Content);
    if(m_Message_typeIsSet)
    {
        val[U("message_type")] = ModelBase::toJson(m_Message_type);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Recipients )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[U("recipients")] = web::json::value::array(jsonArray);
    }

    return val;
}

void WebsocketMessageResource::fromJson(web::json::value& val)
{
    std::shared_ptr<Object> newContent(nullptr);
    newContent->fromJson(val[U("content")]);
    setContent( newContent );
    if(val.has_field(U("message_type")))
    {
        setMessageType(ModelBase::stringFromJson(val[U("message_type")]));
    }
    {
        m_Recipients.clear();
        std::vector<web::json::value> jsonArray;
        for( auto& item : val[U("recipients")].as_array() )
        {
            m_Recipients.push_back(ModelBase::int32_tFromJson(item));
        }
    }
}

void WebsocketMessageResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    m_Content->toMultipart(multipart, U("content."));
    if(m_Message_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("message_type"), m_Message_type));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Recipients )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + U("recipients"), web::json::value::array(jsonArray), U("application/json")));
            }
}

void WebsocketMessageResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    std::shared_ptr<Object> newContent(nullptr);
    newContent->fromMultiPart(multipart, U("content."));
    setContent( newContent );
    if(multipart->hasContent(U("message_type")))
    {
        setMessageType(ModelBase::stringFromHttpContent(multipart->getContent(U("message_type"))));
    }
    {
        m_Recipients.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("recipients"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Recipients.push_back(ModelBase::int32_tFromJson(item));
        }
    }
}

std::shared_ptr<Object> WebsocketMessageResource::getContent() const
{
    return m_Content;
}


void WebsocketMessageResource::setContent(std::shared_ptr<Object> value)
{
    m_Content = value;
    
}
utility::string_t WebsocketMessageResource::getMessageType() const
{
    return m_Message_type;
}


void WebsocketMessageResource::setMessageType(utility::string_t value)
{
    m_Message_type = value;
    m_Message_typeIsSet = true;
}
bool WebsocketMessageResource::messageTypeIsSet() const
{
    return m_Message_typeIsSet;
}

void WebsocketMessageResource::unsetMessage_type()
{
    m_Message_typeIsSet = false;
}

std::vector<int32_t>& WebsocketMessageResource::getRecipients()
{
    return m_Recipients;
}

void WebsocketMessageResource::setRecipients(std::vector<int32_t> value)
{
    m_Recipients = value;
    
}
}
}
}
}

