/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "TemplateSMSResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

TemplateSMSResource::TemplateSMSResource()
{
    m_From = U("");
    m_FromIsSet = false;
    m_Template = U("");
    m_Template_varsIsSet = false;
}

TemplateSMSResource::~TemplateSMSResource()
{
}

void TemplateSMSResource::validate()
{
    // TODO: implement validation
}

web::json::value TemplateSMSResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_FromIsSet)
    {
        val[U("from")] = ModelBase::toJson(m_From);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Recipients )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[U("recipients")] = web::json::value::array(jsonArray);
    }
    val[U("template")] = ModelBase::toJson(m_Template);
    if(m_Template_varsIsSet)
    {
        val[U("template_vars")] = ModelBase::toJson(m_Template_vars);
    }

    return val;
}

void TemplateSMSResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("from")))
    {
        setFrom(ModelBase::stringFromJson(val[U("from")]));
    }
    {
        m_Recipients.clear();
        std::vector<web::json::value> jsonArray;
        for( auto& item : val[U("recipients")].as_array() )
        {
            m_Recipients.push_back(ModelBase::int32_tFromJson(item));
        }
    }
    setTemplate(ModelBase::stringFromJson(val[U("template")]));
    if(val.has_field(U("template_vars")))
    {
        if(!val[U("template_vars")].is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(val[U("template_vars")]);
            setTemplateVars( newItem );
        }
    }
}

void TemplateSMSResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_FromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("from"), m_From));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Recipients )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + U("recipients"), web::json::value::array(jsonArray), U("application/json")));
            }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("template"), m_Template));
    if(m_Template_varsIsSet)
    {
        if (m_Template_vars.get())
        {
            m_Template_vars->toMultipart(multipart, U("template_vars."));
        }
        
    }
}

void TemplateSMSResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("from")))
    {
        setFrom(ModelBase::stringFromHttpContent(multipart->getContent(U("from"))));
    }
    {
        m_Recipients.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("recipients"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Recipients.push_back(ModelBase::int32_tFromJson(item));
        }
    }
    setTemplate(ModelBase::stringFromHttpContent(multipart->getContent(U("template"))));
    if(multipart->hasContent(U("template_vars")))
    {
        if(multipart->hasContent(U("template_vars")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, U("template_vars."));
            setTemplateVars( newItem );
        }
    }
}

utility::string_t TemplateSMSResource::getFrom() const
{
    return m_From;
}


void TemplateSMSResource::setFrom(utility::string_t value)
{
    m_From = value;
    m_FromIsSet = true;
}
bool TemplateSMSResource::fromIsSet() const
{
    return m_FromIsSet;
}

void TemplateSMSResource::unsetFrom()
{
    m_FromIsSet = false;
}

std::vector<int32_t>& TemplateSMSResource::getRecipients()
{
    return m_Recipients;
}

void TemplateSMSResource::setRecipients(std::vector<int32_t> value)
{
    m_Recipients = value;
    
}
utility::string_t TemplateSMSResource::getTemplate() const
{
    return m_Template;
}


void TemplateSMSResource::setTemplate(utility::string_t value)
{
    m_Template = value;
    
}
std::shared_ptr<Object> TemplateSMSResource::getTemplateVars() const
{
    return m_Template_vars;
}


void TemplateSMSResource::setTemplateVars(std::shared_ptr<Object> value)
{
    m_Template_vars = value;
    m_Template_varsIsSet = true;
}
bool TemplateSMSResource::templateVarsIsSet() const
{
    return m_Template_varsIsSet;
}

void TemplateSMSResource::unsetTemplate_vars()
{
    m_Template_varsIsSet = false;
}

}
}
}
}

