/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "GroupMember.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

GroupMember::GroupMember()
{
    m_GroupIsSet = false;
    m_Secondary = false;
    m_SecondaryIsSet = false;
    m_Status = U("");
    m_StatusIsSet = false;
    m_UserIsSet = false;
    
}

GroupMember::~GroupMember()
{
}

void GroupMember::validate()
{
    // TODO: implement validation
}

web::json::value GroupMember::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_GroupIsSet)
    {
        val[U("group")] = ModelBase::toJson(m_Group);
    }
    if(m_SecondaryIsSet)
    {
        val[U("secondary")] = ModelBase::toJson(m_Secondary);
    }
    if(m_StatusIsSet)
    {
        val[U("status")] = ModelBase::toJson(m_Status);
    }
    if(m_UserIsSet)
    {
        val[U("user")] = ModelBase::toJson(m_User);
    }
    

    return val;
}

void GroupMember::fromJson(web::json::value& val)
{
    if(val.has_field(U("group")))
    {
        if(!val[U("group")].is_null())
        {
            std::shared_ptr<Group> newItem(new Group());
            newItem->fromJson(val[U("group")]);
            setGroup( newItem );
        }
        
    }
    if(val.has_field(U("secondary")))
    {
        setSecondary(ModelBase::boolFromJson(val[U("secondary")]));
    }
    if(val.has_field(U("status")))
    {
        setStatus(ModelBase::stringFromJson(val[U("status")]));
        
    }
    if(val.has_field(U("user")))
    {
        if(!val[U("user")].is_null())
        {
            std::shared_ptr<User> newItem(new User());
            newItem->fromJson(val[U("user")]);
            setUser( newItem );
        }
        
    }
    
}

void GroupMember::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_GroupIsSet)
    {
        if (m_Group.get())
        {
            m_Group->toMultipart(multipart, U("group."));
        }
        
    }
    if(m_SecondaryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("secondary"), m_Secondary));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("status"), m_Status));
        
    }
    if(m_UserIsSet)
    {
        if (m_User.get())
        {
            m_User->toMultipart(multipart, U("user."));
        }
        
    }
    
}

void GroupMember::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("group")))
    {
        if(multipart->hasContent(U("group")))
        {
            std::shared_ptr<Group> newItem(new Group());
            newItem->fromMultiPart(multipart, U("group."));
            setGroup( newItem );
        }
        
    }
    if(multipart->hasContent(U("secondary")))
    {
        setSecondary(ModelBase::boolFromHttpContent(multipart->getContent(U("secondary"))));
    }
    if(multipart->hasContent(U("status")))
    {
        setStatus(ModelBase::stringFromHttpContent(multipart->getContent(U("status"))));
        
    }
    if(multipart->hasContent(U("user")))
    {
        if(multipart->hasContent(U("user")))
        {
            std::shared_ptr<User> newItem(new User());
            newItem->fromMultiPart(multipart, U("user."));
            setUser( newItem );
        }
        
    }
    
}


std::shared_ptr<Group> GroupMember::getGroup() const
{
    return m_Group;
}
void GroupMember::setGroup(std::shared_ptr<Group> value)
{
    m_Group = value;
    m_GroupIsSet = true;
}
bool GroupMember::groupIsSet() const
{
    return m_GroupIsSet;
}
void GroupMember::unsetGroup()
{
    m_GroupIsSet = false;
}
bool GroupMember::getSecondary() const
{
    return m_Secondary;
}
void GroupMember::setSecondary(bool value)
{
    m_Secondary = value;
    m_SecondaryIsSet = true;
}
bool GroupMember::secondaryIsSet() const
{
    return m_SecondaryIsSet;
}
void GroupMember::unsetSecondary()
{
    m_SecondaryIsSet = false;
}
utility::string_t GroupMember::getStatus() const
{
    return m_Status;
}
void GroupMember::setStatus(utility::string_t value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool GroupMember::statusIsSet() const
{
    return m_StatusIsSet;
}
void GroupMember::unsetStatus()
{
    m_StatusIsSet = false;
}
std::shared_ptr<User> GroupMember::getUser() const
{
    return m_User;
}
void GroupMember::setUser(std::shared_ptr<User> value)
{
    m_User = value;
    m_UserIsSet = true;
}
bool GroupMember::userIsSet() const
{
    return m_UserIsSet;
}
void GroupMember::unsetUser()
{
    m_UserIsSet = false;
}

}
}
}
}

