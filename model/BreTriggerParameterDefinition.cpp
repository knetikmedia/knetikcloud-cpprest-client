/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BreTriggerParameterDefinition.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

BreTriggerParameterDefinition::BreTriggerParameterDefinition()
{
    m_Name = U("");
    m_Optional = false;
    m_OptionalIsSet = false;
    m_Type = U("");
}

BreTriggerParameterDefinition::~BreTriggerParameterDefinition()
{
}

void BreTriggerParameterDefinition::validate()
{
    // TODO: implement validation
}

web::json::value BreTriggerParameterDefinition::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("name")] = ModelBase::toJson(m_Name);
    if(m_OptionalIsSet)
    {
        val[U("optional")] = ModelBase::toJson(m_Optional);
    }
    val[U("type")] = ModelBase::toJson(m_Type);

    return val;
}

void BreTriggerParameterDefinition::fromJson(web::json::value& val)
{
    setName(ModelBase::stringFromJson(val[U("name")]));
    if(val.has_field(U("optional")))
    {
        setOptional(ModelBase::boolFromJson(val[U("optional")]));
    }
    setType(ModelBase::stringFromJson(val[U("type")]));
}

void BreTriggerParameterDefinition::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    if(m_OptionalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("optional"), m_Optional));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("type"), m_Type));
}

void BreTriggerParameterDefinition::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    if(multipart->hasContent(U("optional")))
    {
        setOptional(ModelBase::boolFromHttpContent(multipart->getContent(U("optional"))));
    }
    setType(ModelBase::stringFromHttpContent(multipart->getContent(U("type"))));
}

utility::string_t BreTriggerParameterDefinition::getName() const
{
    return m_Name;
}


void BreTriggerParameterDefinition::setName(utility::string_t value)
{
    m_Name = value;
    
}
bool BreTriggerParameterDefinition::getOptional() const
{
    return m_Optional;
}


void BreTriggerParameterDefinition::setOptional(bool value)
{
    m_Optional = value;
    m_OptionalIsSet = true;
}
bool BreTriggerParameterDefinition::optionalIsSet() const
{
    return m_OptionalIsSet;
}

void BreTriggerParameterDefinition::unsetOptional()
{
    m_OptionalIsSet = false;
}

utility::string_t BreTriggerParameterDefinition::getType() const
{
    return m_Type;
}


void BreTriggerParameterDefinition::setType(utility::string_t value)
{
    m_Type = value;
    
}
}
}
}
}

