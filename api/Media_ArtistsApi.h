/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Media_ArtistsApi.h
 *
 * 
 */

#ifndef Media_ArtistsApi_H_
#define Media_ArtistsApi_H_


#include "ApiClient.h"

#include "ArtistResource.h"
#include "PageResource«ArtistResource».h"
#include "PageResource«TemplateResource».h"
#include "Result.h"
#include "TemplateResource.h"
#include <cpprest/details/basic_types.h>

namespace com {
namespace knetikcloud {
namespace client {
namespace api {

using namespace com::knetikcloud::client::model;

class  Media_ArtistsApi
{
public:
    Media_ArtistsApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~Media_ArtistsApi();
    /// <summary>
    /// Adds a new artist in the system
    /// </summary>
    /// <remarks>
    /// Adds a new artist in the system. Use specific media contributions endpoint to add contributions. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
    /// </remarks>
    /// <param name="artistResource">The new artist (optional)</param>
    pplx::task<std::shared_ptr<ArtistResource>> addArtist(std::shared_ptr<ArtistResource> artistResource);
    /// <summary>
    /// Create an artist template
    /// </summary>
    /// <remarks>
    /// Artist Templates define a type of artist and the properties they have. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
    /// </remarks>
    /// <param name="artistTemplateResource">The artist template resource object (optional)</param>
    pplx::task<std::shared_ptr<TemplateResource>> createArtistTemplate(std::shared_ptr<TemplateResource> artistTemplateResource);
    /// <summary>
    /// Removes an artist from the system IF no resources are attached to it
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; ARTISTS_ADMIN
    /// </remarks>
    /// <param name="id">The artist id</param>
    pplx::task<void> deleteArtist(int64_t id);
    /// <summary>
    /// Delete an artist template
    /// </summary>
    /// <remarks>
    /// If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects. &lt;br&gt;&lt;br&gt;&lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
    /// </remarks>
    /// <param name="id">The id of the template</param>/// <param name="cascade">The value needed to delete used templates (optional)</param>
    pplx::task<void> deleteArtistTemplate(utility::string_t id, utility::string_t cascade);
    /// <summary>
    /// Loads a specific artist details
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
    /// </remarks>
    /// <param name="id">The artist id</param>/// <param name="showContributions">The number of contributions to show fetch (optional)</param>
    pplx::task<std::shared_ptr<ArtistResource>> getArtist(int64_t id, int32_t showContributions);
    /// <summary>
    /// Get a single artist template
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or ARTISTS_ADMIN
    /// </remarks>
    /// <param name="id">The id of the template</param>
    pplx::task<std::shared_ptr<TemplateResource>> getArtistTemplate(utility::string_t id);
    /// <summary>
    /// List and search artist templates
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN or ARTISTS_ADMIN
    /// </remarks>
    /// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
    pplx::task<std::shared_ptr<PageResource«TemplateResource»>> getArtistTemplates(int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// Search for artists
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
    /// </remarks>
    /// <param name="filterArtistsByName">Filter for artists which name *STARTS* with the given string (optional)</param>/// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
    pplx::task<std::shared_ptr<PageResource«ArtistResource»>> getArtists(utility::string_t filterArtistsByName, int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// Modifies an artist details
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; ARTISTS_ADMIN
    /// </remarks>
    /// <param name="id">The artist id</param>/// <param name="artistResource">The new artist (optional)</param>
    pplx::task<void> updateArtist(int64_t id, std::shared_ptr<ArtistResource> artistResource);
    /// <summary>
    /// Update an artist template
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; TEMPLATE_ADMIN
    /// </remarks>
    /// <param name="id">The id of the template</param>/// <param name="artistTemplateResource">The artist template resource object (optional)</param>
    pplx::task<std::shared_ptr<TemplateResource>> updateArtistTemplate(utility::string_t id, std::shared_ptr<TemplateResource> artistTemplateResource);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* Media_ArtistsApi_H_ */

