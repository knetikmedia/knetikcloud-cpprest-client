/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * PaymentMethodResource.h
 *
 * 
 */

#ifndef PaymentMethodResource_H_
#define PaymentMethodResource_H_


#include "ModelBase.h"

#include "PaymentMethodTypeResource.h"
#include <cpprest/details/basic_types.h>

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  PaymentMethodResource
    : public ModelBase
{
public:
    PaymentMethodResource();
    virtual ~PaymentMethodResource();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PaymentMethodResource members

    /// <summary>
    /// The date/time this resource was created in seconds since unix epoch
    /// </summary>
    int64_t getCreatedDate() const;
    bool createdDateIsSet() const;
    void unsetCreated_date();
    void setCreatedDate(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    bool getDefault() const;
    bool defaultIsSet() const;
    void unsetDefault();
    void setDefault(bool value);
    /// <summary>
    /// Whether this payment method is disabled or not
    /// </summary>
    bool getDisabled() const;
    bool disabledIsSet() const;
    void unsetDisabled();
    void setDisabled(bool value);
    /// <summary>
    /// The expiration date for the payment method, expressed as seconds since epoch. Typically used for credit card payment methods
    /// </summary>
    int64_t getExpirationDate() const;
    bool expirationDateIsSet() const;
    void unsetExpiration_date();
    void setExpirationDate(int64_t value);
    /// <summary>
    /// The expiration month (1 - 12) for the payment method. Typically used for credit card payment methods
    /// </summary>
    int32_t getExpirationMonth() const;
    bool expirationMonthIsSet() const;
    void unsetExpiration_month();
    void setExpirationMonth(int32_t value);
    /// <summary>
    /// The expiration year for the payment method. Typically used for credit card payment methods
    /// </summary>
    int32_t getExpirationYear() const;
    bool expirationYearIsSet() const;
    void unsetExpiration_year();
    void setExpirationYear(int32_t value);
    /// <summary>
    /// The unique ID of the resource
    /// </summary>
    int64_t getId() const;
    bool idIsSet() const;
    void unsetId();
    void setId(int64_t value);
    /// <summary>
    /// The last 4 digits of the account number for the payment method. Typically used for credit card payment methods
    /// </summary>
    utility::string_t getLast4() const;
    bool last4IsSet() const;
    void unsetLast4();
    void setLast4(utility::string_t value);
    /// <summary>
    /// The user friendly name of the resource
    /// </summary>
    utility::string_t getName() const;
        void setName(utility::string_t value);
    /// <summary>
    /// The type of payment method. Must be a pre-existing value
    /// </summary>
    std::shared_ptr<PaymentMethodTypeResource> getPaymentMethodType() const;
        void setPaymentMethodType(std::shared_ptr<PaymentMethodTypeResource> value);
    /// <summary>
    /// The generic payment type. Default is card
    /// </summary>
    utility::string_t getPaymentType() const;
    bool paymentTypeIsSet() const;
    void unsetPayment_type();
    void setPaymentType(utility::string_t value);
    /// <summary>
    /// The sort value for the payment method
    /// </summary>
    int32_t getSort() const;
    bool sortIsSet() const;
    void unsetSort();
    void setSort(int32_t value);
    /// <summary>
    /// The unique token for the payment method
    /// </summary>
    utility::string_t getToken() const;
    bool tokenIsSet() const;
    void unsetToken();
    void setToken(utility::string_t value);
    /// <summary>
    /// An optional unique identifier
    /// </summary>
    utility::string_t getUniqueKey() const;
    bool uniqueKeyIsSet() const;
    void unsetUnique_key();
    void setUniqueKey(utility::string_t value);
    /// <summary>
    /// The date/time this resource was last updated in seconds since unix epoch
    /// </summary>
    int64_t getUpdatedDate() const;
    bool updatedDateIsSet() const;
    void unsetUpdated_date();
    void setUpdatedDate(int64_t value);
    /// <summary>
    /// The user&#39;s id. If null, indicates a shared payment method that any user can use (i.e., &#39;wallet&#39;)
    /// </summary>
    int32_t getUserId() const;
    bool userIdIsSet() const;
    void unsetUser_id();
    void setUserId(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    bool getVerified() const;
    bool verifiedIsSet() const;
    void unsetVerified();
    void setVerified(bool value);

protected:
    int64_t m_Created_date;
    bool m_Created_dateIsSet;
    bool m_Default;
    bool m_DefaultIsSet;
    bool m_Disabled;
    bool m_DisabledIsSet;
    int64_t m_Expiration_date;
    bool m_Expiration_dateIsSet;
    int32_t m_Expiration_month;
    bool m_Expiration_monthIsSet;
    int32_t m_Expiration_year;
    bool m_Expiration_yearIsSet;
    int64_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Last4;
    bool m_Last4IsSet;
    utility::string_t m_Name;
        std::shared_ptr<PaymentMethodTypeResource> m_Payment_method_type;
        utility::string_t m_Payment_type;
    bool m_Payment_typeIsSet;
    int32_t m_Sort;
    bool m_SortIsSet;
    utility::string_t m_Token;
    bool m_TokenIsSet;
    utility::string_t m_Unique_key;
    bool m_Unique_keyIsSet;
    int64_t m_Updated_date;
    bool m_Updated_dateIsSet;
    int32_t m_User_id;
    bool m_User_idIsSet;
    bool m_Verified;
    bool m_VerifiedIsSet;
};

}
}
}
}

#endif /* PaymentMethodResource_H_ */
