/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "DeviceResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

DeviceResource::DeviceResource()
{
    m_Additional_propertiesIsSet = false;
    m_Created_date = 0L;
    m_Created_dateIsSet = false;
    m_Description = U("");
    m_DescriptionIsSet = false;
    m_Device_type = U("");
    m_Device_typeIsSet = false;
    m_Id = U("");
    m_IdIsSet = false;
    m_Location = U("");
    m_LocationIsSet = false;
    m_Mac_address = U("");
    m_Mac_addressIsSet = false;
    m_Make = U("");
    m_MakeIsSet = false;
    m_Model = U("");
    m_ModelIsSet = false;
    m_Name = U("");
    m_NameIsSet = false;
    m_Os = U("");
    m_OsIsSet = false;
    m_OwnerIsSet = false;
    m_Serial = U("");
    m_SerialIsSet = false;
    m_TagsIsSet = false;
    m_Template = U("");
    m_TemplateIsSet = false;
    m_Updated_date = 0L;
    m_Updated_dateIsSet = false;
    m_UsersIsSet = false;
}

DeviceResource::~DeviceResource()
{
}

void DeviceResource::validate()
{
    // TODO: implement validation
}

web::json::value DeviceResource::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Additional_properties )
        {
            web::json::value tmp = web::json::value::object();
            tmp[U("key")] = ModelBase::toJson(item.first);
            tmp[U("value")] = ModelBase::toJson(item.second);
            jsonArray.push_back(tmp);
        }
        if(jsonArray.size() > 0)
        {
            val[U("additional_properties")] = web::json::value::array(jsonArray);
        }
    }
    if(m_Created_dateIsSet)
    {
        val[U("created_date")] = ModelBase::toJson(m_Created_date);
    }
    if(m_DescriptionIsSet)
    {
        val[U("description")] = ModelBase::toJson(m_Description);
    }
    if(m_Device_typeIsSet)
    {
        val[U("device_type")] = ModelBase::toJson(m_Device_type);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_LocationIsSet)
    {
        val[U("location")] = ModelBase::toJson(m_Location);
    }
    if(m_Mac_addressIsSet)
    {
        val[U("mac_address")] = ModelBase::toJson(m_Mac_address);
    }
    if(m_MakeIsSet)
    {
        val[U("make")] = ModelBase::toJson(m_Make);
    }
    if(m_ModelIsSet)
    {
        val[U("model")] = ModelBase::toJson(m_Model);
    }
    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }
    if(m_OsIsSet)
    {
        val[U("os")] = ModelBase::toJson(m_Os);
    }
    if(m_OwnerIsSet)
    {
        val[U("owner")] = ModelBase::toJson(m_Owner);
    }
    if(m_SerialIsSet)
    {
        val[U("serial")] = ModelBase::toJson(m_Serial);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("tags")] = web::json::value::array(jsonArray);
        }
    }
    if(m_TemplateIsSet)
    {
        val[U("template")] = ModelBase::toJson(m_Template);
    }
    if(m_Updated_dateIsSet)
    {
        val[U("updated_date")] = ModelBase::toJson(m_Updated_date);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Users )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("users")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void DeviceResource::fromJson(web::json::value& val)
{
    {
        m_Additional_properties.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("additional_properties")))
        {
        for( auto& item : val[U("additional_properties")].as_array() )
        {  
            utility::string_t key;
            if(item.has_field(U("key")))
            {
                key = ModelBase::stringFromJson(item[U("key")]);
            }
            if(item.is_null())
            {
                m_Additional_properties.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, std::shared_ptr<Property>(nullptr) ));
            }
            else
            {
                std::shared_ptr<Property> newItem(new Property());
                newItem->fromJson(item[U("value")]);
                m_Additional_properties.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, newItem ));
            }
        }
        }
    }
    if(val.has_field(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromJson(val[U("created_date")]));
    }
    if(val.has_field(U("description")))
    {
        setDescription(ModelBase::stringFromJson(val[U("description")]));
    }
    if(val.has_field(U("device_type")))
    {
        setDeviceType(ModelBase::stringFromJson(val[U("device_type")]));
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::stringFromJson(val[U("id")]));
    }
    if(val.has_field(U("location")))
    {
        setLocation(ModelBase::stringFromJson(val[U("location")]));
    }
    if(val.has_field(U("mac_address")))
    {
        setMacAddress(ModelBase::stringFromJson(val[U("mac_address")]));
    }
    if(val.has_field(U("make")))
    {
        setMake(ModelBase::stringFromJson(val[U("make")]));
    }
    if(val.has_field(U("model")))
    {
        setModel(ModelBase::stringFromJson(val[U("model")]));
    }
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
    }
    if(val.has_field(U("os")))
    {
        setOs(ModelBase::stringFromJson(val[U("os")]));
    }
    if(val.has_field(U("owner")))
    {
        if(!val[U("owner")].is_null())
        {
            std::shared_ptr<SimpleUserResource> newItem(new SimpleUserResource());
            newItem->fromJson(val[U("owner")]);
            setOwner( newItem );
        }
    }
    if(val.has_field(U("serial")))
    {
        setSerial(ModelBase::stringFromJson(val[U("serial")]));
    }
    {
        m_Tags.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("tags")))
        {
        for( auto& item : val[U("tags")].as_array() )
        {
            m_Tags.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(val.has_field(U("template")))
    {
        setTemplate(ModelBase::stringFromJson(val[U("template")]));
    }
    if(val.has_field(U("updated_date")))
    {
        setUpdatedDate(ModelBase::int64_tFromJson(val[U("updated_date")]));
    }
    {
        m_Users.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("users")))
        {
        for( auto& item : val[U("users")].as_array() )
        {
            if(item.is_null())
            {
                m_Users.push_back( std::shared_ptr<SimpleUserResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<SimpleUserResource> newItem(new SimpleUserResource());
                newItem->fromJson(item);
                m_Users.push_back( newItem );
            }
        }
        }
    }
}

void DeviceResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Additional_properties )
        {
            web::json::value tmp = web::json::value::object();
            tmp[U("key")] = ModelBase::toJson(item.first);
            tmp[U("value")] = ModelBase::toJson(item.second);
            jsonArray.push_back(tmp);
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("additional_properties"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_Created_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("created_date"), m_Created_date));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("description"), m_Description));
        
    }
    if(m_Device_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("device_type"), m_Device_type));
        
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
        
    }
    if(m_LocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("location"), m_Location));
        
    }
    if(m_Mac_addressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("mac_address"), m_Mac_address));
        
    }
    if(m_MakeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("make"), m_Make));
        
    }
    if(m_ModelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("model"), m_Model));
        
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
    if(m_OsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("os"), m_Os));
        
    }
    if(m_OwnerIsSet)
    {
        if (m_Owner.get())
        {
            m_Owner->toMultipart(multipart, U("owner."));
        }
        
    }
    if(m_SerialIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("serial"), m_Serial));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("tags"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_TemplateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("template"), m_Template));
        
    }
    if(m_Updated_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("updated_date"), m_Updated_date));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Users )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("users"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
}

void DeviceResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        m_Additional_properties.clear();
        if(multipart->hasContent(U("additional_properties")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("additional_properties"))));
        for( auto& item : jsonArray.as_array() )
        {
            utility::string_t key;
            if(item.has_field(U("key")))
            {
                key = ModelBase::stringFromJson(item[U("key")]);
            }
            if(item.is_null())
            {
                m_Additional_properties.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, std::shared_ptr<Property>(nullptr) ));
            }
            else
            {
                std::shared_ptr<Property> newItem(new Property());
                newItem->fromJson(item[U("value")]);
                m_Additional_properties.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, newItem ));
            }
        }
        }
    }
    if(multipart->hasContent(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("created_date"))));
    }
    if(multipart->hasContent(U("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("description"))));
    }
    if(multipart->hasContent(U("device_type")))
    {
        setDeviceType(ModelBase::stringFromHttpContent(multipart->getContent(U("device_type"))));
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("location")))
    {
        setLocation(ModelBase::stringFromHttpContent(multipart->getContent(U("location"))));
    }
    if(multipart->hasContent(U("mac_address")))
    {
        setMacAddress(ModelBase::stringFromHttpContent(multipart->getContent(U("mac_address"))));
    }
    if(multipart->hasContent(U("make")))
    {
        setMake(ModelBase::stringFromHttpContent(multipart->getContent(U("make"))));
    }
    if(multipart->hasContent(U("model")))
    {
        setModel(ModelBase::stringFromHttpContent(multipart->getContent(U("model"))));
    }
    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    }
    if(multipart->hasContent(U("os")))
    {
        setOs(ModelBase::stringFromHttpContent(multipart->getContent(U("os"))));
    }
    if(multipart->hasContent(U("owner")))
    {
        if(multipart->hasContent(U("owner")))
        {
            std::shared_ptr<SimpleUserResource> newItem(new SimpleUserResource());
            newItem->fromMultiPart(multipart, U("owner."));
            setOwner( newItem );
        }
    }
    if(multipart->hasContent(U("serial")))
    {
        setSerial(ModelBase::stringFromHttpContent(multipart->getContent(U("serial"))));
    }
    {
        m_Tags.clear();
        if(multipart->hasContent(U("tags")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("tags"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Tags.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(multipart->hasContent(U("template")))
    {
        setTemplate(ModelBase::stringFromHttpContent(multipart->getContent(U("template"))));
    }
    if(multipart->hasContent(U("updated_date")))
    {
        setUpdatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("updated_date"))));
    }
    {
        m_Users.clear();
        if(multipart->hasContent(U("users")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("users"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Users.push_back( std::shared_ptr<SimpleUserResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<SimpleUserResource> newItem(new SimpleUserResource());
                newItem->fromJson(item);
                m_Users.push_back( newItem );
            }
        }
        }
    }
}

std::map<utility::string_t, std::shared_ptr<Property>>& DeviceResource::getAdditionalProperties()
{
    return m_Additional_properties;
}

void DeviceResource::setAdditionalProperties(std::map<utility::string_t, std::shared_ptr<Property>> value)
{
    m_Additional_properties = value;
    m_Additional_propertiesIsSet = true;
}
bool DeviceResource::additionalPropertiesIsSet() const
{
    return m_Additional_propertiesIsSet;
}

void DeviceResource::unsetAdditional_properties()
{
    m_Additional_propertiesIsSet = false;
}

int64_t DeviceResource::getCreatedDate() const
{
    return m_Created_date;
}


void DeviceResource::setCreatedDate(int64_t value)
{
    m_Created_date = value;
    m_Created_dateIsSet = true;
}
bool DeviceResource::createdDateIsSet() const
{
    return m_Created_dateIsSet;
}

void DeviceResource::unsetCreated_date()
{
    m_Created_dateIsSet = false;
}

utility::string_t DeviceResource::getDescription() const
{
    return m_Description;
}


void DeviceResource::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool DeviceResource::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void DeviceResource::unsetDescription()
{
    m_DescriptionIsSet = false;
}

utility::string_t DeviceResource::getDeviceType() const
{
    return m_Device_type;
}


void DeviceResource::setDeviceType(utility::string_t value)
{
    m_Device_type = value;
    m_Device_typeIsSet = true;
}
bool DeviceResource::deviceTypeIsSet() const
{
    return m_Device_typeIsSet;
}

void DeviceResource::unsetDevice_type()
{
    m_Device_typeIsSet = false;
}

utility::string_t DeviceResource::getId() const
{
    return m_Id;
}


void DeviceResource::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool DeviceResource::idIsSet() const
{
    return m_IdIsSet;
}

void DeviceResource::unsetId()
{
    m_IdIsSet = false;
}

utility::string_t DeviceResource::getLocation() const
{
    return m_Location;
}


void DeviceResource::setLocation(utility::string_t value)
{
    m_Location = value;
    m_LocationIsSet = true;
}
bool DeviceResource::locationIsSet() const
{
    return m_LocationIsSet;
}

void DeviceResource::unsetLocation()
{
    m_LocationIsSet = false;
}

utility::string_t DeviceResource::getMacAddress() const
{
    return m_Mac_address;
}


void DeviceResource::setMacAddress(utility::string_t value)
{
    m_Mac_address = value;
    m_Mac_addressIsSet = true;
}
bool DeviceResource::macAddressIsSet() const
{
    return m_Mac_addressIsSet;
}

void DeviceResource::unsetMac_address()
{
    m_Mac_addressIsSet = false;
}

utility::string_t DeviceResource::getMake() const
{
    return m_Make;
}


void DeviceResource::setMake(utility::string_t value)
{
    m_Make = value;
    m_MakeIsSet = true;
}
bool DeviceResource::makeIsSet() const
{
    return m_MakeIsSet;
}

void DeviceResource::unsetMake()
{
    m_MakeIsSet = false;
}

utility::string_t DeviceResource::getModel() const
{
    return m_Model;
}


void DeviceResource::setModel(utility::string_t value)
{
    m_Model = value;
    m_ModelIsSet = true;
}
bool DeviceResource::modelIsSet() const
{
    return m_ModelIsSet;
}

void DeviceResource::unsetModel()
{
    m_ModelIsSet = false;
}

utility::string_t DeviceResource::getName() const
{
    return m_Name;
}


void DeviceResource::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool DeviceResource::nameIsSet() const
{
    return m_NameIsSet;
}

void DeviceResource::unsetName()
{
    m_NameIsSet = false;
}

utility::string_t DeviceResource::getOs() const
{
    return m_Os;
}


void DeviceResource::setOs(utility::string_t value)
{
    m_Os = value;
    m_OsIsSet = true;
}
bool DeviceResource::osIsSet() const
{
    return m_OsIsSet;
}

void DeviceResource::unsetOs()
{
    m_OsIsSet = false;
}

std::shared_ptr<SimpleUserResource> DeviceResource::getOwner() const
{
    return m_Owner;
}


void DeviceResource::setOwner(std::shared_ptr<SimpleUserResource> value)
{
    m_Owner = value;
    m_OwnerIsSet = true;
}
bool DeviceResource::ownerIsSet() const
{
    return m_OwnerIsSet;
}

void DeviceResource::unsetOwner()
{
    m_OwnerIsSet = false;
}

utility::string_t DeviceResource::getSerial() const
{
    return m_Serial;
}


void DeviceResource::setSerial(utility::string_t value)
{
    m_Serial = value;
    m_SerialIsSet = true;
}
bool DeviceResource::serialIsSet() const
{
    return m_SerialIsSet;
}

void DeviceResource::unsetSerial()
{
    m_SerialIsSet = false;
}

std::vector<utility::string_t>& DeviceResource::getTags()
{
    return m_Tags;
}

void DeviceResource::setTags(std::vector<utility::string_t> value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}
bool DeviceResource::tagsIsSet() const
{
    return m_TagsIsSet;
}

void DeviceResource::unsetTags()
{
    m_TagsIsSet = false;
}

utility::string_t DeviceResource::getTemplate() const
{
    return m_Template;
}


void DeviceResource::setTemplate(utility::string_t value)
{
    m_Template = value;
    m_TemplateIsSet = true;
}
bool DeviceResource::templateIsSet() const
{
    return m_TemplateIsSet;
}

void DeviceResource::unsetTemplate()
{
    m_TemplateIsSet = false;
}

int64_t DeviceResource::getUpdatedDate() const
{
    return m_Updated_date;
}


void DeviceResource::setUpdatedDate(int64_t value)
{
    m_Updated_date = value;
    m_Updated_dateIsSet = true;
}
bool DeviceResource::updatedDateIsSet() const
{
    return m_Updated_dateIsSet;
}

void DeviceResource::unsetUpdated_date()
{
    m_Updated_dateIsSet = false;
}

std::vector<std::shared_ptr<SimpleUserResource>>& DeviceResource::getUsers()
{
    return m_Users;
}

void DeviceResource::setUsers(std::vector<std::shared_ptr<SimpleUserResource>> value)
{
    m_Users = value;
    m_UsersIsSet = true;
}
bool DeviceResource::usersIsSet() const
{
    return m_UsersIsSet;
}

void DeviceResource::unsetUsers()
{
    m_UsersIsSet = false;
}

}
}
}
}

