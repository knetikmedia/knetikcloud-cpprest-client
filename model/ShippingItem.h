/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * ShippingItem.h
 *
 * 
 */

#ifndef ShippingItem_H_
#define ShippingItem_H_


#include "StoreItem.h"
#include "Behavior.h"
#include "Sku.h"
#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>
#include "Property.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ShippingItem
    : public StoreItem
{
public:
    ShippingItem();
    virtual ~ShippingItem();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ShippingItem members

    /// <summary>
    /// A unique list of country iso3 codes that allow the shipping option
    /// </summary>
    std::vector<utility::string_t>& getCountries();
    bool countriesIsSet() const;
    void unsetCountries();
    void setCountries(std::vector<utility::string_t> value);
    /// <summary>
    /// An abstract max value that the values of item&#39;s shipping_tier work against to decide whether an order can be fulfilled
    /// </summary>
    int32_t getMaxTierTotal() const;
        void setMaxTierTotal(int32_t value);
    /// <summary>
    /// Whether tax should be applied to the shipping price.  Default &#x3D; false
    /// </summary>
    bool getTaxable() const;
    bool taxableIsSet() const;
    void unsetTaxable();
    void setTaxable(bool value);

protected:
    std::vector<utility::string_t> m_Countries;
    bool m_CountriesIsSet;
    int32_t m_Max_tier_total;
        bool m_Taxable;
    bool m_TaxableIsSet;
};

}
}
}
}

#endif /* ShippingItem_H_ */
