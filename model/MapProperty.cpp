/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "MapProperty.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

MapProperty::MapProperty()
{
}

MapProperty::~MapProperty()
{
}

void MapProperty::validate()
{
    // TODO: implement validation
}

web::json::value MapProperty::toJson() const
{
    web::json::value val = this->Property::toJson();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_map )
        {
            web::json::value tmp = web::json::value::object();
            tmp[U("key")] = ModelBase::toJson(item.first);
            tmp[U("value")] = ModelBase::toJson(item.second);
            jsonArray.push_back(tmp);
        }
        val[U("map")] = web::json::value::array(jsonArray);
    }

    return val;
}

void MapProperty::fromJson(web::json::value& val)
{
    this->Property::fromJson(val);

    {
        m_map.clear();
        std::vector<web::json::value> jsonArray;
        for( auto& item : val[U("map")].as_array() )
        {  
            utility::string_t key;
            if(item.has_field(U("key")))
            {
                key = ModelBase::stringFromJson(item[U("key")]);
            }
            if(item.is_null())
            {
                m_map.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, std::shared_ptr<Property>(nullptr) ));
            }
            else
            {
                std::shared_ptr<Property> newItem(new Property());
                newItem->fromJson(item[U("value")]);
                m_map.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, newItem ));
            }
        }
    }
}

void MapProperty::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("type"), m_Type));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_map )
        {
            web::json::value tmp = web::json::value::object();
            tmp[U("key")] = ModelBase::toJson(item.first);
            tmp[U("value")] = ModelBase::toJson(item.second);
            jsonArray.push_back(tmp);
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + U("map"), web::json::value::array(jsonArray), U("application/json")));
            }
}

void MapProperty::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setType(ModelBase::stringFromHttpContent(multipart->getContent(U("type"))));
    {
        m_map.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("map"))));
        for( auto& item : jsonArray.as_array() )
        {
            utility::string_t key;
            if(item.has_field(U("key")))
            {
                key = ModelBase::stringFromJson(item[U("key")]);
            }
            if(item.is_null())
            {
                m_map.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, std::shared_ptr<Property>(nullptr) ));
            }
            else
            {
                std::shared_ptr<Property> newItem(new Property());
                newItem->fromJson(item[U("value")]);
                m_map.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, newItem ));
            }
        }
    }
}

std::map<utility::string_t, std::shared_ptr<Property>>& MapProperty::getMap()
{
    return m_map;
}

void MapProperty::setMap(std::map<utility::string_t, std::shared_ptr<Property>> value)
{
    m_map = value;
    
}
}
}
}
}

