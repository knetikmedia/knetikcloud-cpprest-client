/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BillingReport.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

BillingReport::BillingReport()
{
    m_Created = 0;
    m_CreatedIsSet = false;
    m_Id = U("");
    m_IdIsSet = false;
    m_Last_known_failuresIsSet = false;
    m_StatisticsIsSet = false;
    
}

BillingReport::~BillingReport()
{
}

void BillingReport::validate()
{
    // TODO: implement validation
}

web::json::value BillingReport::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CreatedIsSet)
    {
        val[U("created")] = ModelBase::toJson(m_Created);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Last_known_failures )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("last_known_failures")] = web::json::value::array(jsonArray);
        }
    }
    if(m_StatisticsIsSet)
    {
        val[U("statistics")] = ModelBase::toJson(m_Statistics);
    }
    

    return val;
}

void BillingReport::fromJson(web::json::value& val)
{
    if(val.has_field(U("created")))
    {
        setCreated(ModelBase::int64_tFromJson(val[U("created")]));
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::stringFromJson(val[U("id")]));
        
    }
    {
        m_Last_known_failures.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("last_known_failures")))
        {
        for( auto& item : val[U("last_known_failures")].as_array() )
        {
            m_Last_known_failures.push_back(ModelBase::stringFromJson(item));
            
        }
        }
    }
    if(val.has_field(U("statistics")))
    {
        setStatistics(ModelBase::std::mapFromJson(val[U("statistics")]));
    }
    
}

void BillingReport::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_CreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("created"), m_Created));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Last_known_failures )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("last_known_failures"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_StatisticsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("statistics"), m_Statistics));
    }
    
}

void BillingReport::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("created")))
    {
        setCreated(ModelBase::int64_tFromHttpContent(multipart->getContent(U("created"))));
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(U("id"))));
        
    }
    {
        m_Last_known_failures.clear();
        if(multipart->hasContent(U("last_known_failures")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("last_known_failures"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Last_known_failures.push_back(ModelBase::stringFromJson(item));
            
        }
        }
    }
    if(multipart->hasContent(U("statistics")))
    {
        setStatistics(ModelBase::std::mapFromHttpContent(multipart->getContent(U("statistics"))));
    }
    
}


int64_t BillingReport::getCreated() const
{
    return m_Created;
}
void BillingReport::setCreated(int64_t value)
{
    m_Created = value;
    m_CreatedIsSet = true;
}
bool BillingReport::createdIsSet() const
{
    return m_CreatedIsSet;
}
void BillingReport::unsetCreated()
{
    m_CreatedIsSet = false;
}
utility::string_t BillingReport::getId() const
{
    return m_Id;
}
void BillingReport::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool BillingReport::idIsSet() const
{
    return m_IdIsSet;
}
void BillingReport::unsetId()
{
    m_IdIsSet = false;
}
std::vector<utility::string_t>& BillingReport::getLastKnownFailures()
{
    return m_Last_known_failures;
}
bool BillingReport::last_known_failuresIsSet() const
{
    return m_Last_known_failuresIsSet;
}
void BillingReport::unsetLast_known_failures()
{
    m_Last_known_failuresIsSet = false;
}
std::map<utility::string_t, int32_t>& BillingReport::getStatistics()
{
    return m_Statistics;
}
bool BillingReport::statisticsIsSet() const
{
    return m_StatisticsIsSet;
}
void BillingReport::unsetStatistics()
{
    m_StatisticsIsSet = false;
}

}
}
}
}

