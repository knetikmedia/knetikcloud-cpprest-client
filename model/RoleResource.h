/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * RoleResource.h
 *
 * 
 */

#ifndef RoleResource_H_
#define RoleResource_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "PermissionResource.h"
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  RoleResource
    : public ModelBase
{
public:
    RoleResource();
    virtual ~RoleResource();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// RoleResource members

    /// <summary>
    /// The number of clients this role is assigned to
    /// </summary>
    int32_t getClientCount() const;
    void setClientCount(int32_t value);
    bool client_countIsSet() const;
    void unsetClient_count();
    /// <summary>
    /// The date the role was added. Unix timestamp in seconds
    /// </summary>
    int64_t getCreatedDate() const;
    void setCreatedDate(int64_t value);
    bool created_dateIsSet() const;
    void unsetCreated_date();
    /// <summary>
    /// Whether a role is locked from being deleted
    /// </summary>
    bool getLocked() const;
    void setLocked(bool value);
    bool lockedIsSet() const;
    void unsetLocked();
    /// <summary>
    /// The name of the role used for display purposes
    /// </summary>
    utility::string_t getName() const;
    void setName(utility::string_t value);
        /// <summary>
    /// The keyword that defines the role
    /// </summary>
    utility::string_t getRole() const;
    void setRole(utility::string_t value);
        /// <summary>
    /// The list of permissions this role has
    /// </summary>
    std::vector<std::shared_ptr<PermissionResource>>& getRolePermission();
    bool role_permissionIsSet() const;
    void unsetRole_permission();
    /// <summary>
    /// The number of users this role is assigned to
    /// </summary>
    int32_t getUserCount() const;
    void setUserCount(int32_t value);
    bool user_countIsSet() const;
    void unsetUser_count();

protected:
    int32_t m_Client_count;
    bool m_Client_countIsSet;
int64_t m_Created_date;
    bool m_Created_dateIsSet;
bool m_Locked;
    bool m_LockedIsSet;
utility::string_t m_Name;
    utility::string_t m_Role;
    std::vector<std::shared_ptr<PermissionResource>> m_Role_permission;
    bool m_Role_permissionIsSet;
int32_t m_User_count;
    bool m_User_countIsSet;
};

}
}
}
}

#endif /* RoleResource_H_ */
