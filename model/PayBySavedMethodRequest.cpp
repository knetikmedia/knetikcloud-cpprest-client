/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PayBySavedMethodRequest.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

PayBySavedMethodRequest::PayBySavedMethodRequest()
{
    m_Payment_method = 0;
    m_User_id = 0;
    m_User_idIsSet = false;
}

PayBySavedMethodRequest::~PayBySavedMethodRequest()
{
}

void PayBySavedMethodRequest::validate()
{
    // TODO: implement validation
}

web::json::value PayBySavedMethodRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("payment_method")] = ModelBase::toJson(m_Payment_method);
    if(m_User_idIsSet)
    {
        val[U("user_id")] = ModelBase::toJson(m_User_id);
    }

    return val;
}

void PayBySavedMethodRequest::fromJson(web::json::value& val)
{
    setPaymentMethod(ModelBase::int32_tFromJson(val[U("payment_method")]));
    if(val.has_field(U("user_id")))
    {
        setUserId(ModelBase::int32_tFromJson(val[U("user_id")]));
    }
}

void PayBySavedMethodRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("payment_method"), m_Payment_method));
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("user_id"), m_User_id));
    }
}

void PayBySavedMethodRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setPaymentMethod(ModelBase::int32_tFromHttpContent(multipart->getContent(U("payment_method"))));
    if(multipart->hasContent(U("user_id")))
    {
        setUserId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("user_id"))));
    }
}

int32_t PayBySavedMethodRequest::getPaymentMethod() const
{
    return m_Payment_method;
}


void PayBySavedMethodRequest::setPaymentMethod(int32_t value)
{
    m_Payment_method = value;
    
}
int32_t PayBySavedMethodRequest::getUserId() const
{
    return m_User_id;
}


void PayBySavedMethodRequest::setUserId(int32_t value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}
bool PayBySavedMethodRequest::userIdIsSet() const
{
    return m_User_idIsSet;
}

void PayBySavedMethodRequest::unsetUser_id()
{
    m_User_idIsSet = false;
}

}
}
}
}

