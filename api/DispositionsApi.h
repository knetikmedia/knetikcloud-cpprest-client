/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * DispositionsApi.h
 *
 * 
 */

#ifndef DispositionsApi_H_
#define DispositionsApi_H_


#include "ApiClient.h"

#include "DispositionCount.h"
#include "DispositionResource.h"
#include "PageResource«DispositionResource».h"
#include "Result.h"
#include <cpprest/details/basic_types.h>

namespace com {
namespace knetikcloud {
namespace client {
namespace api {

using namespace com::knetikcloud::client::model;

class  DispositionsApi
{
public:
    DispositionsApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~DispositionsApi();
    /// <summary>
    /// Add a new disposition
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="disposition">The new disposition record (optional)</param>
    pplx::task<std::shared_ptr<DispositionResource>> addDisposition(std::shared_ptr<DispositionResource> disposition);
    /// <summary>
    /// Delete a disposition
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">The id of the disposition record</param>
    pplx::task<void> deleteDisposition(int64_t id);
    /// <summary>
    /// Returns a disposition
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">The id of the disposition record</param>
    pplx::task<std::shared_ptr<DispositionResource>> getDisposition(int64_t id);
    /// <summary>
    /// Returns a list of disposition counts
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="filterContext">Filter for dispositions within a context type (games, articles, polls, etc). Optionally with a specific id like filter_context&#x3D;video:47 (optional)</param>/// <param name="filterOwner">Filter for dispositions from a specific user by id or &#39;me&#39; (optional)</param>
    pplx::task<std::vector<std::shared_ptr<DispositionCount>>> getDispositionCounts(utility::string_t filterContext, utility::string_t filterOwner);
    /// <summary>
    /// Returns a page of dispositions
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="filterContext">Filter for dispositions within a context type (games, articles, polls, etc). Optionally with a specific id like filter_context&#x3D;video:47 (optional)</param>/// <param name="filterOwner">Filter for dispositions from a specific user by id or &#39;me&#39; (optional)</param>/// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
    pplx::task<std::shared_ptr<PageResource«DispositionResource»>> getDispositions(utility::string_t filterContext, utility::string_t filterOwner, int32_t size, int32_t page, utility::string_t order);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* DispositionsApi_H_ */

