/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Topic.h
 *
 * 
 */

#ifndef Topic_H_
#define Topic_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "Object.h"
#include <vector>

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Topic
    : public ModelBase
{
public:
    Topic();
    virtual ~Topic();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Topic members

    /// <summary>
    /// 
    /// </summary>
    int64_t getCreatedDate() const;
    bool createdDateIsSet() const;
    void unsetCreated_date();
    void setCreatedDate(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDisplayName() const;
    bool displayNameIsSet() const;
    void unsetDisplay_name();
    void setDisplayName(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();
    void setId(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    bool getLocked() const;
    bool lockedIsSet() const;
    void unsetLocked();
    void setLocked(bool value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getTags();
    bool tagsIsSet() const;
    void unsetTags();
    void setTags(std::vector<utility::string_t> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Object> getTopicMap() const;
    bool topicMapIsSet() const;
    void unsetTopic_map();
    void setTopicMap(std::shared_ptr<Object> value);
    /// <summary>
    /// 
    /// </summary>
    int64_t getUpdatedDate() const;
    bool updatedDateIsSet() const;
    void unsetUpdated_date();
    void setUpdatedDate(int64_t value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getUserCount() const;
    bool userCountIsSet() const;
    void unsetUser_count();
    void setUserCount(int32_t value);

protected:
    int64_t m_Created_date;
    bool m_Created_dateIsSet;
    utility::string_t m_Display_name;
    bool m_Display_nameIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    bool m_Locked;
    bool m_LockedIsSet;
    std::vector<utility::string_t> m_Tags;
    bool m_TagsIsSet;
    std::shared_ptr<Object> m_Topic_map;
    bool m_Topic_mapIsSet;
    int64_t m_Updated_date;
    bool m_Updated_dateIsSet;
    int32_t m_User_count;
    bool m_User_countIsSet;
};

}
}
}
}

#endif /* Topic_H_ */
