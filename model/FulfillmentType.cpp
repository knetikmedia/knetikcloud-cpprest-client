/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "FulfillmentType.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

FulfillmentType::FulfillmentType()
{
    m_Core = false;
    m_CoreIsSet = false;
    m_Description = U("");
    m_DescriptionIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_Name = U("");
}

FulfillmentType::~FulfillmentType()
{
}

void FulfillmentType::validate()
{
    // TODO: implement validation
}

web::json::value FulfillmentType::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CoreIsSet)
    {
        val[U("core")] = ModelBase::toJson(m_Core);
    }
    if(m_DescriptionIsSet)
    {
        val[U("description")] = ModelBase::toJson(m_Description);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    val[U("name")] = ModelBase::toJson(m_Name);

    return val;
}

void FulfillmentType::fromJson(web::json::value& val)
{
    if(val.has_field(U("core")))
    {
        setCore(ModelBase::boolFromJson(val[U("core")]));
    }
    if(val.has_field(U("description")))
    {
        setDescription(ModelBase::stringFromJson(val[U("description")]));
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int32_tFromJson(val[U("id")]));
    }
    setName(ModelBase::stringFromJson(val[U("name")]));
}

void FulfillmentType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_CoreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("core"), m_Core));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("description"), m_Description));
        
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
}

void FulfillmentType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("core")))
    {
        setCore(ModelBase::boolFromHttpContent(multipart->getContent(U("core"))));
    }
    if(multipart->hasContent(U("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("description"))));
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("id"))));
    }
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
}

bool FulfillmentType::getCore() const
{
    return m_Core;
}


void FulfillmentType::setCore(bool value)
{
    m_Core = value;
    m_CoreIsSet = true;
}
bool FulfillmentType::coreIsSet() const
{
    return m_CoreIsSet;
}

void FulfillmentType::unsetCore()
{
    m_CoreIsSet = false;
}

utility::string_t FulfillmentType::getDescription() const
{
    return m_Description;
}


void FulfillmentType::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool FulfillmentType::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void FulfillmentType::unsetDescription()
{
    m_DescriptionIsSet = false;
}

int32_t FulfillmentType::getId() const
{
    return m_Id;
}


void FulfillmentType::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool FulfillmentType::idIsSet() const
{
    return m_IdIsSet;
}

void FulfillmentType::unsetId()
{
    m_IdIsSet = false;
}

utility::string_t FulfillmentType::getName() const
{
    return m_Name;
}


void FulfillmentType::setName(utility::string_t value)
{
    m_Name = value;
    
}
}
}
}
}

