/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * FileGroupPropertyDefinitionResource.h
 *
 * 
 */

#ifndef FileGroupPropertyDefinitionResource_H_
#define FileGroupPropertyDefinitionResource_H_


#include "PropertyFieldListResource.h"
#include <cpprest/details/basic_types.h>
#include "PropertyDefinitionResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  FileGroupPropertyDefinitionResource
    : public PropertyDefinitionResource
{
public:
    FileGroupPropertyDefinitionResource();
    virtual ~FileGroupPropertyDefinitionResource();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// FileGroupPropertyDefinitionResource members

    /// <summary>
    /// If provided, a file type that the property must match
    /// </summary>
    utility::string_t getFileType() const;
    bool fileTypeIsSet() const;
    void unsetFile_type();
    void setFileType(utility::string_t value);
    /// <summary>
    /// If provided, the maximum number of files in the group
    /// </summary>
    int32_t getMaxCount() const;
    bool maxCountIsSet() const;
    void unsetMax_count();
    void setMaxCount(int32_t value);
    /// <summary>
    /// If provided, the maximum allowed size per file in bytes
    /// </summary>
    int64_t getMaxFileSize() const;
    bool maxFileSizeIsSet() const;
    void unsetMax_file_size();
    void setMaxFileSize(int64_t value);
    /// <summary>
    /// If provided, the minimum number of files in the group
    /// </summary>
    int32_t getMinCount() const;
    bool minCountIsSet() const;
    void unsetMin_count();
    void setMinCount(int32_t value);

protected:
    utility::string_t m_File_type;
    bool m_File_typeIsSet;
    int32_t m_Max_count;
    bool m_Max_countIsSet;
    int64_t m_Max_file_size;
    bool m_Max_file_sizeIsSet;
    int32_t m_Min_count;
    bool m_Min_countIsSet;
};

}
}
}
}

#endif /* FileGroupPropertyDefinitionResource_H_ */
