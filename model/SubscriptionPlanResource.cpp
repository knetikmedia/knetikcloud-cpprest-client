/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SubscriptionPlanResource.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

SubscriptionPlanResource::SubscriptionPlanResource()
{
    m_Additional_propertiesIsSet = false;
    m_Billing_cycle_length = 0;
    m_Billing_cycle_unit = U("");
    m_Consolidated = false;
    m_Currency_code = U("");
    m_End_date = 0;
    m_End_dateIsSet = false;
    m_First_billing_cycle_length = 0;
    m_First_billing_cycle_lengthIsSet = false;
    m_First_billing_cycle_unit = U("");
    m_First_billing_cycle_unitIsSet = false;
    m_Grace_period = 0;
    m_Id = U("");
    m_IdIsSet = false;
    m_Initial_fee = 0.0;
    m_Initial_sku = U("");
    m_Initial_skuIsSet = false;
    m_Late_payment_fee = 0.0;
    m_Late_payment_sku = U("");
    m_Late_payment_skuIsSet = false;
    m_Locked = false;
    m_LockedIsSet = false;
    m_Max_bill_attempts = 0;
    m_Max_cycles = 0;
    m_Max_cyclesIsSet = false;
    m_Migrate_to_plan = U("");
    m_Migrate_to_planIsSet = false;
    m_Min_cycles = 0;
    m_Min_cyclesIsSet = false;
    m_Name = U("");
    m_Published = false;
    m_Reactivation_fee = 0.0;
    m_Reactivation_sku = U("");
    m_Reactivation_skuIsSet = false;
    m_Recurring_fee = 0.0;
    m_Recurring_sku = U("");
    m_Recurring_skuIsSet = false;
    m_Start_date = 0;
    m_Start_dateIsSet = false;
    
}

SubscriptionPlanResource::~SubscriptionPlanResource()
{
}

void SubscriptionPlanResource::validate()
{
    // TODO: implement validation
}

web::json::value SubscriptionPlanResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Additional_propertiesIsSet)
    {
        val[U("additional_properties")] = ModelBase::toJson(m_Additional_properties);
    }
    val[U("billing_cycle_length")] = ModelBase::toJson(m_Billing_cycle_length);
    val[U("billing_cycle_unit")] = ModelBase::toJson(m_Billing_cycle_unit);
    val[U("consolidated")] = ModelBase::toJson(m_Consolidated);
    val[U("currency_code")] = ModelBase::toJson(m_Currency_code);
    if(m_End_dateIsSet)
    {
        val[U("end_date")] = ModelBase::toJson(m_End_date);
    }
    if(m_First_billing_cycle_lengthIsSet)
    {
        val[U("first_billing_cycle_length")] = ModelBase::toJson(m_First_billing_cycle_length);
    }
    if(m_First_billing_cycle_unitIsSet)
    {
        val[U("first_billing_cycle_unit")] = ModelBase::toJson(m_First_billing_cycle_unit);
    }
    val[U("grace_period")] = ModelBase::toJson(m_Grace_period);
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    val[U("initial_fee")] = ModelBase::toJson(m_Initial_fee);
    if(m_Initial_skuIsSet)
    {
        val[U("initial_sku")] = ModelBase::toJson(m_Initial_sku);
    }
    val[U("late_payment_fee")] = ModelBase::toJson(m_Late_payment_fee);
    if(m_Late_payment_skuIsSet)
    {
        val[U("late_payment_sku")] = ModelBase::toJson(m_Late_payment_sku);
    }
    if(m_LockedIsSet)
    {
        val[U("locked")] = ModelBase::toJson(m_Locked);
    }
    val[U("max_bill_attempts")] = ModelBase::toJson(m_Max_bill_attempts);
    if(m_Max_cyclesIsSet)
    {
        val[U("max_cycles")] = ModelBase::toJson(m_Max_cycles);
    }
    if(m_Migrate_to_planIsSet)
    {
        val[U("migrate_to_plan")] = ModelBase::toJson(m_Migrate_to_plan);
    }
    if(m_Min_cyclesIsSet)
    {
        val[U("min_cycles")] = ModelBase::toJson(m_Min_cycles);
    }
    val[U("name")] = ModelBase::toJson(m_Name);
    val[U("published")] = ModelBase::toJson(m_Published);
    val[U("reactivation_fee")] = ModelBase::toJson(m_Reactivation_fee);
    if(m_Reactivation_skuIsSet)
    {
        val[U("reactivation_sku")] = ModelBase::toJson(m_Reactivation_sku);
    }
    val[U("recurring_fee")] = ModelBase::toJson(m_Recurring_fee);
    if(m_Recurring_skuIsSet)
    {
        val[U("recurring_sku")] = ModelBase::toJson(m_Recurring_sku);
    }
    if(m_Start_dateIsSet)
    {
        val[U("start_date")] = ModelBase::toJson(m_Start_date);
    }
    

    return val;
}

void SubscriptionPlanResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("additional_properties")))
    {
        if(!val[U("additional_properties")].is_null())
        {
            std::map<utility::string_t, std::shared_ptr<Property>> newItem(std::map<utility::string_t, Property>());
            newItem->fromJson(val[U("additional_properties")]);
            setAdditionalProperties( newItem );
        }
        
    }
    setBillingCycleLength(ModelBase::int32_tFromJson(val[U("billing_cycle_length")]));
    setBillingCycleUnit(ModelBase::stringFromJson(val[U("billing_cycle_unit")]));
    setConsolidated(ModelBase::boolFromJson(val[U("consolidated")]));
    setCurrencyCode(ModelBase::stringFromJson(val[U("currency_code")]));
    if(val.has_field(U("end_date")))
    {
        setEndDate(ModelBase::int64_tFromJson(val[U("end_date")]));
    }
    if(val.has_field(U("first_billing_cycle_length")))
    {
        setFirstBillingCycleLength(ModelBase::int32_tFromJson(val[U("first_billing_cycle_length")]));
    }
    if(val.has_field(U("first_billing_cycle_unit")))
    {
        setFirstBillingCycleUnit(ModelBase::stringFromJson(val[U("first_billing_cycle_unit")]));
        
    }
    setGracePeriod(ModelBase::int32_tFromJson(val[U("grace_period")]));
    if(val.has_field(U("id")))
    {
        setId(ModelBase::stringFromJson(val[U("id")]));
        
    }
    setInitialFee(ModelBase::doubleFromJson(val[U("initial_fee")]));
    if(val.has_field(U("initial_sku")))
    {
        setInitialSku(ModelBase::stringFromJson(val[U("initial_sku")]));
        
    }
    setLatePaymentFee(ModelBase::doubleFromJson(val[U("late_payment_fee")]));
    if(val.has_field(U("late_payment_sku")))
    {
        setLatePaymentSku(ModelBase::stringFromJson(val[U("late_payment_sku")]));
        
    }
    if(val.has_field(U("locked")))
    {
        setLocked(ModelBase::boolFromJson(val[U("locked")]));
    }
    setMaxBillAttempts(ModelBase::int32_tFromJson(val[U("max_bill_attempts")]));
    if(val.has_field(U("max_cycles")))
    {
        setMaxCycles(ModelBase::int32_tFromJson(val[U("max_cycles")]));
    }
    if(val.has_field(U("migrate_to_plan")))
    {
        setMigrateToPlan(ModelBase::stringFromJson(val[U("migrate_to_plan")]));
        
    }
    if(val.has_field(U("min_cycles")))
    {
        setMinCycles(ModelBase::int32_tFromJson(val[U("min_cycles")]));
    }
    setName(ModelBase::stringFromJson(val[U("name")]));
    setPublished(ModelBase::boolFromJson(val[U("published")]));
    setReactivationFee(ModelBase::doubleFromJson(val[U("reactivation_fee")]));
    if(val.has_field(U("reactivation_sku")))
    {
        setReactivationSku(ModelBase::stringFromJson(val[U("reactivation_sku")]));
        
    }
    setRecurringFee(ModelBase::doubleFromJson(val[U("recurring_fee")]));
    if(val.has_field(U("recurring_sku")))
    {
        setRecurringSku(ModelBase::stringFromJson(val[U("recurring_sku")]));
        
    }
    if(val.has_field(U("start_date")))
    {
        setStartDate(ModelBase::int64_tFromJson(val[U("start_date")]));
    }
    
}

void SubscriptionPlanResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Additional_propertiesIsSet)
    {
        if (m_Additional_properties.get())
        {
            m_Additional_properties->toMultipart(multipart, U("additional_properties."));
        }
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("billing_cycle_length"), m_Billing_cycle_length));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("billing_cycle_unit"), m_Billing_cycle_unit));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("consolidated"), m_Consolidated));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("currency_code"), m_Currency_code));
    if(m_End_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("end_date"), m_End_date));
    }
    if(m_First_billing_cycle_lengthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("first_billing_cycle_length"), m_First_billing_cycle_length));
    }
    if(m_First_billing_cycle_unitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("first_billing_cycle_unit"), m_First_billing_cycle_unit));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("grace_period"), m_Grace_period));
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("initial_fee"), m_Initial_fee));
    if(m_Initial_skuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("initial_sku"), m_Initial_sku));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("late_payment_fee"), m_Late_payment_fee));
    if(m_Late_payment_skuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("late_payment_sku"), m_Late_payment_sku));
        
    }
    if(m_LockedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("locked"), m_Locked));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("max_bill_attempts"), m_Max_bill_attempts));
    if(m_Max_cyclesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("max_cycles"), m_Max_cycles));
    }
    if(m_Migrate_to_planIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("migrate_to_plan"), m_Migrate_to_plan));
        
    }
    if(m_Min_cyclesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("min_cycles"), m_Min_cycles));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("published"), m_Published));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("reactivation_fee"), m_Reactivation_fee));
    if(m_Reactivation_skuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("reactivation_sku"), m_Reactivation_sku));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("recurring_fee"), m_Recurring_fee));
    if(m_Recurring_skuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("recurring_sku"), m_Recurring_sku));
        
    }
    if(m_Start_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("start_date"), m_Start_date));
    }
    
}

void SubscriptionPlanResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("additional_properties")))
    {
        if(multipart->hasContent(U("additional_properties")))
        {
            std::map<utility::string_t, std::shared_ptr<Property>> newItem(std::map<utility::string_t, Property>());
            newItem->fromMultiPart(multipart, U("additional_properties."));
            setAdditionalProperties( newItem );
        }
        
    }
    setBillingCycleLength(ModelBase::int32_tFromHttpContent(multipart->getContent(U("billing_cycle_length"))));
    setBillingCycleUnit(ModelBase::stringFromHttpContent(multipart->getContent(U("billing_cycle_unit"))));
    setConsolidated(ModelBase::boolFromHttpContent(multipart->getContent(U("consolidated"))));
    setCurrencyCode(ModelBase::stringFromHttpContent(multipart->getContent(U("currency_code"))));
    if(multipart->hasContent(U("end_date")))
    {
        setEndDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("end_date"))));
    }
    if(multipart->hasContent(U("first_billing_cycle_length")))
    {
        setFirstBillingCycleLength(ModelBase::int32_tFromHttpContent(multipart->getContent(U("first_billing_cycle_length"))));
    }
    if(multipart->hasContent(U("first_billing_cycle_unit")))
    {
        setFirstBillingCycleUnit(ModelBase::stringFromHttpContent(multipart->getContent(U("first_billing_cycle_unit"))));
        
    }
    setGracePeriod(ModelBase::int32_tFromHttpContent(multipart->getContent(U("grace_period"))));
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(U("id"))));
        
    }
    setInitialFee(ModelBase::doubleFromHttpContent(multipart->getContent(U("initial_fee"))));
    if(multipart->hasContent(U("initial_sku")))
    {
        setInitialSku(ModelBase::stringFromHttpContent(multipart->getContent(U("initial_sku"))));
        
    }
    setLatePaymentFee(ModelBase::doubleFromHttpContent(multipart->getContent(U("late_payment_fee"))));
    if(multipart->hasContent(U("late_payment_sku")))
    {
        setLatePaymentSku(ModelBase::stringFromHttpContent(multipart->getContent(U("late_payment_sku"))));
        
    }
    if(multipart->hasContent(U("locked")))
    {
        setLocked(ModelBase::boolFromHttpContent(multipart->getContent(U("locked"))));
    }
    setMaxBillAttempts(ModelBase::int32_tFromHttpContent(multipart->getContent(U("max_bill_attempts"))));
    if(multipart->hasContent(U("max_cycles")))
    {
        setMaxCycles(ModelBase::int32_tFromHttpContent(multipart->getContent(U("max_cycles"))));
    }
    if(multipart->hasContent(U("migrate_to_plan")))
    {
        setMigrateToPlan(ModelBase::stringFromHttpContent(multipart->getContent(U("migrate_to_plan"))));
        
    }
    if(multipart->hasContent(U("min_cycles")))
    {
        setMinCycles(ModelBase::int32_tFromHttpContent(multipart->getContent(U("min_cycles"))));
    }
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    setPublished(ModelBase::boolFromHttpContent(multipart->getContent(U("published"))));
    setReactivationFee(ModelBase::doubleFromHttpContent(multipart->getContent(U("reactivation_fee"))));
    if(multipart->hasContent(U("reactivation_sku")))
    {
        setReactivationSku(ModelBase::stringFromHttpContent(multipart->getContent(U("reactivation_sku"))));
        
    }
    setRecurringFee(ModelBase::doubleFromHttpContent(multipart->getContent(U("recurring_fee"))));
    if(multipart->hasContent(U("recurring_sku")))
    {
        setRecurringSku(ModelBase::stringFromHttpContent(multipart->getContent(U("recurring_sku"))));
        
    }
    if(multipart->hasContent(U("start_date")))
    {
        setStartDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("start_date"))));
    }
    
}


std::map<utility::string_t, std::shared_ptr<Property>>& SubscriptionPlanResource::getAdditionalProperties()
{
    return m_Additional_properties;
}
bool SubscriptionPlanResource::additional_propertiesIsSet() const
{
    return m_Additional_propertiesIsSet;
}
void SubscriptionPlanResource::unsetAdditional_properties()
{
    m_Additional_propertiesIsSet = false;
}
int32_t SubscriptionPlanResource::getBillingCycleLength() const
{
    return m_Billing_cycle_length;
}
void SubscriptionPlanResource::setBillingCycleLength(int32_t value)
{
    m_Billing_cycle_length = value;
    
}
utility::string_t SubscriptionPlanResource::getBillingCycleUnit() const
{
    return m_Billing_cycle_unit;
}
void SubscriptionPlanResource::setBillingCycleUnit(utility::string_t value)
{
    m_Billing_cycle_unit = value;
    
}
bool SubscriptionPlanResource::getConsolidated() const
{
    return m_Consolidated;
}
void SubscriptionPlanResource::setConsolidated(bool value)
{
    m_Consolidated = value;
    
}
utility::string_t SubscriptionPlanResource::getCurrencyCode() const
{
    return m_Currency_code;
}
void SubscriptionPlanResource::setCurrencyCode(utility::string_t value)
{
    m_Currency_code = value;
    
}
int64_t SubscriptionPlanResource::getEndDate() const
{
    return m_End_date;
}
void SubscriptionPlanResource::setEndDate(int64_t value)
{
    m_End_date = value;
    m_End_dateIsSet = true;
}
bool SubscriptionPlanResource::end_dateIsSet() const
{
    return m_End_dateIsSet;
}
void SubscriptionPlanResource::unsetEnd_date()
{
    m_End_dateIsSet = false;
}
int32_t SubscriptionPlanResource::getFirstBillingCycleLength() const
{
    return m_First_billing_cycle_length;
}
void SubscriptionPlanResource::setFirstBillingCycleLength(int32_t value)
{
    m_First_billing_cycle_length = value;
    m_First_billing_cycle_lengthIsSet = true;
}
bool SubscriptionPlanResource::first_billing_cycle_lengthIsSet() const
{
    return m_First_billing_cycle_lengthIsSet;
}
void SubscriptionPlanResource::unsetFirst_billing_cycle_length()
{
    m_First_billing_cycle_lengthIsSet = false;
}
utility::string_t SubscriptionPlanResource::getFirstBillingCycleUnit() const
{
    return m_First_billing_cycle_unit;
}
void SubscriptionPlanResource::setFirstBillingCycleUnit(utility::string_t value)
{
    m_First_billing_cycle_unit = value;
    m_First_billing_cycle_unitIsSet = true;
}
bool SubscriptionPlanResource::first_billing_cycle_unitIsSet() const
{
    return m_First_billing_cycle_unitIsSet;
}
void SubscriptionPlanResource::unsetFirst_billing_cycle_unit()
{
    m_First_billing_cycle_unitIsSet = false;
}
int32_t SubscriptionPlanResource::getGracePeriod() const
{
    return m_Grace_period;
}
void SubscriptionPlanResource::setGracePeriod(int32_t value)
{
    m_Grace_period = value;
    
}
utility::string_t SubscriptionPlanResource::getId() const
{
    return m_Id;
}
void SubscriptionPlanResource::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool SubscriptionPlanResource::idIsSet() const
{
    return m_IdIsSet;
}
void SubscriptionPlanResource::unsetId()
{
    m_IdIsSet = false;
}
double SubscriptionPlanResource::getInitialFee() const
{
    return m_Initial_fee;
}
void SubscriptionPlanResource::setInitialFee(double value)
{
    m_Initial_fee = value;
    
}
utility::string_t SubscriptionPlanResource::getInitialSku() const
{
    return m_Initial_sku;
}
void SubscriptionPlanResource::setInitialSku(utility::string_t value)
{
    m_Initial_sku = value;
    m_Initial_skuIsSet = true;
}
bool SubscriptionPlanResource::initial_skuIsSet() const
{
    return m_Initial_skuIsSet;
}
void SubscriptionPlanResource::unsetInitial_sku()
{
    m_Initial_skuIsSet = false;
}
double SubscriptionPlanResource::getLatePaymentFee() const
{
    return m_Late_payment_fee;
}
void SubscriptionPlanResource::setLatePaymentFee(double value)
{
    m_Late_payment_fee = value;
    
}
utility::string_t SubscriptionPlanResource::getLatePaymentSku() const
{
    return m_Late_payment_sku;
}
void SubscriptionPlanResource::setLatePaymentSku(utility::string_t value)
{
    m_Late_payment_sku = value;
    m_Late_payment_skuIsSet = true;
}
bool SubscriptionPlanResource::late_payment_skuIsSet() const
{
    return m_Late_payment_skuIsSet;
}
void SubscriptionPlanResource::unsetLate_payment_sku()
{
    m_Late_payment_skuIsSet = false;
}
bool SubscriptionPlanResource::getLocked() const
{
    return m_Locked;
}
void SubscriptionPlanResource::setLocked(bool value)
{
    m_Locked = value;
    m_LockedIsSet = true;
}
bool SubscriptionPlanResource::lockedIsSet() const
{
    return m_LockedIsSet;
}
void SubscriptionPlanResource::unsetLocked()
{
    m_LockedIsSet = false;
}
int32_t SubscriptionPlanResource::getMaxBillAttempts() const
{
    return m_Max_bill_attempts;
}
void SubscriptionPlanResource::setMaxBillAttempts(int32_t value)
{
    m_Max_bill_attempts = value;
    
}
int32_t SubscriptionPlanResource::getMaxCycles() const
{
    return m_Max_cycles;
}
void SubscriptionPlanResource::setMaxCycles(int32_t value)
{
    m_Max_cycles = value;
    m_Max_cyclesIsSet = true;
}
bool SubscriptionPlanResource::max_cyclesIsSet() const
{
    return m_Max_cyclesIsSet;
}
void SubscriptionPlanResource::unsetMax_cycles()
{
    m_Max_cyclesIsSet = false;
}
utility::string_t SubscriptionPlanResource::getMigrateToPlan() const
{
    return m_Migrate_to_plan;
}
void SubscriptionPlanResource::setMigrateToPlan(utility::string_t value)
{
    m_Migrate_to_plan = value;
    m_Migrate_to_planIsSet = true;
}
bool SubscriptionPlanResource::migrate_to_planIsSet() const
{
    return m_Migrate_to_planIsSet;
}
void SubscriptionPlanResource::unsetMigrate_to_plan()
{
    m_Migrate_to_planIsSet = false;
}
int32_t SubscriptionPlanResource::getMinCycles() const
{
    return m_Min_cycles;
}
void SubscriptionPlanResource::setMinCycles(int32_t value)
{
    m_Min_cycles = value;
    m_Min_cyclesIsSet = true;
}
bool SubscriptionPlanResource::min_cyclesIsSet() const
{
    return m_Min_cyclesIsSet;
}
void SubscriptionPlanResource::unsetMin_cycles()
{
    m_Min_cyclesIsSet = false;
}
utility::string_t SubscriptionPlanResource::getName() const
{
    return m_Name;
}
void SubscriptionPlanResource::setName(utility::string_t value)
{
    m_Name = value;
    
}
bool SubscriptionPlanResource::getPublished() const
{
    return m_Published;
}
void SubscriptionPlanResource::setPublished(bool value)
{
    m_Published = value;
    
}
double SubscriptionPlanResource::getReactivationFee() const
{
    return m_Reactivation_fee;
}
void SubscriptionPlanResource::setReactivationFee(double value)
{
    m_Reactivation_fee = value;
    
}
utility::string_t SubscriptionPlanResource::getReactivationSku() const
{
    return m_Reactivation_sku;
}
void SubscriptionPlanResource::setReactivationSku(utility::string_t value)
{
    m_Reactivation_sku = value;
    m_Reactivation_skuIsSet = true;
}
bool SubscriptionPlanResource::reactivation_skuIsSet() const
{
    return m_Reactivation_skuIsSet;
}
void SubscriptionPlanResource::unsetReactivation_sku()
{
    m_Reactivation_skuIsSet = false;
}
double SubscriptionPlanResource::getRecurringFee() const
{
    return m_Recurring_fee;
}
void SubscriptionPlanResource::setRecurringFee(double value)
{
    m_Recurring_fee = value;
    
}
utility::string_t SubscriptionPlanResource::getRecurringSku() const
{
    return m_Recurring_sku;
}
void SubscriptionPlanResource::setRecurringSku(utility::string_t value)
{
    m_Recurring_sku = value;
    m_Recurring_skuIsSet = true;
}
bool SubscriptionPlanResource::recurring_skuIsSet() const
{
    return m_Recurring_skuIsSet;
}
void SubscriptionPlanResource::unsetRecurring_sku()
{
    m_Recurring_skuIsSet = false;
}
int64_t SubscriptionPlanResource::getStartDate() const
{
    return m_Start_date;
}
void SubscriptionPlanResource::setStartDate(int64_t value)
{
    m_Start_date = value;
    m_Start_dateIsSet = true;
}
bool SubscriptionPlanResource::start_dateIsSet() const
{
    return m_Start_dateIsSet;
}
void SubscriptionPlanResource::unsetStart_date()
{
    m_Start_dateIsSet = false;
}

}
}
}
}

