/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Order.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Order::Order()
{
    m_Ascending = false;
    m_AscendingIsSet = false;
    m_Direction = U("");
    m_DirectionIsSet = false;
    m_Ignore_case = false;
    m_Ignore_caseIsSet = false;
    m_Null_handling = U("");
    m_Null_handlingIsSet = false;
    m_Property = U("");
    m_PropertyIsSet = false;
    
}

Order::~Order()
{
}

void Order::validate()
{
    // TODO: implement validation
}

web::json::value Order::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_AscendingIsSet)
    {
        val[U("ascending")] = ModelBase::toJson(m_Ascending);
    }
    if(m_DirectionIsSet)
    {
        val[U("direction")] = ModelBase::toJson(m_Direction);
    }
    if(m_Ignore_caseIsSet)
    {
        val[U("ignore_case")] = ModelBase::toJson(m_Ignore_case);
    }
    if(m_Null_handlingIsSet)
    {
        val[U("null_handling")] = ModelBase::toJson(m_Null_handling);
    }
    if(m_PropertyIsSet)
    {
        val[U("property")] = ModelBase::toJson(m_Property);
    }
    

    return val;
}

void Order::fromJson(web::json::value& val)
{
    if(val.has_field(U("ascending")))
    {
        setAscending(ModelBase::boolFromJson(val[U("ascending")]));
    }
    if(val.has_field(U("direction")))
    {
        setDirection(ModelBase::stringFromJson(val[U("direction")]));
        
    }
    if(val.has_field(U("ignore_case")))
    {
        setIgnoreCase(ModelBase::boolFromJson(val[U("ignore_case")]));
    }
    if(val.has_field(U("null_handling")))
    {
        setNullHandling(ModelBase::stringFromJson(val[U("null_handling")]));
        
    }
    if(val.has_field(U("property")))
    {
        setProperty(ModelBase::stringFromJson(val[U("property")]));
        
    }
    
}

void Order::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_AscendingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ascending"), m_Ascending));
    }
    if(m_DirectionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("direction"), m_Direction));
        
    }
    if(m_Ignore_caseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("ignore_case"), m_Ignore_case));
    }
    if(m_Null_handlingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("null_handling"), m_Null_handling));
        
    }
    if(m_PropertyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("property"), m_Property));
        
    }
    
}

void Order::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("ascending")))
    {
        setAscending(ModelBase::boolFromHttpContent(multipart->getContent(U("ascending"))));
    }
    if(multipart->hasContent(U("direction")))
    {
        setDirection(ModelBase::stringFromHttpContent(multipart->getContent(U("direction"))));
        
    }
    if(multipart->hasContent(U("ignore_case")))
    {
        setIgnoreCase(ModelBase::boolFromHttpContent(multipart->getContent(U("ignore_case"))));
    }
    if(multipart->hasContent(U("null_handling")))
    {
        setNullHandling(ModelBase::stringFromHttpContent(multipart->getContent(U("null_handling"))));
        
    }
    if(multipart->hasContent(U("property")))
    {
        setProperty(ModelBase::stringFromHttpContent(multipart->getContent(U("property"))));
        
    }
    
}


bool Order::getAscending() const
{
    return m_Ascending;
}
void Order::setAscending(bool value)
{
    m_Ascending = value;
    m_AscendingIsSet = true;
}
bool Order::ascendingIsSet() const
{
    return m_AscendingIsSet;
}
void Order::unsetAscending()
{
    m_AscendingIsSet = false;
}
utility::string_t Order::getDirection() const
{
    return m_Direction;
}
void Order::setDirection(utility::string_t value)
{
    m_Direction = value;
    m_DirectionIsSet = true;
}
bool Order::directionIsSet() const
{
    return m_DirectionIsSet;
}
void Order::unsetDirection()
{
    m_DirectionIsSet = false;
}
bool Order::getIgnoreCase() const
{
    return m_Ignore_case;
}
void Order::setIgnoreCase(bool value)
{
    m_Ignore_case = value;
    m_Ignore_caseIsSet = true;
}
bool Order::ignore_caseIsSet() const
{
    return m_Ignore_caseIsSet;
}
void Order::unsetIgnore_case()
{
    m_Ignore_caseIsSet = false;
}
utility::string_t Order::getNullHandling() const
{
    return m_Null_handling;
}
void Order::setNullHandling(utility::string_t value)
{
    m_Null_handling = value;
    m_Null_handlingIsSet = true;
}
bool Order::null_handlingIsSet() const
{
    return m_Null_handlingIsSet;
}
void Order::unsetNull_handling()
{
    m_Null_handlingIsSet = false;
}
utility::string_t Order::getProperty() const
{
    return m_Property;
}
void Order::setProperty(utility::string_t value)
{
    m_Property = value;
    m_PropertyIsSet = true;
}
bool Order::propertyIsSet() const
{
    return m_PropertyIsSet;
}
void Order::unsetProperty()
{
    m_PropertyIsSet = false;
}

}
}
}
}

