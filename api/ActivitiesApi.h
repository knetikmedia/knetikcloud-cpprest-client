/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * ActivitiesApi.h
 *
 * 
 */

#ifndef ActivitiesApi_H_
#define ActivitiesApi_H_


#include "ApiClient.h"

#include "ActivityOccurrenceCreationFailure.h"
#include "ActivityOccurrenceResource.h"
#include "ActivityOccurrenceResults.h"
#include "ActivityOccurrenceResultsResource.h"
#include "ActivityResource.h"
#include "CreateActivityOccurrenceRequest.h"
#include "PageResource«ActivityOccurrenceResource».h"
#include "PageResource«BareActivityResource».h"
#include "PageResource«TemplateResource».h"
#include "Result.h"
#include "TemplateResource.h"
#include <cpprest/details/basic_types.h>

namespace com {
namespace knetikcloud {
namespace client {
namespace api {

using namespace com::knetikcloud::client::model;

class  ActivitiesApi
{
public:
    ActivitiesApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~ActivitiesApi();
    /// <summary>
    /// Create an activity
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="activityResource">The activity resource object (optional)</param>
    pplx::task<std::shared_ptr<ActivityResource>> createActivity(std::shared_ptr<ActivityResource> activityResource);
    /// <summary>
    /// Create a new activity occurrence. Ex: start a game
    /// </summary>
    /// <remarks>
    /// Has to enforce extra rules if not used as an admin
    /// </remarks>
    /// <param name="test">if true, indicates that the occurrence should NOT be created. This can be used to test for eligibility and valid settings (optional, default to false)</param>/// <param name="activityOccurrenceResource">The activity occurrence object (optional)</param>
    pplx::task<std::shared_ptr<ActivityOccurrenceResource>> createActivityOccurrence(bool test, std::shared_ptr<CreateActivityOccurrenceRequest> activityOccurrenceResource);
    /// <summary>
    /// Create a activity template
    /// </summary>
    /// <remarks>
    /// Activity Templates define a type of activity and the properties they have
    /// </remarks>
    /// <param name="activityTemplateResource">The activity template resource object (optional)</param>
    pplx::task<std::shared_ptr<TemplateResource>> createActivityTemplate(std::shared_ptr<TemplateResource> activityTemplateResource);
    /// <summary>
    /// Delete an activity
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">The id of the activity</param>
    pplx::task<void> deleteActivity(int64_t id);
    /// <summary>
    /// Delete a activity template
    /// </summary>
    /// <remarks>
    /// If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
    /// </remarks>
    /// <param name="id">The id of the template</param>/// <param name="cascade">The value needed to delete used templates (optional)</param>
    pplx::task<void> deleteActivityTemplate(utility::string_t id, utility::string_t cascade);
    /// <summary>
    /// List activity definitions
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="filterTemplate">Filter for activities that are templates, or specifically not if false (optional)</param>/// <param name="filterName">Filter for activities that have a name starting with specified string (optional)</param>/// <param name="filterId">Filter for activities with an id in the given comma separated list of ids (optional)</param>/// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
    pplx::task<std::shared_ptr<PageResource«BareActivityResource»>> getActivities(bool filterTemplate, utility::string_t filterName, utility::string_t filterId, int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// Get a single activity
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">The id of the activity</param>
    pplx::task<std::shared_ptr<ActivityResource>> getActivity(int64_t id);
    /// <summary>
    /// Load a single activity occurrence details
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="activityOccurrenceId">The id of the activity occurrence</param>
    pplx::task<std::shared_ptr<ActivityOccurrenceResource>> getActivityOccurrenceDetails(int64_t activityOccurrenceId);
    /// <summary>
    /// Get a single activity template
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">The id of the template</param>
    pplx::task<std::shared_ptr<TemplateResource>> getActivityTemplate(utility::string_t id);
    /// <summary>
    /// List and search activity templates
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
    pplx::task<std::shared_ptr<PageResource«TemplateResource»>> getActivityTemplates(int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// List activity occurrences
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="filterActivity">Filter for occurrences of the given activity ID (optional)</param>/// <param name="filterStatus">Filter for occurrences of the given activity ID (optional)</param>/// <param name="filterEvent">Filter for occurrences played during the given event (optional)</param>/// <param name="filterChallenge">Filter for occurrences played within the given challenge (optional)</param>/// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
    pplx::task<std::shared_ptr<PageResource«ActivityOccurrenceResource»>> listActivityOccurrences(utility::string_t filterActivity, utility::string_t filterStatus, int32_t filterEvent, int32_t filterChallenge, int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// Sets the status of an activity occurrence to FINISHED and logs metrics
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="activityOccurrenceId">The id of the activity occurrence</param>/// <param name="activityOccurrenceResults">The activity occurrence object (optional)</param>
    pplx::task<std::shared_ptr<ActivityOccurrenceResults>> setActivityOccurrenceResults(int64_t activityOccurrenceId, std::shared_ptr<ActivityOccurrenceResultsResource> activityOccurrenceResults);
    /// <summary>
    /// Update an activity
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">The id of the activity</param>/// <param name="activityResource">The activity resource object (optional)</param>
    pplx::task<std::shared_ptr<ActivityResource>> updateActivity(int64_t id, std::shared_ptr<ActivityResource> activityResource);
    /// <summary>
    /// Updated the status of an activity occurrence
    /// </summary>
    /// <remarks>
    /// If setting to &#39;FINISHED&#39; reward will be run based on current metrics that have been recorded already. Aternatively, see results endpoint to finish and record all metrics at once.
    /// </remarks>
    /// <param name="activityOccurrenceId">The id of the activity occurrence</param>/// <param name="activityOccurrenceStatus">The activity occurrence status object (optional)</param>
    pplx::task<void> updateActivityOccurrence(int64_t activityOccurrenceId, utility::string_t activityOccurrenceStatus);
    /// <summary>
    /// Update an activity template
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">The id of the template</param>/// <param name="activityTemplateResource">The activity template resource object (optional)</param>
    pplx::task<std::shared_ptr<TemplateResource>> updateActivityTemplate(utility::string_t id, std::shared_ptr<TemplateResource> activityTemplateResource);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ActivitiesApi_H_ */

