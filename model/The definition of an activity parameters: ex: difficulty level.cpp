/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "The definition of an activity parameters: ex: difficulty level.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

The definition of an activity parameters: ex: difficulty level::The definition of an activity parameters: ex: difficulty level()
{
    m_Advanced_option = false;
    m_Advanced_optionIsSet = false;
    m_Default_value = U("");
    m_Description = U("");
    m_DescriptionIsSet = false;
    m_Key = U("");
    m_Name = U("");
    
}

The definition of an activity parameters: ex: difficulty level::~The definition of an activity parameters: ex: difficulty level()
{
}

void The definition of an activity parameters: ex: difficulty level::validate()
{
    // TODO: implement validation
}

web::json::value The definition of an activity parameters: ex: difficulty level::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Advanced_optionIsSet)
    {
        val[U("advanced_option")] = ModelBase::toJson(m_Advanced_option);
    }
    val[U("default_value")] = ModelBase::toJson(m_Default_value);
    if(m_DescriptionIsSet)
    {
        val[U("description")] = ModelBase::toJson(m_Description);
    }
    val[U("key")] = ModelBase::toJson(m_Key);
    val[U("name")] = ModelBase::toJson(m_Name);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Options )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[U("options")] = web::json::value::array(jsonArray);
            }
    

    return val;
}

void The definition of an activity parameters: ex: difficulty level::fromJson(web::json::value& val)
{
    if(val.has_field(U("advanced_option")))
    {
        setAdvancedOption(ModelBase::boolFromJson(val[U("advanced_option")]));
    }
    setDefaultValue(ModelBase::stringFromJson(val[U("default_value")]));
    if(val.has_field(U("description")))
    {
        setDescription(ModelBase::stringFromJson(val[U("description")]));
        
    }
    setKey(ModelBase::stringFromJson(val[U("key")]));
    setName(ModelBase::stringFromJson(val[U("name")]));
    {
        m_Options.clear();
        std::vector<web::json::value> jsonArray;
                for( auto& item : val[U("options")].as_array() )
        {
            
            if(item.is_null())
            {
                m_Options.push_back( std::shared_ptr<SettingOption>(nullptr) );
            }
            else
            {
                std::shared_ptr<SettingOption> newItem(new SettingOption());
                newItem->fromJson(item);
                m_Options.push_back( newItem );
            }
            
        }
    }
    
}

void The definition of an activity parameters: ex: difficulty level::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Advanced_optionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("advanced_option"), m_Advanced_option));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("default_value"), m_Default_value));
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("description"), m_Description));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("key"), m_Key));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Options )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + U("options"), web::json::value::array(jsonArray), U("application/json")));
            }
    
}

void The definition of an activity parameters: ex: difficulty level::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("advanced_option")))
    {
        setAdvancedOption(ModelBase::boolFromHttpContent(multipart->getContent(U("advanced_option"))));
    }
    setDefaultValue(ModelBase::stringFromHttpContent(multipart->getContent(U("default_value"))));
    if(multipart->hasContent(U("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("description"))));
        
    }
    setKey(ModelBase::stringFromHttpContent(multipart->getContent(U("key"))));
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    {
        m_Options.clear();
        
        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("options"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_Options.push_back( std::shared_ptr<SettingOption>(nullptr) );
            }
            else
            {
                std::shared_ptr<SettingOption> newItem(new SettingOption());
                newItem->fromJson(item);
                m_Options.push_back( newItem );
            }
            
        }
    }
    
}


bool The definition of an activity parameters: ex: difficulty level::getAdvancedOption() const
{
    return m_Advanced_option;
}
void The definition of an activity parameters: ex: difficulty level::setAdvancedOption(bool value)
{
    m_Advanced_option = value;
    m_Advanced_optionIsSet = true;
}
bool The definition of an activity parameters: ex: difficulty level::advanced_optionIsSet() const
{
    return m_Advanced_optionIsSet;
}
void The definition of an activity parameters: ex: difficulty level::unsetAdvanced_option()
{
    m_Advanced_optionIsSet = false;
}
utility::string_t The definition of an activity parameters: ex: difficulty level::getDefaultValue() const
{
    return m_Default_value;
}
void The definition of an activity parameters: ex: difficulty level::setDefaultValue(utility::string_t value)
{
    m_Default_value = value;
    
}
utility::string_t The definition of an activity parameters: ex: difficulty level::getDescription() const
{
    return m_Description;
}
void The definition of an activity parameters: ex: difficulty level::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool The definition of an activity parameters: ex: difficulty level::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void The definition of an activity parameters: ex: difficulty level::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t The definition of an activity parameters: ex: difficulty level::getKey() const
{
    return m_Key;
}
void The definition of an activity parameters: ex: difficulty level::setKey(utility::string_t value)
{
    m_Key = value;
    
}
utility::string_t The definition of an activity parameters: ex: difficulty level::getName() const
{
    return m_Name;
}
void The definition of an activity parameters: ex: difficulty level::setName(utility::string_t value)
{
    m_Name = value;
    
}
std::vector<std::shared_ptr<SettingOption>>& The definition of an activity parameters: ex: difficulty level::getOptions()
{
    return m_Options;
}

}
}
}
}

