/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * DevicesApi.h
 *
 * 
 */

#ifndef DevicesApi_H_
#define DevicesApi_H_


#include "ApiClient.h"

#include "DeviceResource.h"
#include "PageResource«DeviceResource».h"
#include "PageResource«TemplateResource».h"
#include "Result.h"
#include "SimpleUserResource.h"
#include "TemplateResource.h"
#include <vector>
#include <cpprest/details/basic_types.h>

namespace com {
namespace knetikcloud {
namespace client {
namespace api {

using namespace com::knetikcloud::client::model;

class  DevicesApi
{
public:
    DevicesApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~DevicesApi();
    /// <summary>
    /// Add device users
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="userResources">userResources</param>/// <param name="id">id</param>
    pplx::task<std::shared_ptr<DeviceResource>> addDeviceUsers(std::vector<std::shared_ptr<SimpleUserResource>> userResources, utility::string_t id);
    /// <summary>
    /// Create a device
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="device">device</param>
    pplx::task<std::shared_ptr<DeviceResource>> createDevice(std::shared_ptr<DeviceResource> device);
    /// <summary>
    /// Create a device template
    /// </summary>
    /// <remarks>
    /// Device Templates define a type of device and the properties they have
    /// </remarks>
    /// <param name="deviceTemplateResource">The device template resource object (optional)</param>
    pplx::task<std::shared_ptr<TemplateResource>> createDeviceTemplate(std::shared_ptr<TemplateResource> deviceTemplateResource);
    /// <summary>
    /// Delete a device
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">id</param>
    pplx::task<void> deleteDevice(utility::string_t id);
    /// <summary>
    /// Delete an device template
    /// </summary>
    /// <remarks>
    /// If cascade &#x3D; &#39;detach&#39;, it will force delete the template even if it&#39;s attached to other objects
    /// </remarks>
    /// <param name="id">The id of the template</param>/// <param name="cascade">The value needed to delete used templates (optional)</param>
    pplx::task<void> deleteDeviceTemplate(utility::string_t id, utility::string_t cascade);
    /// <summary>
    /// Delete a device user
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">The id of the device</param>/// <param name="userId">The user id of the device user</param>
    pplx::task<void> deleteDeviceUser(utility::string_t id, int32_t userId);
    /// <summary>
    /// Delete all device users
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">The id of the device</param>/// <param name="filterId">Filter for device users to delete with a user id in a given comma separated list of ids (optional)</param>
    pplx::task<void> deleteDeviceUsers(utility::string_t id, utility::string_t filterId);
    /// <summary>
    /// Get a single device
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">id</param>
    pplx::task<std::shared_ptr<DeviceResource>> getDevice(utility::string_t id);
    /// <summary>
    /// Get a single device template
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">The id of the template</param>
    pplx::task<std::shared_ptr<TemplateResource>> getDeviceTemplate(utility::string_t id);
    /// <summary>
    /// List and search device templates
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
    pplx::task<std::shared_ptr<PageResource«TemplateResource»>> getDeviceTemplates(int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// List and search devices
    /// </summary>
    /// <remarks>
    /// Get a list of devices with optional filtering
    /// </remarks>
    /// <param name="filterMake">Filter for devices with specified make (optional)</param>/// <param name="filterModel">Filter for devices with specified model (optional)</param>/// <param name="filterOs">Filter for devices with specified OS (optional)</param>/// <param name="filterSerial">Filter for devices with specified serial (optional)</param>/// <param name="filterType">Filter for devices with specified type (optional)</param>/// <param name="filterTag">A comma separated list without spaces to filter for devices with specified tags (matches any) (optional)</param>/// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
    pplx::task<std::shared_ptr<PageResource«DeviceResource»>> getDevices(utility::string_t filterMake, utility::string_t filterModel, utility::string_t filterOs, utility::string_t filterSerial, utility::string_t filterType, utility::string_t filterTag, int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// Update a device
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="device">device</param>/// <param name="id">id</param>
    pplx::task<std::shared_ptr<DeviceResource>> updateDevice(std::shared_ptr<DeviceResource> device, utility::string_t id);
    /// <summary>
    /// Update an device template
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">The id of the template</param>/// <param name="deviceTemplateResource">The device template resource object (optional)</param>
    pplx::task<std::shared_ptr<TemplateResource>> updateDeviceTemplate(utility::string_t id, std::shared_ptr<TemplateResource> deviceTemplateResource);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* DevicesApi_H_ */

