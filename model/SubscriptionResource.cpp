/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SubscriptionResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

SubscriptionResource::SubscriptionResource()
{
    m_Additional_propertiesIsSet = false;
    m_Availability = U("");
    m_AvailabilityIsSet = false;
    m_BehaviorsIsSet = false;
    m_Category = U("");
    m_CategoryIsSet = false;
    m_Consolidation_day_of_month = 0;
    m_Consolidation_day_of_monthIsSet = false;
    m_Created_date = 0L;
    m_Created_dateIsSet = false;
    m_Displayable = false;
    m_DisplayableIsSet = false;
    m_Geo_country_listIsSet = false;
    m_Geo_policy_type = U("");
    m_Geo_policy_typeIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_Long_description = U("");
    m_Long_descriptionIsSet = false;
    m_Name = U("");
    m_PlansIsSet = false;
    m_Short_description = U("");
    m_Short_descriptionIsSet = false;
    m_Sort = 0;
    m_SortIsSet = false;
    m_Store_end = 0L;
    m_Store_endIsSet = false;
    m_Store_start = 0L;
    m_Store_startIsSet = false;
    m_TagsIsSet = false;
    m_Template = U("");
    m_TemplateIsSet = false;
    m_Unique_key = U("");
    m_Unique_keyIsSet = false;
    m_Updated_date = 0L;
    m_Updated_dateIsSet = false;
    m_Vendor_id = 0;
}

SubscriptionResource::~SubscriptionResource()
{
}

void SubscriptionResource::validate()
{
    // TODO: implement validation
}

web::json::value SubscriptionResource::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Additional_properties )
        {
            web::json::value tmp = web::json::value::object();
            tmp[U("key")] = ModelBase::toJson(item.first);
            tmp[U("value")] = ModelBase::toJson(item.second);
            jsonArray.push_back(tmp);
        }
        if(jsonArray.size() > 0)
        {
            val[U("additional_properties")] = web::json::value::array(jsonArray);
        }
    }
    if(m_AvailabilityIsSet)
    {
        val[U("availability")] = ModelBase::toJson(m_Availability);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Behaviors )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("behaviors")] = web::json::value::array(jsonArray);
        }
    }
    if(m_CategoryIsSet)
    {
        val[U("category")] = ModelBase::toJson(m_Category);
    }
    if(m_Consolidation_day_of_monthIsSet)
    {
        val[U("consolidation_day_of_month")] = ModelBase::toJson(m_Consolidation_day_of_month);
    }
    if(m_Created_dateIsSet)
    {
        val[U("created_date")] = ModelBase::toJson(m_Created_date);
    }
    if(m_DisplayableIsSet)
    {
        val[U("displayable")] = ModelBase::toJson(m_Displayable);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Geo_country_list )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("geo_country_list")] = web::json::value::array(jsonArray);
        }
    }
    if(m_Geo_policy_typeIsSet)
    {
        val[U("geo_policy_type")] = ModelBase::toJson(m_Geo_policy_type);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_Long_descriptionIsSet)
    {
        val[U("long_description")] = ModelBase::toJson(m_Long_description);
    }
    val[U("name")] = ModelBase::toJson(m_Name);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Plans )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("plans")] = web::json::value::array(jsonArray);
        }
    }
    if(m_Short_descriptionIsSet)
    {
        val[U("short_description")] = ModelBase::toJson(m_Short_description);
    }
    if(m_SortIsSet)
    {
        val[U("sort")] = ModelBase::toJson(m_Sort);
    }
    if(m_Store_endIsSet)
    {
        val[U("store_end")] = ModelBase::toJson(m_Store_end);
    }
    if(m_Store_startIsSet)
    {
        val[U("store_start")] = ModelBase::toJson(m_Store_start);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("tags")] = web::json::value::array(jsonArray);
        }
    }
    if(m_TemplateIsSet)
    {
        val[U("template")] = ModelBase::toJson(m_Template);
    }
    if(m_Unique_keyIsSet)
    {
        val[U("unique_key")] = ModelBase::toJson(m_Unique_key);
    }
    if(m_Updated_dateIsSet)
    {
        val[U("updated_date")] = ModelBase::toJson(m_Updated_date);
    }
    val[U("vendor_id")] = ModelBase::toJson(m_Vendor_id);

    return val;
}

void SubscriptionResource::fromJson(web::json::value& val)
{
    {
        m_Additional_properties.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("additional_properties")))
        {
        for( auto& item : val[U("additional_properties")].as_array() )
        {  
            utility::string_t key;
            if(item.has_field(U("key")))
            {
                key = ModelBase::stringFromJson(item[U("key")]);
            }
            if(item.is_null())
            {
                m_Additional_properties.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, std::shared_ptr<Property>(nullptr) ));
            }
            else
            {
                std::shared_ptr<Property> newItem(new Property());
                newItem->fromJson(item[U("value")]);
                m_Additional_properties.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, newItem ));
            }
        }
        }
    }
    if(val.has_field(U("availability")))
    {
        setAvailability(ModelBase::stringFromJson(val[U("availability")]));
    }
    {
        m_Behaviors.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("behaviors")))
        {
        for( auto& item : val[U("behaviors")].as_array() )
        {
            if(item.is_null())
            {
                m_Behaviors.push_back( std::shared_ptr<Behavior>(nullptr) );
            }
            else
            {
                std::shared_ptr<Behavior> newItem(new Behavior());
                newItem->fromJson(item);
                m_Behaviors.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(U("category")))
    {
        setCategory(ModelBase::stringFromJson(val[U("category")]));
    }
    if(val.has_field(U("consolidation_day_of_month")))
    {
        setConsolidationDayOfMonth(ModelBase::int32_tFromJson(val[U("consolidation_day_of_month")]));
    }
    if(val.has_field(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromJson(val[U("created_date")]));
    }
    if(val.has_field(U("displayable")))
    {
        setDisplayable(ModelBase::boolFromJson(val[U("displayable")]));
    }
    {
        m_Geo_country_list.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("geo_country_list")))
        {
        for( auto& item : val[U("geo_country_list")].as_array() )
        {
            m_Geo_country_list.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(val.has_field(U("geo_policy_type")))
    {
        setGeoPolicyType(ModelBase::stringFromJson(val[U("geo_policy_type")]));
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int32_tFromJson(val[U("id")]));
    }
    if(val.has_field(U("long_description")))
    {
        setLongDescription(ModelBase::stringFromJson(val[U("long_description")]));
    }
    setName(ModelBase::stringFromJson(val[U("name")]));
    {
        m_Plans.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("plans")))
        {
        for( auto& item : val[U("plans")].as_array() )
        {
            if(item.is_null())
            {
                m_Plans.push_back( std::shared_ptr<SubscriptionPlanResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<SubscriptionPlanResource> newItem(new SubscriptionPlanResource());
                newItem->fromJson(item);
                m_Plans.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(U("short_description")))
    {
        setShortDescription(ModelBase::stringFromJson(val[U("short_description")]));
    }
    if(val.has_field(U("sort")))
    {
        setSort(ModelBase::int32_tFromJson(val[U("sort")]));
    }
    if(val.has_field(U("store_end")))
    {
        setStoreEnd(ModelBase::int64_tFromJson(val[U("store_end")]));
    }
    if(val.has_field(U("store_start")))
    {
        setStoreStart(ModelBase::int64_tFromJson(val[U("store_start")]));
    }
    {
        m_Tags.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("tags")))
        {
        for( auto& item : val[U("tags")].as_array() )
        {
            m_Tags.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(val.has_field(U("template")))
    {
        setTemplate(ModelBase::stringFromJson(val[U("template")]));
    }
    if(val.has_field(U("unique_key")))
    {
        setUniqueKey(ModelBase::stringFromJson(val[U("unique_key")]));
    }
    if(val.has_field(U("updated_date")))
    {
        setUpdatedDate(ModelBase::int64_tFromJson(val[U("updated_date")]));
    }
    setVendorId(ModelBase::int32_tFromJson(val[U("vendor_id")]));
}

void SubscriptionResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Additional_properties )
        {
            web::json::value tmp = web::json::value::object();
            tmp[U("key")] = ModelBase::toJson(item.first);
            tmp[U("value")] = ModelBase::toJson(item.second);
            jsonArray.push_back(tmp);
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("additional_properties"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_AvailabilityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("availability"), m_Availability));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Behaviors )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("behaviors"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_CategoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("category"), m_Category));
        
    }
    if(m_Consolidation_day_of_monthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("consolidation_day_of_month"), m_Consolidation_day_of_month));
    }
    if(m_Created_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("created_date"), m_Created_date));
    }
    if(m_DisplayableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("displayable"), m_Displayable));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Geo_country_list )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("geo_country_list"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_Geo_policy_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("geo_policy_type"), m_Geo_policy_type));
        
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    if(m_Long_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("long_description"), m_Long_description));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Plans )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("plans"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_Short_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("short_description"), m_Short_description));
        
    }
    if(m_SortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("sort"), m_Sort));
    }
    if(m_Store_endIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("store_end"), m_Store_end));
    }
    if(m_Store_startIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("store_start"), m_Store_start));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("tags"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_TemplateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("template"), m_Template));
        
    }
    if(m_Unique_keyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("unique_key"), m_Unique_key));
        
    }
    if(m_Updated_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("updated_date"), m_Updated_date));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("vendor_id"), m_Vendor_id));
}

void SubscriptionResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        m_Additional_properties.clear();
        if(multipart->hasContent(U("additional_properties")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("additional_properties"))));
        for( auto& item : jsonArray.as_array() )
        {
            utility::string_t key;
            if(item.has_field(U("key")))
            {
                key = ModelBase::stringFromJson(item[U("key")]);
            }
            if(item.is_null())
            {
                m_Additional_properties.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, std::shared_ptr<Property>(nullptr) ));
            }
            else
            {
                std::shared_ptr<Property> newItem(new Property());
                newItem->fromJson(item[U("value")]);
                m_Additional_properties.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, newItem ));
            }
        }
        }
    }
    if(multipart->hasContent(U("availability")))
    {
        setAvailability(ModelBase::stringFromHttpContent(multipart->getContent(U("availability"))));
    }
    {
        m_Behaviors.clear();
        if(multipart->hasContent(U("behaviors")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("behaviors"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Behaviors.push_back( std::shared_ptr<Behavior>(nullptr) );
            }
            else
            {
                std::shared_ptr<Behavior> newItem(new Behavior());
                newItem->fromJson(item);
                m_Behaviors.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(U("category")))
    {
        setCategory(ModelBase::stringFromHttpContent(multipart->getContent(U("category"))));
    }
    if(multipart->hasContent(U("consolidation_day_of_month")))
    {
        setConsolidationDayOfMonth(ModelBase::int32_tFromHttpContent(multipart->getContent(U("consolidation_day_of_month"))));
    }
    if(multipart->hasContent(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("created_date"))));
    }
    if(multipart->hasContent(U("displayable")))
    {
        setDisplayable(ModelBase::boolFromHttpContent(multipart->getContent(U("displayable"))));
    }
    {
        m_Geo_country_list.clear();
        if(multipart->hasContent(U("geo_country_list")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("geo_country_list"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Geo_country_list.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(multipart->hasContent(U("geo_policy_type")))
    {
        setGeoPolicyType(ModelBase::stringFromHttpContent(multipart->getContent(U("geo_policy_type"))));
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("long_description")))
    {
        setLongDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("long_description"))));
    }
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    {
        m_Plans.clear();
        if(multipart->hasContent(U("plans")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("plans"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Plans.push_back( std::shared_ptr<SubscriptionPlanResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<SubscriptionPlanResource> newItem(new SubscriptionPlanResource());
                newItem->fromJson(item);
                m_Plans.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(U("short_description")))
    {
        setShortDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("short_description"))));
    }
    if(multipart->hasContent(U("sort")))
    {
        setSort(ModelBase::int32_tFromHttpContent(multipart->getContent(U("sort"))));
    }
    if(multipart->hasContent(U("store_end")))
    {
        setStoreEnd(ModelBase::int64_tFromHttpContent(multipart->getContent(U("store_end"))));
    }
    if(multipart->hasContent(U("store_start")))
    {
        setStoreStart(ModelBase::int64_tFromHttpContent(multipart->getContent(U("store_start"))));
    }
    {
        m_Tags.clear();
        if(multipart->hasContent(U("tags")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("tags"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Tags.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(multipart->hasContent(U("template")))
    {
        setTemplate(ModelBase::stringFromHttpContent(multipart->getContent(U("template"))));
    }
    if(multipart->hasContent(U("unique_key")))
    {
        setUniqueKey(ModelBase::stringFromHttpContent(multipart->getContent(U("unique_key"))));
    }
    if(multipart->hasContent(U("updated_date")))
    {
        setUpdatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("updated_date"))));
    }
    setVendorId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("vendor_id"))));
}

std::map<utility::string_t, std::shared_ptr<Property>>& SubscriptionResource::getAdditionalProperties()
{
    return m_Additional_properties;
}

void SubscriptionResource::setAdditionalProperties(std::map<utility::string_t, std::shared_ptr<Property>> value)
{
    m_Additional_properties = value;
    m_Additional_propertiesIsSet = true;
}
bool SubscriptionResource::additionalPropertiesIsSet() const
{
    return m_Additional_propertiesIsSet;
}

void SubscriptionResource::unsetAdditional_properties()
{
    m_Additional_propertiesIsSet = false;
}

utility::string_t SubscriptionResource::getAvailability() const
{
    return m_Availability;
}


void SubscriptionResource::setAvailability(utility::string_t value)
{
    m_Availability = value;
    m_AvailabilityIsSet = true;
}
bool SubscriptionResource::availabilityIsSet() const
{
    return m_AvailabilityIsSet;
}

void SubscriptionResource::unsetAvailability()
{
    m_AvailabilityIsSet = false;
}

std::vector<std::shared_ptr<Behavior>>& SubscriptionResource::getBehaviors()
{
    return m_Behaviors;
}

void SubscriptionResource::setBehaviors(std::vector<std::shared_ptr<Behavior>> value)
{
    m_Behaviors = value;
    m_BehaviorsIsSet = true;
}
bool SubscriptionResource::behaviorsIsSet() const
{
    return m_BehaviorsIsSet;
}

void SubscriptionResource::unsetBehaviors()
{
    m_BehaviorsIsSet = false;
}

utility::string_t SubscriptionResource::getCategory() const
{
    return m_Category;
}


void SubscriptionResource::setCategory(utility::string_t value)
{
    m_Category = value;
    m_CategoryIsSet = true;
}
bool SubscriptionResource::categoryIsSet() const
{
    return m_CategoryIsSet;
}

void SubscriptionResource::unsetCategory()
{
    m_CategoryIsSet = false;
}

int32_t SubscriptionResource::getConsolidationDayOfMonth() const
{
    return m_Consolidation_day_of_month;
}


void SubscriptionResource::setConsolidationDayOfMonth(int32_t value)
{
    m_Consolidation_day_of_month = value;
    m_Consolidation_day_of_monthIsSet = true;
}
bool SubscriptionResource::consolidationDayOfMonthIsSet() const
{
    return m_Consolidation_day_of_monthIsSet;
}

void SubscriptionResource::unsetConsolidation_day_of_month()
{
    m_Consolidation_day_of_monthIsSet = false;
}

int64_t SubscriptionResource::getCreatedDate() const
{
    return m_Created_date;
}


void SubscriptionResource::setCreatedDate(int64_t value)
{
    m_Created_date = value;
    m_Created_dateIsSet = true;
}
bool SubscriptionResource::createdDateIsSet() const
{
    return m_Created_dateIsSet;
}

void SubscriptionResource::unsetCreated_date()
{
    m_Created_dateIsSet = false;
}

bool SubscriptionResource::getDisplayable() const
{
    return m_Displayable;
}


void SubscriptionResource::setDisplayable(bool value)
{
    m_Displayable = value;
    m_DisplayableIsSet = true;
}
bool SubscriptionResource::displayableIsSet() const
{
    return m_DisplayableIsSet;
}

void SubscriptionResource::unsetDisplayable()
{
    m_DisplayableIsSet = false;
}

std::vector<utility::string_t>& SubscriptionResource::getGeoCountryList()
{
    return m_Geo_country_list;
}

void SubscriptionResource::setGeoCountryList(std::vector<utility::string_t> value)
{
    m_Geo_country_list = value;
    m_Geo_country_listIsSet = true;
}
bool SubscriptionResource::geoCountryListIsSet() const
{
    return m_Geo_country_listIsSet;
}

void SubscriptionResource::unsetGeo_country_list()
{
    m_Geo_country_listIsSet = false;
}

utility::string_t SubscriptionResource::getGeoPolicyType() const
{
    return m_Geo_policy_type;
}


void SubscriptionResource::setGeoPolicyType(utility::string_t value)
{
    m_Geo_policy_type = value;
    m_Geo_policy_typeIsSet = true;
}
bool SubscriptionResource::geoPolicyTypeIsSet() const
{
    return m_Geo_policy_typeIsSet;
}

void SubscriptionResource::unsetGeo_policy_type()
{
    m_Geo_policy_typeIsSet = false;
}

int32_t SubscriptionResource::getId() const
{
    return m_Id;
}


void SubscriptionResource::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool SubscriptionResource::idIsSet() const
{
    return m_IdIsSet;
}

void SubscriptionResource::unsetId()
{
    m_IdIsSet = false;
}

utility::string_t SubscriptionResource::getLongDescription() const
{
    return m_Long_description;
}


void SubscriptionResource::setLongDescription(utility::string_t value)
{
    m_Long_description = value;
    m_Long_descriptionIsSet = true;
}
bool SubscriptionResource::longDescriptionIsSet() const
{
    return m_Long_descriptionIsSet;
}

void SubscriptionResource::unsetLong_description()
{
    m_Long_descriptionIsSet = false;
}

utility::string_t SubscriptionResource::getName() const
{
    return m_Name;
}


void SubscriptionResource::setName(utility::string_t value)
{
    m_Name = value;
    
}
std::vector<std::shared_ptr<SubscriptionPlanResource>>& SubscriptionResource::getPlans()
{
    return m_Plans;
}

void SubscriptionResource::setPlans(std::vector<std::shared_ptr<SubscriptionPlanResource>> value)
{
    m_Plans = value;
    m_PlansIsSet = true;
}
bool SubscriptionResource::plansIsSet() const
{
    return m_PlansIsSet;
}

void SubscriptionResource::unsetPlans()
{
    m_PlansIsSet = false;
}

utility::string_t SubscriptionResource::getShortDescription() const
{
    return m_Short_description;
}


void SubscriptionResource::setShortDescription(utility::string_t value)
{
    m_Short_description = value;
    m_Short_descriptionIsSet = true;
}
bool SubscriptionResource::shortDescriptionIsSet() const
{
    return m_Short_descriptionIsSet;
}

void SubscriptionResource::unsetShort_description()
{
    m_Short_descriptionIsSet = false;
}

int32_t SubscriptionResource::getSort() const
{
    return m_Sort;
}


void SubscriptionResource::setSort(int32_t value)
{
    m_Sort = value;
    m_SortIsSet = true;
}
bool SubscriptionResource::sortIsSet() const
{
    return m_SortIsSet;
}

void SubscriptionResource::unsetSort()
{
    m_SortIsSet = false;
}

int64_t SubscriptionResource::getStoreEnd() const
{
    return m_Store_end;
}


void SubscriptionResource::setStoreEnd(int64_t value)
{
    m_Store_end = value;
    m_Store_endIsSet = true;
}
bool SubscriptionResource::storeEndIsSet() const
{
    return m_Store_endIsSet;
}

void SubscriptionResource::unsetStore_end()
{
    m_Store_endIsSet = false;
}

int64_t SubscriptionResource::getStoreStart() const
{
    return m_Store_start;
}


void SubscriptionResource::setStoreStart(int64_t value)
{
    m_Store_start = value;
    m_Store_startIsSet = true;
}
bool SubscriptionResource::storeStartIsSet() const
{
    return m_Store_startIsSet;
}

void SubscriptionResource::unsetStore_start()
{
    m_Store_startIsSet = false;
}

std::vector<utility::string_t>& SubscriptionResource::getTags()
{
    return m_Tags;
}

void SubscriptionResource::setTags(std::vector<utility::string_t> value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}
bool SubscriptionResource::tagsIsSet() const
{
    return m_TagsIsSet;
}

void SubscriptionResource::unsetTags()
{
    m_TagsIsSet = false;
}

utility::string_t SubscriptionResource::getTemplate() const
{
    return m_Template;
}


void SubscriptionResource::setTemplate(utility::string_t value)
{
    m_Template = value;
    m_TemplateIsSet = true;
}
bool SubscriptionResource::templateIsSet() const
{
    return m_TemplateIsSet;
}

void SubscriptionResource::unsetTemplate()
{
    m_TemplateIsSet = false;
}

utility::string_t SubscriptionResource::getUniqueKey() const
{
    return m_Unique_key;
}


void SubscriptionResource::setUniqueKey(utility::string_t value)
{
    m_Unique_key = value;
    m_Unique_keyIsSet = true;
}
bool SubscriptionResource::uniqueKeyIsSet() const
{
    return m_Unique_keyIsSet;
}

void SubscriptionResource::unsetUnique_key()
{
    m_Unique_keyIsSet = false;
}

int64_t SubscriptionResource::getUpdatedDate() const
{
    return m_Updated_date;
}


void SubscriptionResource::setUpdatedDate(int64_t value)
{
    m_Updated_date = value;
    m_Updated_dateIsSet = true;
}
bool SubscriptionResource::updatedDateIsSet() const
{
    return m_Updated_dateIsSet;
}

void SubscriptionResource::unsetUpdated_date()
{
    m_Updated_dateIsSet = false;
}

int32_t SubscriptionResource::getVendorId() const
{
    return m_Vendor_id;
}


void SubscriptionResource::setVendorId(int32_t value)
{
    m_Vendor_id = value;
    
}
}
}
}
}

