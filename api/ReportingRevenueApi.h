/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * ReportingRevenueApi.h
 *
 * 
 */

#ifndef ReportingRevenueApi_H_
#define ReportingRevenueApi_H_


#include "ApiClient.h"

#include "PageResource«RevenueCountryReportResource».h"
#include "PageResource«RevenueProductReportResource».h"
#include "Result.h"
#include "RevenueReportResource.h"
#include <cpprest/details/basic_types.h>

namespace com {
namespace knetikcloud {
namespace client {
namespace api {

using namespace com::knetikcloud::client::model;

class  ReportingRevenueApi
{
public:
    ReportingRevenueApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~ReportingRevenueApi();
    /// <summary>
    /// Get item revenue info
    /// </summary>
    /// <remarks>
    /// Get basic info about revenue from sales of items and bundles (not subscriptions, shipping, etc), summed up within a time range
    /// </remarks>
    /// <param name="currencyCode">The code for a currency to get sales data for</param>/// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>/// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
    pplx::task<std::shared_ptr<RevenueReportResource>> getItemRevenue(utility::string_t currencyCode, int64_t startDate, int64_t endDate);
    /// <summary>
    /// Get refund revenue info
    /// </summary>
    /// <remarks>
    /// Get basic info about revenue loss from refunds (for all item types), summed up within a time range.
    /// </remarks>
    /// <param name="currencyCode">The code for a currency to get refund data for</param>/// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>/// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
    pplx::task<std::shared_ptr<RevenueReportResource>> getRefundRevenue(utility::string_t currencyCode, int64_t startDate, int64_t endDate);
    /// <summary>
    /// Get revenue info by country
    /// </summary>
    /// <remarks>
    /// Get basic info about revenue from sales of all types, summed up within a time range and split out by country. Sorted for largest revenue at the top
    /// </remarks>
    /// <param name="currencyCode">The code for a currency to get sales data for</param>/// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>/// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>/// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
    pplx::task<std::shared_ptr<PageResource«RevenueCountryReportResource»>> getRevenueByCountry(utility::string_t currencyCode, int64_t startDate, int64_t endDate, int32_t size, int32_t page);
    /// <summary>
    /// Get revenue info by item
    /// </summary>
    /// <remarks>
    /// Get basic info about revenue from sales of all types, summed up within a time range and split out by specific item. Sorted for largest revenue at the top
    /// </remarks>
    /// <param name="currencyCode">The code for a currency to get sales data for</param>/// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>/// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>/// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
    pplx::task<std::shared_ptr<PageResource«RevenueProductReportResource»>> getRevenueByItem(utility::string_t currencyCode, int64_t startDate, int64_t endDate, int32_t size, int32_t page);
    /// <summary>
    /// Get subscription revenue info
    /// </summary>
    /// <remarks>
    /// Get basic info about revenue from sales of new subscriptions as well as recurring payemnts, summed up within a time range
    /// </remarks>
    /// <param name="currencyCode">The code for a currency to get sales data for</param>/// <param name="startDate">The start of the time range to aggregate, unix timestamp in seconds. Default is beginning of time (optional)</param>/// <param name="endDate">The end of the time range to aggregate, unix timestamp in seconds. Default is end of time (optional)</param>
    pplx::task<std::shared_ptr<RevenueReportResource>> getSubscriptionRevenue(utility::string_t currencyCode, int64_t startDate, int64_t endDate);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ReportingRevenueApi_H_ */

