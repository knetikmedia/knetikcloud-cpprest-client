/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "TemplatedEmail.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

TemplatedEmail::TemplatedEmail()
{
    m_External_template_id = U("");
    m_External_template_idIsSet = false;
    m_Template_dataIsSet = false;
}

TemplatedEmail::~TemplatedEmail()
{
}

void TemplatedEmail::validate()
{
    // TODO: implement validation
}

web::json::value TemplatedEmail::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_External_template_idIsSet)
    {
        val[U("external_template_id")] = ModelBase::toJson(m_External_template_id);
    }
    if(m_Template_dataIsSet)
    {
        val[U("template_data")] = ModelBase::toJson(m_Template_data);
    }

    return val;
}

void TemplatedEmail::fromJson(web::json::value& val)
{
    if(val.has_field(U("external_template_id")))
    {
        setExternalTemplateId(ModelBase::stringFromJson(val[U("external_template_id")]));
    }
    if(val.has_field(U("template_data")))
    {
        if(!val[U("template_data")].is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(val[U("template_data")]);
            setTemplateData( newItem );
        }
    }
}

void TemplatedEmail::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_External_template_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("external_template_id"), m_External_template_id));
        
    }
    if(m_Template_dataIsSet)
    {
        if (m_Template_data.get())
        {
            m_Template_data->toMultipart(multipart, U("template_data."));
        }
        
    }
}

void TemplatedEmail::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("external_template_id")))
    {
        setExternalTemplateId(ModelBase::stringFromHttpContent(multipart->getContent(U("external_template_id"))));
    }
    if(multipart->hasContent(U("template_data")))
    {
        if(multipart->hasContent(U("template_data")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, U("template_data."));
            setTemplateData( newItem );
        }
    }
}

utility::string_t TemplatedEmail::getExternalTemplateId() const
{
    return m_External_template_id;
}


void TemplatedEmail::setExternalTemplateId(utility::string_t value)
{
    m_External_template_id = value;
    m_External_template_idIsSet = true;
}
bool TemplatedEmail::externalTemplateIdIsSet() const
{
    return m_External_template_idIsSet;
}

void TemplatedEmail::unsetExternal_template_id()
{
    m_External_template_idIsSet = false;
}

std::shared_ptr<Object> TemplatedEmail::getTemplateData() const
{
    return m_Template_data;
}


void TemplatedEmail::setTemplateData(std::shared_ptr<Object> value)
{
    m_Template_data = value;
    m_Template_dataIsSet = true;
}
bool TemplatedEmail::templateDataIsSet() const
{
    return m_Template_dataIsSet;
}

void TemplatedEmail::unsetTemplate_data()
{
    m_Template_dataIsSet = false;
}

}
}
}
}

