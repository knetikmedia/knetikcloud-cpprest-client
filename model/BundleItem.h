/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * BundleItem.h
 *
 * 
 */

#ifndef BundleItem_H_
#define BundleItem_H_


#include "ModelBase.h"

#include "BundledSku.h"
#include "Behavior.h"
#include "Sku.h"
#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>
#include "Property.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  BundleItem
    : public ModelBase
{
public:
    BundleItem();
    virtual ~BundleItem();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BundleItem members

    /// <summary>
    /// A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type, or be an extra not from the template
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<Property>>& getAdditionalProperties();
    bool additional_propertiesIsSet() const;
    void unsetAdditional_properties();
    /// <summary>
    /// The behaviors linked to the item, describing various options and interactions. May not be included in item lists
    /// </summary>
    std::vector<std::shared_ptr<Behavior>>& getBehaviors();
    bool behaviorsIsSet() const;
    void unsetBehaviors();
    /// <summary>
    /// The skus of items to be included in this bundle, and how they influence the bundle total price.  Must have at least one SKU
    /// </summary>
    std::vector<std::shared_ptr<BundledSku>>& getBundledSkus();
        /// <summary>
    /// A category for filtering items
    /// </summary>
    utility::string_t getCategory() const;
    void setCategory(utility::string_t value);
    bool categoryIsSet() const;
    void unsetCategory();
    /// <summary>
    /// The date the item was created, unix timestamp in seconds
    /// </summary>
    int64_t getCreatedDate() const;
    void setCreatedDate(int64_t value);
    bool created_dateIsSet() const;
    void unsetCreated_date();
    /// <summary>
    /// Whether or not the item is currently displayable.  Default &#x3D; true
    /// </summary>
    bool getDisplayable() const;
    void setDisplayable(bool value);
    bool displayableIsSet() const;
    void unsetDisplayable();
    /// <summary>
    /// A list of country ID to include in the blacklist/whitelist geo policy
    /// </summary>
    std::vector<utility::string_t>& getGeoCountryList();
    bool geo_country_listIsSet() const;
    void unsetGeo_country_list();
    /// <summary>
    /// Whether to use the geo_country_list as a black list or white list for item geographical availability
    /// </summary>
    utility::string_t getGeoPolicyType() const;
    void setGeoPolicyType(utility::string_t value);
    bool geo_policy_typeIsSet() const;
    void unsetGeo_policy_type();
    /// <summary>
    /// The id of the item
    /// </summary>
    int32_t getId() const;
    void setId(int32_t value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// A long description of the item
    /// </summary>
    utility::string_t getLongDescription() const;
    void setLongDescription(utility::string_t value);
    bool long_descriptionIsSet() const;
    void unsetLong_description();
    /// <summary>
    /// The name of the item
    /// </summary>
    utility::string_t getName() const;
    void setName(utility::string_t value);
        /// <summary>
    /// Provides the abstract shipping needs if this item is physical and can be shipped.  A value of zero means no shipping needed.  Default &#x3D; 0
    /// </summary>
    int32_t getShippingTier() const;
    void setShippingTier(int32_t value);
    bool shipping_tierIsSet() const;
    void unsetShipping_tier();
    /// <summary>
    /// A short description of the item, max 255 chars
    /// </summary>
    utility::string_t getShortDescription() const;
    void setShortDescription(utility::string_t value);
    bool short_descriptionIsSet() const;
    void unsetShort_description();
    /// <summary>
    /// The skus for the item. Each defines a unique configuration for the item to be purchased (Large-Blue, Small-Green, etc). These are what is ultimately selected in the store and added to the cart
    /// </summary>
    std::vector<std::shared_ptr<Sku>>& getSkus();
        /// <summary>
    /// A number to use in sorting items.  Default 500
    /// </summary>
    int32_t getSort() const;
    void setSort(int32_t value);
    bool sortIsSet() const;
    void unsetSort();
    /// <summary>
    /// The date the item will leave the store, unix timestamp in seconds.  If set to null, item will never leave the store
    /// </summary>
    int64_t getStoreEnd() const;
    void setStoreEnd(int64_t value);
    bool store_endIsSet() const;
    void unsetStore_end();
    /// <summary>
    /// The date the item will appear in the store, unix timestamp in seconds.  If set to null, item will appear in store immediately
    /// </summary>
    int64_t getStoreStart() const;
    void setStoreStart(int64_t value);
    bool store_startIsSet() const;
    void unsetStore_start();
    /// <summary>
    /// List of tags used for filtering items
    /// </summary>
    std::vector<utility::string_t>& getTags();
    bool tagsIsSet() const;
    void unsetTags();
    /// <summary>
    /// An item template this item is validated against.  May be null and no validation of additional_properties will be done.  Default &#x3D; null
    /// </summary>
    utility::string_t getTemplate() const;
    void setTemplate(utility::string_t value);
    bool templateIsSet() const;
    void unsetTemplate();
    /// <summary>
    /// The type of the item
    /// </summary>
    utility::string_t getTypeHint() const;
    void setTypeHint(utility::string_t value);
        /// <summary>
    /// The unique key for the item
    /// </summary>
    utility::string_t getUniqueKey() const;
    void setUniqueKey(utility::string_t value);
    bool unique_keyIsSet() const;
    void unsetUnique_key();
    /// <summary>
    /// The date the item was last updated, unix timestamp in seconds
    /// </summary>
    int64_t getUpdatedDate() const;
    void setUpdatedDate(int64_t value);
    bool updated_dateIsSet() const;
    void unsetUpdated_date();
    /// <summary>
    /// The vendor who provides the item
    /// </summary>
    int32_t getVendorId() const;
    void setVendorId(int32_t value);
    
protected:
    std::map<utility::string_t, std::shared_ptr<Property>> m_Additional_properties;
    bool m_Additional_propertiesIsSet;
std::vector<std::shared_ptr<Behavior>> m_Behaviors;
    bool m_BehaviorsIsSet;
std::vector<std::shared_ptr<BundledSku>> m_Bundled_skus;
    utility::string_t m_Category;
    bool m_CategoryIsSet;
int64_t m_Created_date;
    bool m_Created_dateIsSet;
bool m_Displayable;
    bool m_DisplayableIsSet;
std::vector<utility::string_t> m_Geo_country_list;
    bool m_Geo_country_listIsSet;
utility::string_t m_Geo_policy_type;
    bool m_Geo_policy_typeIsSet;
int32_t m_Id;
    bool m_IdIsSet;
utility::string_t m_Long_description;
    bool m_Long_descriptionIsSet;
utility::string_t m_Name;
    int32_t m_Shipping_tier;
    bool m_Shipping_tierIsSet;
utility::string_t m_Short_description;
    bool m_Short_descriptionIsSet;
std::vector<std::shared_ptr<Sku>> m_Skus;
    int32_t m_Sort;
    bool m_SortIsSet;
int64_t m_Store_end;
    bool m_Store_endIsSet;
int64_t m_Store_start;
    bool m_Store_startIsSet;
std::vector<utility::string_t> m_Tags;
    bool m_TagsIsSet;
utility::string_t m_Template;
    bool m_TemplateIsSet;
utility::string_t m_Type_hint;
    utility::string_t m_Unique_key;
    bool m_Unique_keyIsSet;
int64_t m_Updated_date;
    bool m_Updated_dateIsSet;
int32_t m_Vendor_id;
    };

}
}
}
}

#endif /* BundleItem_H_ */
