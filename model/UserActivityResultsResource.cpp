/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "UserActivityResultsResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

UserActivityResultsResource::UserActivityResultsResource()
{
    m_Score = 0L;
    m_ScoreIsSet = false;
    m_TagsIsSet = false;
    m_User_id = 0;
}

UserActivityResultsResource::~UserActivityResultsResource()
{
}

void UserActivityResultsResource::validate()
{
    // TODO: implement validation
}

web::json::value UserActivityResultsResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ScoreIsSet)
    {
        val[U("score")] = ModelBase::toJson(m_Score);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("tags")] = web::json::value::array(jsonArray);
        }
    }
    val[U("user_id")] = ModelBase::toJson(m_User_id);

    return val;
}

void UserActivityResultsResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("score")))
    {
        setScore(ModelBase::int64_tFromJson(val[U("score")]));
    }
    {
        m_Tags.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("tags")))
        {
        for( auto& item : val[U("tags")].as_array() )
        {
            m_Tags.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    setUserId(ModelBase::int32_tFromJson(val[U("user_id")]));
}

void UserActivityResultsResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_ScoreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("score"), m_Score));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("tags"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("user_id"), m_User_id));
}

void UserActivityResultsResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("score")))
    {
        setScore(ModelBase::int64_tFromHttpContent(multipart->getContent(U("score"))));
    }
    {
        m_Tags.clear();
        if(multipart->hasContent(U("tags")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("tags"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Tags.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    setUserId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("user_id"))));
}

int64_t UserActivityResultsResource::getScore() const
{
    return m_Score;
}


void UserActivityResultsResource::setScore(int64_t value)
{
    m_Score = value;
    m_ScoreIsSet = true;
}
bool UserActivityResultsResource::scoreIsSet() const
{
    return m_ScoreIsSet;
}

void UserActivityResultsResource::unsetScore()
{
    m_ScoreIsSet = false;
}

std::vector<utility::string_t>& UserActivityResultsResource::getTags()
{
    return m_Tags;
}

void UserActivityResultsResource::setTags(std::vector<utility::string_t> value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}
bool UserActivityResultsResource::tagsIsSet() const
{
    return m_TagsIsSet;
}

void UserActivityResultsResource::unsetTags()
{
    m_TagsIsSet = false;
}

int32_t UserActivityResultsResource::getUserId() const
{
    return m_User_id;
}


void UserActivityResultsResource::setUserId(int32_t value)
{
    m_User_id = value;
    
}
}
}
}
}

