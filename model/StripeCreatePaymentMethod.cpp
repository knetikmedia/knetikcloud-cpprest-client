/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "StripeCreatePaymentMethod.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

StripeCreatePaymentMethod::StripeCreatePaymentMethod()
{
    m_Token = U("");
    m_User_id = 0;
    m_User_idIsSet = false;
    
}

StripeCreatePaymentMethod::~StripeCreatePaymentMethod()
{
}

void StripeCreatePaymentMethod::validate()
{
    // TODO: implement validation
}

web::json::value StripeCreatePaymentMethod::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("token")] = ModelBase::toJson(m_Token);
    if(m_User_idIsSet)
    {
        val[U("user_id")] = ModelBase::toJson(m_User_id);
    }
    

    return val;
}

void StripeCreatePaymentMethod::fromJson(web::json::value& val)
{
    setToken(ModelBase::stringFromJson(val[U("token")]));
    if(val.has_field(U("user_id")))
    {
        setUserId(ModelBase::int32_tFromJson(val[U("user_id")]));
    }
    
}

void StripeCreatePaymentMethod::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("token"), m_Token));
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("user_id"), m_User_id));
    }
    
}

void StripeCreatePaymentMethod::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setToken(ModelBase::stringFromHttpContent(multipart->getContent(U("token"))));
    if(multipart->hasContent(U("user_id")))
    {
        setUserId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("user_id"))));
    }
    
}


utility::string_t StripeCreatePaymentMethod::getToken() const
{
    return m_Token;
}
void StripeCreatePaymentMethod::setToken(utility::string_t value)
{
    m_Token = value;
    
}
int32_t StripeCreatePaymentMethod::getUserId() const
{
    return m_User_id;
}
void StripeCreatePaymentMethod::setUserId(int32_t value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}
bool StripeCreatePaymentMethod::user_idIsSet() const
{
    return m_User_idIsSet;
}
void StripeCreatePaymentMethod::unsetUser_id()
{
    m_User_idIsSet = false;
}

}
}
}
}

