/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * LeaderboardResource.h
 *
 * 
 */

#ifndef LeaderboardResource_H_
#define LeaderboardResource_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>
#include "LeaderboardEntryResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  LeaderboardResource
    : public ModelBase
{
public:
    LeaderboardResource();
    virtual ~LeaderboardResource();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// LeaderboardResource members

    /// <summary>
    /// The paginated list of user results, in order from best to worst
    /// </summary>
    std::vector<std::shared_ptr<LeaderboardEntryResource>>& getEntries();
    bool entriesIsSet() const;
    void unsetEntries();
    void setEntries(std::vector<std::shared_ptr<LeaderboardEntryResource>> value);
    /// <summary>
    /// The id of the leaderboard
    /// </summary>
    int64_t getId() const;
    bool idIsSet() const;
    void unsetId();
    void setId(int64_t value);
    /// <summary>
    /// The name of the strategy that defines how entries are stored and compared
    /// </summary>
    utility::string_t getStrategy() const;
    bool strategyIsSet() const;
    void unsetStrategy();
    void setStrategy(utility::string_t value);

protected:
    std::vector<std::shared_ptr<LeaderboardEntryResource>> m_Entries;
    bool m_EntriesIsSet;
    int64_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Strategy;
    bool m_StrategyIsSet;
};

}
}
}
}

#endif /* LeaderboardResource_H_ */
