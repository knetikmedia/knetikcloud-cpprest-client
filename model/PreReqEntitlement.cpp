/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PreReqEntitlement.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

PreReqEntitlement::PreReqEntitlement()
{
}

PreReqEntitlement::~PreReqEntitlement()
{
}

void PreReqEntitlement::validate()
{
    // TODO: implement validation
}

web::json::value PreReqEntitlement::toJson() const
{
    web::json::value val = this->Behavior::toJson();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Item_ids )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[U("item_ids")] = web::json::value::array(jsonArray);
    }

    return val;
}

void PreReqEntitlement::fromJson(web::json::value& val)
{
    this->Behavior::fromJson(val);

    {
        m_Item_ids.clear();
        std::vector<web::json::value> jsonArray;
        for( auto& item : val[U("item_ids")].as_array() )
        {
            m_Item_ids.push_back(ModelBase::int32_tFromJson(item));
        }
    }
}

void PreReqEntitlement::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("description"), m_Description));
        
    }
    if(m_Type_hintIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("type_hint"), m_Type_hint));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Item_ids )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + U("item_ids"), web::json::value::array(jsonArray), U("application/json")));
            }
}

void PreReqEntitlement::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("description"))));
    }
    if(multipart->hasContent(U("type_hint")))
    {
        setTypeHint(ModelBase::stringFromHttpContent(multipart->getContent(U("type_hint"))));
    }
    {
        m_Item_ids.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("item_ids"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Item_ids.push_back(ModelBase::int32_tFromJson(item));
        }
    }
}

std::vector<int32_t>& PreReqEntitlement::getItemIds()
{
    return m_Item_ids;
}

void PreReqEntitlement::setItemIds(std::vector<int32_t> value)
{
    m_Item_ids = value;
    
}
}
}
}
}

