/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "EventContextResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

EventContextResource::EventContextResource()
{
    m_Event_name = U("");
    m_Event_nameIsSet = false;
    m_ParametersIsSet = false;
    m_Type = U("");
    m_TypeIsSet = false;
    
}

EventContextResource::~EventContextResource()
{
}

void EventContextResource::validate()
{
    // TODO: implement validation
}

web::json::value EventContextResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Event_nameIsSet)
    {
        val[U("event_name")] = ModelBase::toJson(m_Event_name);
    }
    if(m_ParametersIsSet)
    {
        val[U("parameters")] = ModelBase::toJson(m_Parameters);
    }
    if(m_TypeIsSet)
    {
        val[U("type")] = ModelBase::toJson(m_Type);
    }
    

    return val;
}

void EventContextResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("event_name")))
    {
        setEventName(ModelBase::stringFromJson(val[U("event_name")]));
        
    }
    if(val.has_field(U("parameters")))
    {
        if(!val[U("parameters")].is_null())
        {
            std::map<utility::string_t, std::shared_ptr<ExpressionResource>> newItem(std::map<utility::string_t, ExpressionResource>());
            newItem->fromJson(val[U("parameters")]);
            setParameters( newItem );
        }
        
    }
    if(val.has_field(U("type")))
    {
        setType(ModelBase::stringFromJson(val[U("type")]));
        
    }
    
}

void EventContextResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Event_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("event_name"), m_Event_name));
        
    }
    if(m_ParametersIsSet)
    {
        if (m_Parameters.get())
        {
            m_Parameters->toMultipart(multipart, U("parameters."));
        }
        
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("type"), m_Type));
        
    }
    
}

void EventContextResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("event_name")))
    {
        setEventName(ModelBase::stringFromHttpContent(multipart->getContent(U("event_name"))));
        
    }
    if(multipart->hasContent(U("parameters")))
    {
        if(multipart->hasContent(U("parameters")))
        {
            std::map<utility::string_t, std::shared_ptr<ExpressionResource>> newItem(std::map<utility::string_t, ExpressionResource>());
            newItem->fromMultiPart(multipart, U("parameters."));
            setParameters( newItem );
        }
        
    }
    if(multipart->hasContent(U("type")))
    {
        setType(ModelBase::stringFromHttpContent(multipart->getContent(U("type"))));
        
    }
    
}


utility::string_t EventContextResource::getEventName() const
{
    return m_Event_name;
}
void EventContextResource::setEventName(utility::string_t value)
{
    m_Event_name = value;
    m_Event_nameIsSet = true;
}
bool EventContextResource::event_nameIsSet() const
{
    return m_Event_nameIsSet;
}
void EventContextResource::unsetEvent_name()
{
    m_Event_nameIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<ExpressionResource>>& EventContextResource::getParameters()
{
    return m_Parameters;
}
bool EventContextResource::parametersIsSet() const
{
    return m_ParametersIsSet;
}
void EventContextResource::unsetParameters()
{
    m_ParametersIsSet = false;
}
utility::string_t EventContextResource::getType() const
{
    return m_Type;
}
void EventContextResource::setType(utility::string_t value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool EventContextResource::typeIsSet() const
{
    return m_TypeIsSet;
}
void EventContextResource::unsetType()
{
    m_TypeIsSet = false;
}

}
}
}
}

