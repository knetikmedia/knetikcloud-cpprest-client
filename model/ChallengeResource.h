/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * ChallengeResource.h
 *
 * 
 */

#ifndef ChallengeResource_H_
#define ChallengeResource_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>
#include "Property.h"
#include "RewardSetResource.h"
#include "Schedule.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ChallengeResource
    : public ModelBase
{
public:
    ChallengeResource();
    virtual ~ChallengeResource();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ChallengeResource members

    /// <summary>
    /// The number of activities allowed to this challenge
    /// </summary>
    int32_t getActivities() const;
    bool activitiesIsSet() const;
    void unsetActivities();
    void setActivities(int32_t value);
    /// <summary>
    /// A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<Property>>& getAdditionalProperties();
    bool additionalPropertiesIsSet() const;
    void unsetAdditional_properties();
    void setAdditionalProperties(std::map<utility::string_t, std::shared_ptr<Property>> value);
    /// <summary>
    /// The id of the campaign this challenge is a part of. The challenge must be tied to an active campaign before it will spawn events
    /// </summary>
    int64_t getCampaignId() const;
    bool campaignIdIsSet() const;
    void unsetCampaign_id();
    void setCampaignId(int64_t value);
    /// <summary>
    /// The ID of the original challenge it was copied from
    /// </summary>
    int64_t getCopyOf() const;
    bool copyOfIsSet() const;
    void unsetCopy_of();
    void setCopyOf(int64_t value);
    /// <summary>
    /// The date/time this resource was created in seconds since unix epoch
    /// </summary>
    int64_t getCreatedDate() const;
    bool createdDateIsSet() const;
    void unsetCreated_date();
    void setCreatedDate(int64_t value);
    /// <summary>
    /// The end date of this challenge in seconds since epoch. required if part of a campaign
    /// </summary>
    int64_t getEndDate() const;
    bool endDateIsSet() const;
    void unsetEnd_date();
    void setEndDate(int64_t value);
    /// <summary>
    /// The unique ID for that resource
    /// </summary>
    int64_t getId() const;
    bool idIsSet() const;
    void unsetId();
    void setId(int64_t value);
    /// <summary>
    /// The strategy for calculating the leaderboard. Defaults to highest score. Value MUST come from the list of available strategies from the Leaderboard Service.
    /// </summary>
    utility::string_t getLeaderboardStrategy() const;
    bool leaderboardStrategyIsSet() const;
    void unsetLeaderboard_strategy();
    void setLeaderboardStrategy(utility::string_t value);
    /// <summary>
    /// The user friendly name of that resource. Defaults to blank string
    /// </summary>
    utility::string_t getLongDescription() const;
    bool longDescriptionIsSet() const;
    void unsetLong_description();
    void setLongDescription(utility::string_t value);
    /// <summary>
    /// The user friendly name of that resource
    /// </summary>
    utility::string_t getName() const;
        void setName(utility::string_t value);
    /// <summary>
    /// The next date this challenge will be occur in seconds since epoch
    /// </summary>
    int64_t getNextEventDate() const;
    bool nextEventDateIsSet() const;
    void unsetNext_event_date();
    void setNextEventDate(int64_t value);
    /// <summary>
    /// The number of minutes minimum to wait at the end of this challenge before running rewards, to allow activities to complete
    /// </summary>
    int32_t getRewardLagMinutes() const;
    bool rewardLagMinutesIsSet() const;
    void unsetReward_lag_minutes();
    void setRewardLagMinutes(int32_t value);
    /// <summary>
    /// The rewards to give at the end of the challenge. When creating/updating only id is used. Reward set must be pre-existing
    /// </summary>
    std::shared_ptr<RewardSetResource> getRewardSet() const;
    bool rewardSetIsSet() const;
    void unsetReward_set();
    void setRewardSet(std::shared_ptr<RewardSetResource> value);
    /// <summary>
    /// The repeat schedule for the challenge
    /// </summary>
    std::shared_ptr<Schedule> getSchedule() const;
    bool scheduleIsSet() const;
    void unsetSchedule();
    void setSchedule(std::shared_ptr<Schedule> value);
    /// <summary>
    /// The user friendly name of that resource. Defaults to blank string
    /// </summary>
    utility::string_t getShortDescription() const;
    bool shortDescriptionIsSet() const;
    void unsetShort_description();
    void setShortDescription(utility::string_t value);
    /// <summary>
    /// The start date of this challenge in seconds since epoch. required if part of a campaign
    /// </summary>
    int64_t getStartDate() const;
    bool startDateIsSet() const;
    void unsetStart_date();
    void setStartDate(int64_t value);
    /// <summary>
    /// A challenge template this challenge is validated against (private). May be null and no validation of additional_properties will be done
    /// </summary>
    utility::string_t getTemplate() const;
    bool templateIsSet() const;
    void unsetTemplate();
    void setTemplate(utility::string_t value);
    /// <summary>
    /// The date/time this resource was last updated in seconds since unix epoch
    /// </summary>
    int64_t getUpdatedDate() const;
    bool updatedDateIsSet() const;
    void unsetUpdated_date();
    void setUpdatedDate(int64_t value);

protected:
    int32_t m_Activities;
    bool m_ActivitiesIsSet;
    std::map<utility::string_t, std::shared_ptr<Property>> m_Additional_properties;
    bool m_Additional_propertiesIsSet;
    int64_t m_Campaign_id;
    bool m_Campaign_idIsSet;
    int64_t m_Copy_of;
    bool m_Copy_ofIsSet;
    int64_t m_Created_date;
    bool m_Created_dateIsSet;
    int64_t m_End_date;
    bool m_End_dateIsSet;
    int64_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Leaderboard_strategy;
    bool m_Leaderboard_strategyIsSet;
    utility::string_t m_Long_description;
    bool m_Long_descriptionIsSet;
    utility::string_t m_Name;
        int64_t m_Next_event_date;
    bool m_Next_event_dateIsSet;
    int32_t m_Reward_lag_minutes;
    bool m_Reward_lag_minutesIsSet;
    std::shared_ptr<RewardSetResource> m_Reward_set;
    bool m_Reward_setIsSet;
    std::shared_ptr<Schedule> m_Schedule;
    bool m_ScheduleIsSet;
    utility::string_t m_Short_description;
    bool m_Short_descriptionIsSet;
    int64_t m_Start_date;
    bool m_Start_dateIsSet;
    utility::string_t m_Template;
    bool m_TemplateIsSet;
    int64_t m_Updated_date;
    bool m_Updated_dateIsSet;
};

}
}
}
}

#endif /* ChallengeResource_H_ */
