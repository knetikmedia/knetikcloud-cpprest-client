/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "FlagReportResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

FlagReportResource::FlagReportResource()
{
    m_Context = U("");
    m_ContextIsSet = false;
    m_Context_id = U("");
    m_Context_idIsSet = false;
    m_Created_date = 0;
    m_Created_dateIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_Reason = U("");
    m_ReasonIsSet = false;
    m_Resolution = U("");
    m_Resolved = 0;
    m_ResolvedIsSet = false;
    m_Updated_date = 0;
    m_Updated_dateIsSet = false;
    
}

FlagReportResource::~FlagReportResource()
{
}

void FlagReportResource::validate()
{
    // TODO: implement validation
}

web::json::value FlagReportResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ContextIsSet)
    {
        val[U("context")] = ModelBase::toJson(m_Context);
    }
    if(m_Context_idIsSet)
    {
        val[U("context_id")] = ModelBase::toJson(m_Context_id);
    }
    if(m_Created_dateIsSet)
    {
        val[U("created_date")] = ModelBase::toJson(m_Created_date);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_ReasonIsSet)
    {
        val[U("reason")] = ModelBase::toJson(m_Reason);
    }
    val[U("resolution")] = ModelBase::toJson(m_Resolution);
    if(m_ResolvedIsSet)
    {
        val[U("resolved")] = ModelBase::toJson(m_Resolved);
    }
    if(m_Updated_dateIsSet)
    {
        val[U("updated_date")] = ModelBase::toJson(m_Updated_date);
    }
    

    return val;
}

void FlagReportResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("context")))
    {
        setContext(ModelBase::stringFromJson(val[U("context")]));
        
    }
    if(val.has_field(U("context_id")))
    {
        setContextId(ModelBase::stringFromJson(val[U("context_id")]));
        
    }
    if(val.has_field(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromJson(val[U("created_date")]));
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int64_tFromJson(val[U("id")]));
    }
    if(val.has_field(U("reason")))
    {
        setReason(ModelBase::stringFromJson(val[U("reason")]));
        
    }
    setResolution(ModelBase::stringFromJson(val[U("resolution")]));
    if(val.has_field(U("resolved")))
    {
        setResolved(ModelBase::int64_tFromJson(val[U("resolved")]));
    }
    if(val.has_field(U("updated_date")))
    {
        setUpdatedDate(ModelBase::int64_tFromJson(val[U("updated_date")]));
    }
    
}

void FlagReportResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_ContextIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("context"), m_Context));
        
    }
    if(m_Context_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("context_id"), m_Context_id));
        
    }
    if(m_Created_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("created_date"), m_Created_date));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    if(m_ReasonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("reason"), m_Reason));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("resolution"), m_Resolution));
    if(m_ResolvedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("resolved"), m_Resolved));
    }
    if(m_Updated_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("updated_date"), m_Updated_date));
    }
    
}

void FlagReportResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("context")))
    {
        setContext(ModelBase::stringFromHttpContent(multipart->getContent(U("context"))));
        
    }
    if(multipart->hasContent(U("context_id")))
    {
        setContextId(ModelBase::stringFromHttpContent(multipart->getContent(U("context_id"))));
        
    }
    if(multipart->hasContent(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("created_date"))));
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int64_tFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("reason")))
    {
        setReason(ModelBase::stringFromHttpContent(multipart->getContent(U("reason"))));
        
    }
    setResolution(ModelBase::stringFromHttpContent(multipart->getContent(U("resolution"))));
    if(multipart->hasContent(U("resolved")))
    {
        setResolved(ModelBase::int64_tFromHttpContent(multipart->getContent(U("resolved"))));
    }
    if(multipart->hasContent(U("updated_date")))
    {
        setUpdatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("updated_date"))));
    }
    
}


utility::string_t FlagReportResource::getContext() const
{
    return m_Context;
}
void FlagReportResource::setContext(utility::string_t value)
{
    m_Context = value;
    m_ContextIsSet = true;
}
bool FlagReportResource::contextIsSet() const
{
    return m_ContextIsSet;
}
void FlagReportResource::unsetContext()
{
    m_ContextIsSet = false;
}
utility::string_t FlagReportResource::getContextId() const
{
    return m_Context_id;
}
void FlagReportResource::setContextId(utility::string_t value)
{
    m_Context_id = value;
    m_Context_idIsSet = true;
}
bool FlagReportResource::context_idIsSet() const
{
    return m_Context_idIsSet;
}
void FlagReportResource::unsetContext_id()
{
    m_Context_idIsSet = false;
}
int64_t FlagReportResource::getCreatedDate() const
{
    return m_Created_date;
}
void FlagReportResource::setCreatedDate(int64_t value)
{
    m_Created_date = value;
    m_Created_dateIsSet = true;
}
bool FlagReportResource::created_dateIsSet() const
{
    return m_Created_dateIsSet;
}
void FlagReportResource::unsetCreated_date()
{
    m_Created_dateIsSet = false;
}
int64_t FlagReportResource::getId() const
{
    return m_Id;
}
void FlagReportResource::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool FlagReportResource::idIsSet() const
{
    return m_IdIsSet;
}
void FlagReportResource::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t FlagReportResource::getReason() const
{
    return m_Reason;
}
void FlagReportResource::setReason(utility::string_t value)
{
    m_Reason = value;
    m_ReasonIsSet = true;
}
bool FlagReportResource::reasonIsSet() const
{
    return m_ReasonIsSet;
}
void FlagReportResource::unsetReason()
{
    m_ReasonIsSet = false;
}
utility::string_t FlagReportResource::getResolution() const
{
    return m_Resolution;
}
void FlagReportResource::setResolution(utility::string_t value)
{
    m_Resolution = value;
    
}
int64_t FlagReportResource::getResolved() const
{
    return m_Resolved;
}
void FlagReportResource::setResolved(int64_t value)
{
    m_Resolved = value;
    m_ResolvedIsSet = true;
}
bool FlagReportResource::resolvedIsSet() const
{
    return m_ResolvedIsSet;
}
void FlagReportResource::unsetResolved()
{
    m_ResolvedIsSet = false;
}
int64_t FlagReportResource::getUpdatedDate() const
{
    return m_Updated_date;
}
void FlagReportResource::setUpdatedDate(int64_t value)
{
    m_Updated_date = value;
    m_Updated_dateIsSet = true;
}
bool FlagReportResource::updated_dateIsSet() const
{
    return m_Updated_dateIsSet;
}
void FlagReportResource::unsetUpdated_date()
{
    m_Updated_dateIsSet = false;
}

}
}
}
}

