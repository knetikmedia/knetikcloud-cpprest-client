/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ClientResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

ClientResource::ClientResource()
{
    m_Access_token_validity_seconds = 0;
    m_Access_token_validity_secondsIsSet = false;
    m_Client_key = U("");
    m_Grant_typesIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_Is_public = false;
    m_Is_publicIsSet = false;
    m_Locked = false;
    m_LockedIsSet = false;
    m_Name = U("");
    m_Redirect_urisIsSet = false;
    m_Refresh_token_validity_seconds = 0;
    m_Refresh_token_validity_secondsIsSet = false;
    m_Secret = U("");
}

ClientResource::~ClientResource()
{
}

void ClientResource::validate()
{
    // TODO: implement validation
}

web::json::value ClientResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Access_token_validity_secondsIsSet)
    {
        val[U("access_token_validity_seconds")] = ModelBase::toJson(m_Access_token_validity_seconds);
    }
    val[U("client_key")] = ModelBase::toJson(m_Client_key);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Grant_types )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("grant_types")] = web::json::value::array(jsonArray);
        }
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_Is_publicIsSet)
    {
        val[U("is_public")] = ModelBase::toJson(m_Is_public);
    }
    if(m_LockedIsSet)
    {
        val[U("locked")] = ModelBase::toJson(m_Locked);
    }
    val[U("name")] = ModelBase::toJson(m_Name);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Redirect_uris )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("redirect_uris")] = web::json::value::array(jsonArray);
        }
    }
    if(m_Refresh_token_validity_secondsIsSet)
    {
        val[U("refresh_token_validity_seconds")] = ModelBase::toJson(m_Refresh_token_validity_seconds);
    }
    val[U("secret")] = ModelBase::toJson(m_Secret);

    return val;
}

void ClientResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("access_token_validity_seconds")))
    {
        setAccessTokenValiditySeconds(ModelBase::int32_tFromJson(val[U("access_token_validity_seconds")]));
    }
    setClientKey(ModelBase::stringFromJson(val[U("client_key")]));
    {
        m_Grant_types.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("grant_types")))
        {
        for( auto& item : val[U("grant_types")].as_array() )
        {
            m_Grant_types.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int32_tFromJson(val[U("id")]));
    }
    if(val.has_field(U("is_public")))
    {
        setIsPublic(ModelBase::boolFromJson(val[U("is_public")]));
    }
    if(val.has_field(U("locked")))
    {
        setLocked(ModelBase::boolFromJson(val[U("locked")]));
    }
    setName(ModelBase::stringFromJson(val[U("name")]));
    {
        m_Redirect_uris.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("redirect_uris")))
        {
        for( auto& item : val[U("redirect_uris")].as_array() )
        {
            m_Redirect_uris.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(val.has_field(U("refresh_token_validity_seconds")))
    {
        setRefreshTokenValiditySeconds(ModelBase::int32_tFromJson(val[U("refresh_token_validity_seconds")]));
    }
    setSecret(ModelBase::stringFromJson(val[U("secret")]));
}

void ClientResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Access_token_validity_secondsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("access_token_validity_seconds"), m_Access_token_validity_seconds));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("client_key"), m_Client_key));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Grant_types )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("grant_types"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    if(m_Is_publicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("is_public"), m_Is_public));
    }
    if(m_LockedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("locked"), m_Locked));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Redirect_uris )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("redirect_uris"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_Refresh_token_validity_secondsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("refresh_token_validity_seconds"), m_Refresh_token_validity_seconds));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("secret"), m_Secret));
}

void ClientResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("access_token_validity_seconds")))
    {
        setAccessTokenValiditySeconds(ModelBase::int32_tFromHttpContent(multipart->getContent(U("access_token_validity_seconds"))));
    }
    setClientKey(ModelBase::stringFromHttpContent(multipart->getContent(U("client_key"))));
    {
        m_Grant_types.clear();
        if(multipart->hasContent(U("grant_types")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("grant_types"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Grant_types.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("is_public")))
    {
        setIsPublic(ModelBase::boolFromHttpContent(multipart->getContent(U("is_public"))));
    }
    if(multipart->hasContent(U("locked")))
    {
        setLocked(ModelBase::boolFromHttpContent(multipart->getContent(U("locked"))));
    }
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    {
        m_Redirect_uris.clear();
        if(multipart->hasContent(U("redirect_uris")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("redirect_uris"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Redirect_uris.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(multipart->hasContent(U("refresh_token_validity_seconds")))
    {
        setRefreshTokenValiditySeconds(ModelBase::int32_tFromHttpContent(multipart->getContent(U("refresh_token_validity_seconds"))));
    }
    setSecret(ModelBase::stringFromHttpContent(multipart->getContent(U("secret"))));
}

int32_t ClientResource::getAccessTokenValiditySeconds() const
{
    return m_Access_token_validity_seconds;
}


void ClientResource::setAccessTokenValiditySeconds(int32_t value)
{
    m_Access_token_validity_seconds = value;
    m_Access_token_validity_secondsIsSet = true;
}
bool ClientResource::accessTokenValiditySecondsIsSet() const
{
    return m_Access_token_validity_secondsIsSet;
}

void ClientResource::unsetAccess_token_validity_seconds()
{
    m_Access_token_validity_secondsIsSet = false;
}

utility::string_t ClientResource::getClientKey() const
{
    return m_Client_key;
}


void ClientResource::setClientKey(utility::string_t value)
{
    m_Client_key = value;
    
}
std::vector<utility::string_t>& ClientResource::getGrantTypes()
{
    return m_Grant_types;
}

void ClientResource::setGrantTypes(std::vector<utility::string_t> value)
{
    m_Grant_types = value;
    m_Grant_typesIsSet = true;
}
bool ClientResource::grantTypesIsSet() const
{
    return m_Grant_typesIsSet;
}

void ClientResource::unsetGrant_types()
{
    m_Grant_typesIsSet = false;
}

int32_t ClientResource::getId() const
{
    return m_Id;
}


void ClientResource::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool ClientResource::idIsSet() const
{
    return m_IdIsSet;
}

void ClientResource::unsetId()
{
    m_IdIsSet = false;
}

bool ClientResource::getIsPublic() const
{
    return m_Is_public;
}


void ClientResource::setIsPublic(bool value)
{
    m_Is_public = value;
    m_Is_publicIsSet = true;
}
bool ClientResource::isPublicIsSet() const
{
    return m_Is_publicIsSet;
}

void ClientResource::unsetIs_public()
{
    m_Is_publicIsSet = false;
}

bool ClientResource::getLocked() const
{
    return m_Locked;
}


void ClientResource::setLocked(bool value)
{
    m_Locked = value;
    m_LockedIsSet = true;
}
bool ClientResource::lockedIsSet() const
{
    return m_LockedIsSet;
}

void ClientResource::unsetLocked()
{
    m_LockedIsSet = false;
}

utility::string_t ClientResource::getName() const
{
    return m_Name;
}


void ClientResource::setName(utility::string_t value)
{
    m_Name = value;
    
}
std::vector<utility::string_t>& ClientResource::getRedirectUris()
{
    return m_Redirect_uris;
}

void ClientResource::setRedirectUris(std::vector<utility::string_t> value)
{
    m_Redirect_uris = value;
    m_Redirect_urisIsSet = true;
}
bool ClientResource::redirectUrisIsSet() const
{
    return m_Redirect_urisIsSet;
}

void ClientResource::unsetRedirect_uris()
{
    m_Redirect_urisIsSet = false;
}

int32_t ClientResource::getRefreshTokenValiditySeconds() const
{
    return m_Refresh_token_validity_seconds;
}


void ClientResource::setRefreshTokenValiditySeconds(int32_t value)
{
    m_Refresh_token_validity_seconds = value;
    m_Refresh_token_validity_secondsIsSet = true;
}
bool ClientResource::refreshTokenValiditySecondsIsSet() const
{
    return m_Refresh_token_validity_secondsIsSet;
}

void ClientResource::unsetRefresh_token_validity_seconds()
{
    m_Refresh_token_validity_secondsIsSet = false;
}

utility::string_t ClientResource::getSecret() const
{
    return m_Secret;
}


void ClientResource::setSecret(utility::string_t value)
{
    m_Secret = value;
    
}
}
}
}
}

