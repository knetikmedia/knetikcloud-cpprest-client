/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "NestedCategory.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

NestedCategory::NestedCategory()
{
    m_Active = false;
    m_ActiveIsSet = false;
    m_Id = U("");
    m_Name = U("");
    m_NameIsSet = false;
}

NestedCategory::~NestedCategory()
{
}

void NestedCategory::validate()
{
    // TODO: implement validation
}

web::json::value NestedCategory::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ActiveIsSet)
    {
        val[U("active")] = ModelBase::toJson(m_Active);
    }
    val[U("id")] = ModelBase::toJson(m_Id);
    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }

    return val;
}

void NestedCategory::fromJson(web::json::value& val)
{
    if(val.has_field(U("active")))
    {
        setActive(ModelBase::boolFromJson(val[U("active")]));
    }
    setId(ModelBase::stringFromJson(val[U("id")]));
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
    }
}

void NestedCategory::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_ActiveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("active"), m_Active));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
}

void NestedCategory::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("active")))
    {
        setActive(ModelBase::boolFromHttpContent(multipart->getContent(U("active"))));
    }
    setId(ModelBase::stringFromHttpContent(multipart->getContent(U("id"))));
    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    }
}

bool NestedCategory::getActive() const
{
    return m_Active;
}


void NestedCategory::setActive(bool value)
{
    m_Active = value;
    m_ActiveIsSet = true;
}
bool NestedCategory::activeIsSet() const
{
    return m_ActiveIsSet;
}

void NestedCategory::unsetActive()
{
    m_ActiveIsSet = false;
}

utility::string_t NestedCategory::getId() const
{
    return m_Id;
}


void NestedCategory::setId(utility::string_t value)
{
    m_Id = value;
    
}
utility::string_t NestedCategory::getName() const
{
    return m_Name;
}


void NestedCategory::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool NestedCategory::nameIsSet() const
{
    return m_NameIsSet;
}

void NestedCategory::unsetName()
{
    m_NameIsSet = false;
}

}
}
}
}

