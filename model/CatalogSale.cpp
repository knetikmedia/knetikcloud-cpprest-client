/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "CatalogSale.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

CatalogSale::CatalogSale()
{
    m_Currency_code = U("");
    m_Discount_type = U("");
    m_Discount_value = 0.0;
    m_Discount_valueIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_Item = 0;
    m_ItemIsSet = false;
    m_Long_description = U("");
    m_Long_descriptionIsSet = false;
    m_Name = U("");
    m_Sale_end_date = 0L;
    m_Sale_end_dateIsSet = false;
    m_Sale_start_date = 0L;
    m_Short_description = U("");
    m_Short_descriptionIsSet = false;
    m_Tag = U("");
    m_TagIsSet = false;
    m_Vendor = 0;
    m_VendorIsSet = false;
}

CatalogSale::~CatalogSale()
{
}

void CatalogSale::validate()
{
    // TODO: implement validation
}

web::json::value CatalogSale::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("currency_code")] = ModelBase::toJson(m_Currency_code);
    val[U("discount_type")] = ModelBase::toJson(m_Discount_type);
    if(m_Discount_valueIsSet)
    {
        val[U("discount_value")] = ModelBase::toJson(m_Discount_value);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_ItemIsSet)
    {
        val[U("item")] = ModelBase::toJson(m_Item);
    }
    if(m_Long_descriptionIsSet)
    {
        val[U("long_description")] = ModelBase::toJson(m_Long_description);
    }
    val[U("name")] = ModelBase::toJson(m_Name);
    if(m_Sale_end_dateIsSet)
    {
        val[U("sale_end_date")] = ModelBase::toJson(m_Sale_end_date);
    }
    val[U("sale_start_date")] = ModelBase::toJson(m_Sale_start_date);
    if(m_Short_descriptionIsSet)
    {
        val[U("short_description")] = ModelBase::toJson(m_Short_description);
    }
    if(m_TagIsSet)
    {
        val[U("tag")] = ModelBase::toJson(m_Tag);
    }
    if(m_VendorIsSet)
    {
        val[U("vendor")] = ModelBase::toJson(m_Vendor);
    }

    return val;
}

void CatalogSale::fromJson(web::json::value& val)
{
    setCurrencyCode(ModelBase::stringFromJson(val[U("currency_code")]));
    setDiscountType(ModelBase::stringFromJson(val[U("discount_type")]));
    if(val.has_field(U("discount_value")))
    {
        setDiscountValue(ModelBase::doubleFromJson(val[U("discount_value")]));
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int32_tFromJson(val[U("id")]));
    }
    if(val.has_field(U("item")))
    {
        setItem(ModelBase::int32_tFromJson(val[U("item")]));
    }
    if(val.has_field(U("long_description")))
    {
        setLongDescription(ModelBase::stringFromJson(val[U("long_description")]));
    }
    setName(ModelBase::stringFromJson(val[U("name")]));
    if(val.has_field(U("sale_end_date")))
    {
        setSaleEndDate(ModelBase::int64_tFromJson(val[U("sale_end_date")]));
    }
    setSaleStartDate(ModelBase::int64_tFromJson(val[U("sale_start_date")]));
    if(val.has_field(U("short_description")))
    {
        setShortDescription(ModelBase::stringFromJson(val[U("short_description")]));
    }
    if(val.has_field(U("tag")))
    {
        setTag(ModelBase::stringFromJson(val[U("tag")]));
    }
    if(val.has_field(U("vendor")))
    {
        setVendor(ModelBase::int32_tFromJson(val[U("vendor")]));
    }
}

void CatalogSale::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("currency_code"), m_Currency_code));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("discount_type"), m_Discount_type));
    if(m_Discount_valueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("discount_value"), m_Discount_value));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    if(m_ItemIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("item"), m_Item));
    }
    if(m_Long_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("long_description"), m_Long_description));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    if(m_Sale_end_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("sale_end_date"), m_Sale_end_date));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("sale_start_date"), m_Sale_start_date));
    if(m_Short_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("short_description"), m_Short_description));
        
    }
    if(m_TagIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("tag"), m_Tag));
        
    }
    if(m_VendorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("vendor"), m_Vendor));
    }
}

void CatalogSale::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setCurrencyCode(ModelBase::stringFromHttpContent(multipart->getContent(U("currency_code"))));
    setDiscountType(ModelBase::stringFromHttpContent(multipart->getContent(U("discount_type"))));
    if(multipart->hasContent(U("discount_value")))
    {
        setDiscountValue(ModelBase::doubleFromHttpContent(multipart->getContent(U("discount_value"))));
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("item")))
    {
        setItem(ModelBase::int32_tFromHttpContent(multipart->getContent(U("item"))));
    }
    if(multipart->hasContent(U("long_description")))
    {
        setLongDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("long_description"))));
    }
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    if(multipart->hasContent(U("sale_end_date")))
    {
        setSaleEndDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("sale_end_date"))));
    }
    setSaleStartDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("sale_start_date"))));
    if(multipart->hasContent(U("short_description")))
    {
        setShortDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("short_description"))));
    }
    if(multipart->hasContent(U("tag")))
    {
        setTag(ModelBase::stringFromHttpContent(multipart->getContent(U("tag"))));
    }
    if(multipart->hasContent(U("vendor")))
    {
        setVendor(ModelBase::int32_tFromHttpContent(multipart->getContent(U("vendor"))));
    }
}

utility::string_t CatalogSale::getCurrencyCode() const
{
    return m_Currency_code;
}


void CatalogSale::setCurrencyCode(utility::string_t value)
{
    m_Currency_code = value;
    
}
utility::string_t CatalogSale::getDiscountType() const
{
    return m_Discount_type;
}


void CatalogSale::setDiscountType(utility::string_t value)
{
    m_Discount_type = value;
    
}
double CatalogSale::getDiscountValue() const
{
    return m_Discount_value;
}


void CatalogSale::setDiscountValue(double value)
{
    m_Discount_value = value;
    m_Discount_valueIsSet = true;
}
bool CatalogSale::discountValueIsSet() const
{
    return m_Discount_valueIsSet;
}

void CatalogSale::unsetDiscount_value()
{
    m_Discount_valueIsSet = false;
}

int32_t CatalogSale::getId() const
{
    return m_Id;
}


void CatalogSale::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool CatalogSale::idIsSet() const
{
    return m_IdIsSet;
}

void CatalogSale::unsetId()
{
    m_IdIsSet = false;
}

int32_t CatalogSale::getItem() const
{
    return m_Item;
}


void CatalogSale::setItem(int32_t value)
{
    m_Item = value;
    m_ItemIsSet = true;
}
bool CatalogSale::itemIsSet() const
{
    return m_ItemIsSet;
}

void CatalogSale::unsetItem()
{
    m_ItemIsSet = false;
}

utility::string_t CatalogSale::getLongDescription() const
{
    return m_Long_description;
}


void CatalogSale::setLongDescription(utility::string_t value)
{
    m_Long_description = value;
    m_Long_descriptionIsSet = true;
}
bool CatalogSale::longDescriptionIsSet() const
{
    return m_Long_descriptionIsSet;
}

void CatalogSale::unsetLong_description()
{
    m_Long_descriptionIsSet = false;
}

utility::string_t CatalogSale::getName() const
{
    return m_Name;
}


void CatalogSale::setName(utility::string_t value)
{
    m_Name = value;
    
}
int64_t CatalogSale::getSaleEndDate() const
{
    return m_Sale_end_date;
}


void CatalogSale::setSaleEndDate(int64_t value)
{
    m_Sale_end_date = value;
    m_Sale_end_dateIsSet = true;
}
bool CatalogSale::saleEndDateIsSet() const
{
    return m_Sale_end_dateIsSet;
}

void CatalogSale::unsetSale_end_date()
{
    m_Sale_end_dateIsSet = false;
}

int64_t CatalogSale::getSaleStartDate() const
{
    return m_Sale_start_date;
}


void CatalogSale::setSaleStartDate(int64_t value)
{
    m_Sale_start_date = value;
    
}
utility::string_t CatalogSale::getShortDescription() const
{
    return m_Short_description;
}


void CatalogSale::setShortDescription(utility::string_t value)
{
    m_Short_description = value;
    m_Short_descriptionIsSet = true;
}
bool CatalogSale::shortDescriptionIsSet() const
{
    return m_Short_descriptionIsSet;
}

void CatalogSale::unsetShort_description()
{
    m_Short_descriptionIsSet = false;
}

utility::string_t CatalogSale::getTag() const
{
    return m_Tag;
}


void CatalogSale::setTag(utility::string_t value)
{
    m_Tag = value;
    m_TagIsSet = true;
}
bool CatalogSale::tagIsSet() const
{
    return m_TagIsSet;
}

void CatalogSale::unsetTag()
{
    m_TagIsSet = false;
}

int32_t CatalogSale::getVendor() const
{
    return m_Vendor;
}


void CatalogSale::setVendor(int32_t value)
{
    m_Vendor = value;
    m_VendorIsSet = true;
}
bool CatalogSale::vendorIsSet() const
{
    return m_VendorIsSet;
}

void CatalogSale::unsetVendor()
{
    m_VendorIsSet = false;
}

}
}
}
}

