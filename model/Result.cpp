/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Result.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

Result::Result()
{
    m_Code = 0;
    m_CodeIsSet = false;
    m_Request_id = U("");
    m_Request_idIsSet = false;
    m_ResultIsSet = false;
    
}

Result::~Result()
{
}

void Result::validate()
{
    // TODO: implement validation
}

web::json::value Result::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CodeIsSet)
    {
        val[U("code")] = ModelBase::toJson(m_Code);
    }
    if(m_Request_idIsSet)
    {
        val[U("request_id")] = ModelBase::toJson(m_Request_id);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Result )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("result")] = web::json::value::array(jsonArray);
        }
    }
    

    return val;
}

void Result::fromJson(web::json::value& val)
{
    if(val.has_field(U("code")))
    {
        setCode(ModelBase::int32_tFromJson(val[U("code")]));
    }
    if(val.has_field(U("request_id")))
    {
        setRequestId(ModelBase::stringFromJson(val[U("request_id")]));
        
    }
    {
        m_Result.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("result")))
        {
        for( auto& item : val[U("result")].as_array() )
        {
            
            if(item.is_null())
            {
                m_Result.push_back( std::shared_ptr<ErrorResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<ErrorResource> newItem(new ErrorResource());
                newItem->fromJson(item);
                m_Result.push_back( newItem );
            }
            
        }
        }
    }
    
}

void Result::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("code"), m_Code));
    }
    if(m_Request_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("request_id"), m_Request_id));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Result )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("result"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    
}

void Result::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("code")))
    {
        setCode(ModelBase::int32_tFromHttpContent(multipart->getContent(U("code"))));
    }
    if(multipart->hasContent(U("request_id")))
    {
        setRequestId(ModelBase::stringFromHttpContent(multipart->getContent(U("request_id"))));
        
    }
    {
        m_Result.clear();
        if(multipart->hasContent(U("result")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("result"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_Result.push_back( std::shared_ptr<ErrorResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<ErrorResource> newItem(new ErrorResource());
                newItem->fromJson(item);
                m_Result.push_back( newItem );
            }
            
        }
        }
    }
    
}


int32_t Result::getCode() const
{
    return m_Code;
}
void Result::setCode(int32_t value)
{
    m_Code = value;
    m_CodeIsSet = true;
}
bool Result::codeIsSet() const
{
    return m_CodeIsSet;
}
void Result::unsetCode()
{
    m_CodeIsSet = false;
}
utility::string_t Result::getRequestId() const
{
    return m_Request_id;
}
void Result::setRequestId(utility::string_t value)
{
    m_Request_id = value;
    m_Request_idIsSet = true;
}
bool Result::request_idIsSet() const
{
    return m_Request_idIsSet;
}
void Result::unsetRequest_id()
{
    m_Request_idIsSet = false;
}
std::vector<std::shared_ptr<ErrorResource>>& Result::getResult()
{
    return m_Result;
}
bool Result::resultIsSet() const
{
    return m_ResultIsSet;
}
void Result::unsetResult()
{
    m_ResultIsSet = false;
}

}
}
}
}

