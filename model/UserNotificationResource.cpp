/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "UserNotificationResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

UserNotificationResource::UserNotificationResource()
{
    m_DataIsSet = false;
    m_Notification_id = U("");
    m_Notification_type_id = U("");
    m_Recipient = U("");
    m_Recipient_type = U("");
    m_Retrieve_date = 0L;
    m_Retrieve_dateIsSet = false;
    m_Send_date = 0L;
    m_Send_dateIsSet = false;
    m_Status = U("");
    m_StatusIsSet = false;
    m_User_id = 0;
}

UserNotificationResource::~UserNotificationResource()
{
}

void UserNotificationResource::validate()
{
    // TODO: implement validation
}

web::json::value UserNotificationResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_DataIsSet)
    {
        val[U("data")] = ModelBase::toJson(m_Data);
    }
    val[U("notification_id")] = ModelBase::toJson(m_Notification_id);
    val[U("notification_type_id")] = ModelBase::toJson(m_Notification_type_id);
    val[U("recipient")] = ModelBase::toJson(m_Recipient);
    val[U("recipient_type")] = ModelBase::toJson(m_Recipient_type);
    if(m_Retrieve_dateIsSet)
    {
        val[U("retrieve_date")] = ModelBase::toJson(m_Retrieve_date);
    }
    if(m_Send_dateIsSet)
    {
        val[U("send_date")] = ModelBase::toJson(m_Send_date);
    }
    if(m_StatusIsSet)
    {
        val[U("status")] = ModelBase::toJson(m_Status);
    }
    val[U("user_id")] = ModelBase::toJson(m_User_id);

    return val;
}

void UserNotificationResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("data")))
    {
        if(!val[U("data")].is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(val[U("data")]);
            setData( newItem );
        }
    }
    setNotificationId(ModelBase::stringFromJson(val[U("notification_id")]));
    setNotificationTypeId(ModelBase::stringFromJson(val[U("notification_type_id")]));
    setRecipient(ModelBase::stringFromJson(val[U("recipient")]));
    setRecipientType(ModelBase::stringFromJson(val[U("recipient_type")]));
    if(val.has_field(U("retrieve_date")))
    {
        setRetrieveDate(ModelBase::int64_tFromJson(val[U("retrieve_date")]));
    }
    if(val.has_field(U("send_date")))
    {
        setSendDate(ModelBase::int64_tFromJson(val[U("send_date")]));
    }
    if(val.has_field(U("status")))
    {
        setStatus(ModelBase::stringFromJson(val[U("status")]));
    }
    setUserId(ModelBase::int32_tFromJson(val[U("user_id")]));
}

void UserNotificationResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_DataIsSet)
    {
        if (m_Data.get())
        {
            m_Data->toMultipart(multipart, U("data."));
        }
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("notification_id"), m_Notification_id));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("notification_type_id"), m_Notification_type_id));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("recipient"), m_Recipient));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("recipient_type"), m_Recipient_type));
    if(m_Retrieve_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("retrieve_date"), m_Retrieve_date));
    }
    if(m_Send_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("send_date"), m_Send_date));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("status"), m_Status));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("user_id"), m_User_id));
}

void UserNotificationResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("data")))
    {
        if(multipart->hasContent(U("data")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, U("data."));
            setData( newItem );
        }
    }
    setNotificationId(ModelBase::stringFromHttpContent(multipart->getContent(U("notification_id"))));
    setNotificationTypeId(ModelBase::stringFromHttpContent(multipart->getContent(U("notification_type_id"))));
    setRecipient(ModelBase::stringFromHttpContent(multipart->getContent(U("recipient"))));
    setRecipientType(ModelBase::stringFromHttpContent(multipart->getContent(U("recipient_type"))));
    if(multipart->hasContent(U("retrieve_date")))
    {
        setRetrieveDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("retrieve_date"))));
    }
    if(multipart->hasContent(U("send_date")))
    {
        setSendDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("send_date"))));
    }
    if(multipart->hasContent(U("status")))
    {
        setStatus(ModelBase::stringFromHttpContent(multipart->getContent(U("status"))));
    }
    setUserId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("user_id"))));
}

std::shared_ptr<Object> UserNotificationResource::getData() const
{
    return m_Data;
}


void UserNotificationResource::setData(std::shared_ptr<Object> value)
{
    m_Data = value;
    m_DataIsSet = true;
}
bool UserNotificationResource::dataIsSet() const
{
    return m_DataIsSet;
}

void UserNotificationResource::unsetData()
{
    m_DataIsSet = false;
}

utility::string_t UserNotificationResource::getNotificationId() const
{
    return m_Notification_id;
}


void UserNotificationResource::setNotificationId(utility::string_t value)
{
    m_Notification_id = value;
    
}
utility::string_t UserNotificationResource::getNotificationTypeId() const
{
    return m_Notification_type_id;
}


void UserNotificationResource::setNotificationTypeId(utility::string_t value)
{
    m_Notification_type_id = value;
    
}
utility::string_t UserNotificationResource::getRecipient() const
{
    return m_Recipient;
}


void UserNotificationResource::setRecipient(utility::string_t value)
{
    m_Recipient = value;
    
}
utility::string_t UserNotificationResource::getRecipientType() const
{
    return m_Recipient_type;
}


void UserNotificationResource::setRecipientType(utility::string_t value)
{
    m_Recipient_type = value;
    
}
int64_t UserNotificationResource::getRetrieveDate() const
{
    return m_Retrieve_date;
}


void UserNotificationResource::setRetrieveDate(int64_t value)
{
    m_Retrieve_date = value;
    m_Retrieve_dateIsSet = true;
}
bool UserNotificationResource::retrieveDateIsSet() const
{
    return m_Retrieve_dateIsSet;
}

void UserNotificationResource::unsetRetrieve_date()
{
    m_Retrieve_dateIsSet = false;
}

int64_t UserNotificationResource::getSendDate() const
{
    return m_Send_date;
}


void UserNotificationResource::setSendDate(int64_t value)
{
    m_Send_date = value;
    m_Send_dateIsSet = true;
}
bool UserNotificationResource::sendDateIsSet() const
{
    return m_Send_dateIsSet;
}

void UserNotificationResource::unsetSend_date()
{
    m_Send_dateIsSet = false;
}

utility::string_t UserNotificationResource::getStatus() const
{
    return m_Status;
}


void UserNotificationResource::setStatus(utility::string_t value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool UserNotificationResource::statusIsSet() const
{
    return m_StatusIsSet;
}

void UserNotificationResource::unsetStatus()
{
    m_StatusIsSet = false;
}

int32_t UserNotificationResource::getUserId() const
{
    return m_User_id;
}


void UserNotificationResource::setUserId(int32_t value)
{
    m_User_id = value;
    
}
}
}
}
}

