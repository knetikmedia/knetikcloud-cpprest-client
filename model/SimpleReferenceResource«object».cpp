/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SimpleReferenceResource«object».h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

SimpleReferenceResource«object»::SimpleReferenceResource«object»()
{
    m_Name = U("");
    m_NameIsSet = false;
    
}

SimpleReferenceResource«object»::~SimpleReferenceResource«object»()
{
}

void SimpleReferenceResource«object»::validate()
{
    // TODO: implement validation
}

web::json::value SimpleReferenceResource«object»::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("id")] = ModelBase::toJson(m_Id);
    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }
    

    return val;
}

void SimpleReferenceResource«object»::fromJson(web::json::value& val)
{
    std::shared_ptr<Object> newId(nullptr);
    newId->fromJson(val[U("id")]);
    setId( newItem );
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
        
    }
    
}

void SimpleReferenceResource«object»::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    m_Id->toMultipart(multipart, U("id."));
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
    
}

void SimpleReferenceResource«object»::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    std::shared_ptr<Object> newId(nullptr);
    newId->fromMultiPart(multipart, U("id."));
    setId( newId );
    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
        
    }
    
}


std::shared_ptr<Object> SimpleReferenceResource«object»::getId() const
{
    return m_Id;
}
void SimpleReferenceResource«object»::setId(std::shared_ptr<Object> value)
{
    m_Id = value;
    
}
utility::string_t SimpleReferenceResource«object»::getName() const
{
    return m_Name;
}
void SimpleReferenceResource«object»::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool SimpleReferenceResource«object»::nameIsSet() const
{
    return m_NameIsSet;
}
void SimpleReferenceResource«object»::unsetName()
{
    m_NameIsSet = false;
}

}
}
}
}

