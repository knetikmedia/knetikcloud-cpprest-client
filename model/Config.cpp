/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Config.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

Config::Config()
{
    m_Description = U("");
    m_DescriptionIsSet = false;
    m_Name = U("");
    m_Public_read = false;
    m_Public_readIsSet = false;
    m_Value = U("");
    m_ValueIsSet = false;
    
}

Config::~Config()
{
}

void Config::validate()
{
    // TODO: implement validation
}

web::json::value Config::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_DescriptionIsSet)
    {
        val[U("description")] = ModelBase::toJson(m_Description);
    }
    val[U("name")] = ModelBase::toJson(m_Name);
    if(m_Public_readIsSet)
    {
        val[U("public_read")] = ModelBase::toJson(m_Public_read);
    }
    if(m_ValueIsSet)
    {
        val[U("value")] = ModelBase::toJson(m_Value);
    }
    

    return val;
}

void Config::fromJson(web::json::value& val)
{
    if(val.has_field(U("description")))
    {
        setDescription(ModelBase::stringFromJson(val[U("description")]));
        
    }
    setName(ModelBase::stringFromJson(val[U("name")]));
    if(val.has_field(U("public_read")))
    {
        setPublicRead(ModelBase::boolFromJson(val[U("public_read")]));
    }
    if(val.has_field(U("value")))
    {
        setValue(ModelBase::stringFromJson(val[U("value")]));
        
    }
    
}

void Config::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("description"), m_Description));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    if(m_Public_readIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("public_read"), m_Public_read));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("value"), m_Value));
        
    }
    
}

void Config::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("description"))));
        
    }
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    if(multipart->hasContent(U("public_read")))
    {
        setPublicRead(ModelBase::boolFromHttpContent(multipart->getContent(U("public_read"))));
    }
    if(multipart->hasContent(U("value")))
    {
        setValue(ModelBase::stringFromHttpContent(multipart->getContent(U("value"))));
        
    }
    
}


utility::string_t Config::getDescription() const
{
    return m_Description;
}
void Config::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool Config::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void Config::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t Config::getName() const
{
    return m_Name;
}
void Config::setName(utility::string_t value)
{
    m_Name = value;
    
}
bool Config::getPublicRead() const
{
    return m_Public_read;
}
void Config::setPublicRead(bool value)
{
    m_Public_read = value;
    m_Public_readIsSet = true;
}
bool Config::public_readIsSet() const
{
    return m_Public_readIsSet;
}
void Config::unsetPublic_read()
{
    m_Public_readIsSet = false;
}
utility::string_t Config::getValue() const
{
    return m_Value;
}
void Config::setValue(utility::string_t value)
{
    m_Value = value;
    m_ValueIsSet = true;
}
bool Config::valueIsSet() const
{
    return m_ValueIsSet;
}
void Config::unsetValue()
{
    m_ValueIsSet = false;
}

}
}
}
}

