/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * NotificationResource.h
 *
 * 
 */

#ifndef NotificationResource_H_
#define NotificationResource_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "Object.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  NotificationResource
    : public ModelBase
{
public:
    NotificationResource();
    virtual ~NotificationResource();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// NotificationResource members

    /// <summary>
    /// The data to send to websockets. Also used to fill in the templates
    /// </summary>
    std::shared_ptr<Object> getData() const;
    bool dataIsSet() const;
    void unsetData();
    void setData(std::shared_ptr<Object> value);
    /// <summary>
    /// The id of this individual notification. Default: random
    /// </summary>
    utility::string_t getNotificationId() const;
    bool notificationIdIsSet() const;
    void unsetNotification_id();
    void setNotificationId(utility::string_t value);
    /// <summary>
    /// The id of the notification type which will define message templates
    /// </summary>
    utility::string_t getNotificationTypeId() const;
        void setNotificationTypeId(utility::string_t value);
    /// <summary>
    /// The id of the recipient, dependent on the recipient_type. The user&#39;s id or the topic&#39;s id
    /// </summary>
    utility::string_t getRecipient() const;
        void setRecipient(utility::string_t value);
    /// <summary>
    /// The type of recipient for the notification. Either a user, or all users in a topic
    /// </summary>
    utility::string_t getRecipientType() const;
        void setRecipientType(utility::string_t value);
    /// <summary>
    /// The date this notification was sent
    /// </summary>
    int64_t getSendDate() const;
    bool sendDateIsSet() const;
    void unsetSend_date();
    void setSendDate(int64_t value);

protected:
    std::shared_ptr<Object> m_Data;
    bool m_DataIsSet;
    utility::string_t m_Notification_id;
    bool m_Notification_idIsSet;
    utility::string_t m_Notification_type_id;
        utility::string_t m_Recipient;
        utility::string_t m_Recipient_type;
        int64_t m_Send_date;
    bool m_Send_dateIsSet;
};

}
}
}
}

#endif /* NotificationResource_H_ */
