/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Store_SalesApi.h
 *
 * 
 */

#ifndef Store_SalesApi_H_
#define Store_SalesApi_H_


#include "ApiClient.h"

#include "CatalogSale.h"
#include "PageResource«CatalogSale».h"
#include "Result.h"
#include <cpprest/details/basic_types.h>

namespace com {
namespace knetikcloud {
namespace client {
namespace api {

using namespace com::knetikcloud::client::model;

class  Store_SalesApi
{
public:
    Store_SalesApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~Store_SalesApi();
    /// <summary>
    /// Create a sale
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; SALES_ADMIN
    /// </remarks>
    /// <param name="catalogSale">The catalog sale object (optional)</param>
    pplx::task<std::shared_ptr<CatalogSale>> createCatalogSale(std::shared_ptr<CatalogSale> catalogSale);
    /// <summary>
    /// Delete a sale
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; SALES_ADMIN
    /// </remarks>
    /// <param name="id">The id of the sale</param>
    pplx::task<void> deleteCatalogSale(int32_t id);
    /// <summary>
    /// Get a single sale
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; SALES_USER or SALES_ADMIN
    /// </remarks>
    /// <param name="id">The id of the sale</param>
    pplx::task<std::shared_ptr<CatalogSale>> getCatalogSale(int32_t id);
    /// <summary>
    /// List and search sales
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; SALES_USER or SALES_ADMIN
    /// </remarks>
    /// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
    pplx::task<std::shared_ptr<PageResource«CatalogSale»>> getCatalogSales(int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// Update a sale
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; SALES_ADMIN
    /// </remarks>
    /// <param name="id">The id of the sale</param>/// <param name="catalogSale">The catalog sale object (optional)</param>
    pplx::task<std::shared_ptr<CatalogSale>> updateCatalogSale(int32_t id, std::shared_ptr<CatalogSale> catalogSale);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* Store_SalesApi_H_ */

