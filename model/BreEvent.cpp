/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BreEvent.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

BreEvent::BreEvent()
{
    m_Event_name = U("");
}

BreEvent::~BreEvent()
{
}

void BreEvent::validate()
{
    // TODO: implement validation
}

web::json::value BreEvent::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("event_name")] = ModelBase::toJson(m_Event_name);
    val[U("params")] = ModelBase::toJson(m_Params);

    return val;
}

void BreEvent::fromJson(web::json::value& val)
{
    setEventName(ModelBase::stringFromJson(val[U("event_name")]));
    std::shared_ptr<Object> newParams(nullptr);
    newParams->fromJson(val[U("params")]);
    setParams( newParams );
}

void BreEvent::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("event_name"), m_Event_name));
    m_Params->toMultipart(multipart, U("params."));
}

void BreEvent::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setEventName(ModelBase::stringFromHttpContent(multipart->getContent(U("event_name"))));
    std::shared_ptr<Object> newParams(nullptr);
    newParams->fromMultiPart(multipart, U("params."));
    setParams( newParams );
}

utility::string_t BreEvent::getEventName() const
{
    return m_Event_name;
}


void BreEvent::setEventName(utility::string_t value)
{
    m_Event_name = value;
    
}
std::shared_ptr<Object> BreEvent::getParams() const
{
    return m_Params;
}


void BreEvent::setParams(std::shared_ptr<Object> value)
{
    m_Params = value;
    
}
}
}
}
}

