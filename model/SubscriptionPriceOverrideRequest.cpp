/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SubscriptionPriceOverrideRequest.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

SubscriptionPriceOverrideRequest::SubscriptionPriceOverrideRequest()
{
    m_New_price = 0.0;
    m_New_priceIsSet = false;
    m_Reason = U("");
    m_ReasonIsSet = false;
}

SubscriptionPriceOverrideRequest::~SubscriptionPriceOverrideRequest()
{
}

void SubscriptionPriceOverrideRequest::validate()
{
    // TODO: implement validation
}

web::json::value SubscriptionPriceOverrideRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_New_priceIsSet)
    {
        val[U("new_price")] = ModelBase::toJson(m_New_price);
    }
    if(m_ReasonIsSet)
    {
        val[U("reason")] = ModelBase::toJson(m_Reason);
    }

    return val;
}

void SubscriptionPriceOverrideRequest::fromJson(web::json::value& val)
{
    if(val.has_field(U("new_price")))
    {
        setNewPrice(ModelBase::doubleFromJson(val[U("new_price")]));
    }
    if(val.has_field(U("reason")))
    {
        setReason(ModelBase::stringFromJson(val[U("reason")]));
    }
}

void SubscriptionPriceOverrideRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_New_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("new_price"), m_New_price));
    }
    if(m_ReasonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("reason"), m_Reason));
        
    }
}

void SubscriptionPriceOverrideRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("new_price")))
    {
        setNewPrice(ModelBase::doubleFromHttpContent(multipart->getContent(U("new_price"))));
    }
    if(multipart->hasContent(U("reason")))
    {
        setReason(ModelBase::stringFromHttpContent(multipart->getContent(U("reason"))));
    }
}

double SubscriptionPriceOverrideRequest::getNewPrice() const
{
    return m_New_price;
}


void SubscriptionPriceOverrideRequest::setNewPrice(double value)
{
    m_New_price = value;
    m_New_priceIsSet = true;
}
bool SubscriptionPriceOverrideRequest::newPriceIsSet() const
{
    return m_New_priceIsSet;
}

void SubscriptionPriceOverrideRequest::unsetNew_price()
{
    m_New_priceIsSet = false;
}

utility::string_t SubscriptionPriceOverrideRequest::getReason() const
{
    return m_Reason;
}


void SubscriptionPriceOverrideRequest::setReason(utility::string_t value)
{
    m_Reason = value;
    m_ReasonIsSet = true;
}
bool SubscriptionPriceOverrideRequest::reasonIsSet() const
{
    return m_ReasonIsSet;
}

void SubscriptionPriceOverrideRequest::unsetReason()
{
    m_ReasonIsSet = false;
}

}
}
}
}

