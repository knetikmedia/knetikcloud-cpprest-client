/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * CouponItem.h
 *
 * 
 */

#ifndef CouponItem_H_
#define CouponItem_H_


#include "StoreItem.h"
#include "Behavior.h"
#include "Sku.h"
#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>
#include "Property.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  CouponItem
    : public StoreItem
{
public:
    CouponItem();
    virtual ~CouponItem();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CouponItem members

    /// <summary>
    /// The type of coupon
    /// </summary>
    utility::string_t getCouponTypeHint() const;
        void setCouponTypeHint(utility::string_t value);
    /// <summary>
    /// The amount this coupon is maxed out at.  Applies if coupon_type_hint is coupon_cart
    /// </summary>
    double getDiscountMax() const;
    bool discountMaxIsSet() const;
    void unsetDiscount_max();
    void setDiscountMax(double value);
    /// <summary>
    /// The minimium amount needed in the cart for the coupon to apply.  Applies if coupon_type_hint is coupon_cart
    /// </summary>
    double getDiscountMinCartValue() const;
    bool discountMinCartValueIsSet() const;
    void unsetDiscount_min_cart_value();
    void setDiscountMinCartValue(double value);
    /// <summary>
    /// The type of discount in terms of how it deducts price. Value based discount not available for coupon_cart type coupons
    /// </summary>
    utility::string_t getDiscountType() const;
        void setDiscountType(utility::string_t value);
    /// <summary>
    /// The amount the coupon will discount the item. If discount_type is &#39;value&#39; this will be a flat amount of currency. If discount type is &#39;percentage&#39; this will be a fraction (0.2 for 20% off) multiplied by the price of the matching item or items.
    /// </summary>
    double getDiscountValue() const;
        void setDiscountValue(double value);
    /// <summary>
    /// Whether this coupon is exclusive or not (true means cannot be in same cart as another).  Default &#x3D; false
    /// </summary>
    bool getExclusive() const;
    bool exclusiveIsSet() const;
    void unsetExclusive();
    void setExclusive(bool value);
    /// <summary>
    /// The id of the item the coupon is applied to.  Applies if coupon_type_hint is coupon_single_item or coupon_voucher
    /// </summary>
    int32_t getItemId() const;
    bool itemIdIsSet() const;
    void unsetItem_id();
    void setItemId(int32_t value);
    /// <summary>
    /// The maximum quantity of items the coupon can apply to, null if no limit and minimum 1 otherwise.  Applies if coupon_type_hint is coupon_single_item or coupon_voucher
    /// </summary>
    int32_t getMaxQuantity() const;
    bool maxQuantityIsSet() const;
    void unsetMax_quantity();
    void setMaxQuantity(int32_t value);
    /// <summary>
    /// Whether this coupon is exclusive to itself or not (true means cannot add two of this same coupon to the same cart).  Default &#x3D; false
    /// </summary>
    bool getSelfExclusive() const;
    bool selfExclusiveIsSet() const;
    void unsetSelf_exclusive();
    void setSelfExclusive(bool value);
    /// <summary>
    /// A list of tags for a coupon.  The coupon can only apply to an item that has at least one of these tags.  Applies if coupon_type_hint is coupon_tag
    /// </summary>
    std::vector<utility::string_t>& getValidForTags();
    bool validForTagsIsSet() const;
    void unsetValid_for_tags();
    void setValidForTags(std::vector<utility::string_t> value);

protected:
    utility::string_t m_Coupon_type_hint;
        double m_Discount_max;
    bool m_Discount_maxIsSet;
    double m_Discount_min_cart_value;
    bool m_Discount_min_cart_valueIsSet;
    utility::string_t m_Discount_type;
        double m_Discount_value;
        bool m_Exclusive;
    bool m_ExclusiveIsSet;
    int32_t m_Item_id;
    bool m_Item_idIsSet;
    int32_t m_Max_quantity;
    bool m_Max_quantityIsSet;
    bool m_Self_exclusive;
    bool m_Self_exclusiveIsSet;
    std::vector<utility::string_t> m_Valid_for_tags;
    bool m_Valid_for_tagsIsSet;
};

}
}
}
}

#endif /* CouponItem_H_ */
