/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * MediaModerationApi.h
 *
 * 
 */

#ifndef MediaModerationApi_H_
#define MediaModerationApi_H_


#include "ApiClient.h"

#include "FlagReportResource.h"
#include "PageResource«FlagReportResource».h"
#include "Result.h"
#include <cpprest/details/basic_types.h>

namespace com {
namespace knetikcloud {
namespace client {
namespace api {

using namespace com::knetikcloud::client::model;

class  MediaModerationApi
{
public:
    MediaModerationApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~MediaModerationApi();
    /// <summary>
    /// Get a flag report
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">The flag report id</param>
    pplx::task<std::shared_ptr<FlagReportResource>> getModerationReport(int64_t id);
    /// <summary>
    /// Returns a page of flag reports
    /// </summary>
    /// <remarks>
    /// Context can be either a free-form string or a pre-defined context name
    /// </remarks>
    /// <param name="excludeResolved">Ignore resolved context (optional, default to true)</param>/// <param name="filterContext">Filter by moderation context (optional)</param>/// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
    pplx::task<std::shared_ptr<PageResource«FlagReportResource»>> getModerationReports(bool excludeResolved, utility::string_t filterContext, int32_t size, int32_t page);
    /// <summary>
    /// Update a flag report
    /// </summary>
    /// <remarks>
    /// Lets you set the resolution of a report. Resolution types is {banned,ignore} in case of &#39;banned&#39; you will need to pass the reason.
    /// </remarks>
    /// <param name="id">The flag report id</param>/// <param name="flagReportResource">The new flag report (optional)</param>
    pplx::task<void> updateModerationReport(int64_t id, std::shared_ptr<FlagReportResource> flagReportResource);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* MediaModerationApi_H_ */

