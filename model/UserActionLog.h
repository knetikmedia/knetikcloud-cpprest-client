/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * UserActionLog.h
 *
 * 
 */

#ifndef UserActionLog_H_
#define UserActionLog_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  UserActionLog
    : public ModelBase
{
public:
    UserActionLog();
    virtual ~UserActionLog();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UserActionLog members

    /// <summary>
    /// A description of the action taken
    /// </summary>
    utility::string_t getActionDescription() const;
        void setActionDescription(utility::string_t value);
    /// <summary>
    /// The name of the action taken
    /// </summary>
    utility::string_t getActionName() const;
        void setActionName(utility::string_t value);
    /// <summary>
    /// The date of the action, unix timestamp in seconds
    /// </summary>
    int64_t getCreatedDate() const;
    bool createdDateIsSet() const;
    void unsetCreated_date();
    void setCreatedDate(int64_t value);
    /// <summary>
    /// A map of additional details such as the target of the action
    /// </summary>
    std::map<utility::string_t, utility::string_t>& getDetails();
    bool detailsIsSet() const;
    void unsetDetails();
    void setDetails(std::map<utility::string_t, utility::string_t> value);
    /// <summary>
    /// The id of the log entry
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();
    void setId(utility::string_t value);
    /// <summary>
    /// The id of the api request that spawned the action, if generated internally
    /// </summary>
    utility::string_t getRequestId() const;
    bool requestIdIsSet() const;
    void unsetRequest_id();
    void setRequestId(utility::string_t value);
    /// <summary>
    /// The id of the user that took the action, if any. Read-only if not posting with LOGS_ADMIN
    /// </summary>
    int32_t getUserId() const;
    bool userIdIsSet() const;
    void unsetUser_id();
    void setUserId(int32_t value);

protected:
    utility::string_t m_Action_description;
        utility::string_t m_Action_name;
        int64_t m_Created_date;
    bool m_Created_dateIsSet;
    std::map<utility::string_t, utility::string_t> m_Details;
    bool m_DetailsIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Request_id;
    bool m_Request_idIsSet;
    int32_t m_User_id;
    bool m_User_idIsSet;
};

}
}
}
}

#endif /* UserActionLog_H_ */
