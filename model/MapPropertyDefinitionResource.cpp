/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "MapPropertyDefinitionResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

MapPropertyDefinitionResource::MapPropertyDefinitionResource()
{
    m_Allow_additional = false;
    m_Allow_additionalIsSet = false;
    m_PropertiesIsSet = false;
}

MapPropertyDefinitionResource::~MapPropertyDefinitionResource()
{
}

void MapPropertyDefinitionResource::validate()
{
    // TODO: implement validation
}

web::json::value MapPropertyDefinitionResource::toJson() const
{
    web::json::value val = this->PropertyDefinitionResource::toJson();

    if(m_Allow_additionalIsSet)
    {
        val[U("allow_additional")] = ModelBase::toJson(m_Allow_additional);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Properties )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("properties")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void MapPropertyDefinitionResource::fromJson(web::json::value& val)
{
    this->PropertyDefinitionResource::fromJson(val);

    if(val.has_field(U("allow_additional")))
    {
        setAllowAdditional(ModelBase::boolFromJson(val[U("allow_additional")]));
    }
    {
        m_Properties.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("properties")))
        {
        for( auto& item : val[U("properties")].as_array() )
        {
            if(item.is_null())
            {
                m_Properties.push_back( std::shared_ptr<PropertyDefinitionResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<PropertyDefinitionResource> newItem(new PropertyDefinitionResource());
                newItem->fromJson(item);
                m_Properties.push_back( newItem );
            }
        }
        }
    }
}

void MapPropertyDefinitionResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Field_listIsSet)
    {
        if (m_Field_list.get())
        {
            m_Field_list->toMultipart(multipart, U("field_list."));
        }
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("required"), m_Required));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("type"), m_Type));
    if(m_Allow_additionalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("allow_additional"), m_Allow_additional));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Properties )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("properties"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
}

void MapPropertyDefinitionResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("field_list")))
    {
        if(multipart->hasContent(U("field_list")))
        {
            std::shared_ptr<PropertyFieldListResource> newItem(new PropertyFieldListResource());
            newItem->fromMultiPart(multipart, U("field_list."));
            setFieldList( newItem );
        }
    }
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    setRequired(ModelBase::boolFromHttpContent(multipart->getContent(U("required"))));
    setType(ModelBase::stringFromHttpContent(multipart->getContent(U("type"))));
    if(multipart->hasContent(U("allow_additional")))
    {
        setAllowAdditional(ModelBase::boolFromHttpContent(multipart->getContent(U("allow_additional"))));
    }
    {
        m_Properties.clear();
        if(multipart->hasContent(U("properties")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("properties"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Properties.push_back( std::shared_ptr<PropertyDefinitionResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<PropertyDefinitionResource> newItem(new PropertyDefinitionResource());
                newItem->fromJson(item);
                m_Properties.push_back( newItem );
            }
        }
        }
    }
}

bool MapPropertyDefinitionResource::getAllowAdditional() const
{
    return m_Allow_additional;
}


void MapPropertyDefinitionResource::setAllowAdditional(bool value)
{
    m_Allow_additional = value;
    m_Allow_additionalIsSet = true;
}
bool MapPropertyDefinitionResource::allowAdditionalIsSet() const
{
    return m_Allow_additionalIsSet;
}

void MapPropertyDefinitionResource::unsetAllow_additional()
{
    m_Allow_additionalIsSet = false;
}

std::vector<std::shared_ptr<PropertyDefinitionResource>>& MapPropertyDefinitionResource::getProperties()
{
    return m_Properties;
}

void MapPropertyDefinitionResource::setProperties(std::vector<std::shared_ptr<PropertyDefinitionResource>> value)
{
    m_Properties = value;
    m_PropertiesIsSet = true;
}
bool MapPropertyDefinitionResource::propertiesIsSet() const
{
    return m_PropertiesIsSet;
}

void MapPropertyDefinitionResource::unsetProperties()
{
    m_PropertiesIsSet = false;
}

}
}
}
}

