/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ChallengeResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

ChallengeResource::ChallengeResource()
{
    m_Activities = 0;
    m_ActivitiesIsSet = false;
    m_Additional_propertiesIsSet = false;
    m_Campaign_id = 0;
    m_Campaign_idIsSet = false;
    m_Copy_of = 0;
    m_Copy_ofIsSet = false;
    m_Created_date = 0;
    m_Created_dateIsSet = false;
    m_End_date = 0;
    m_End_dateIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_Leaderboard_strategy = U("");
    m_Leaderboard_strategyIsSet = false;
    m_Long_description = U("");
    m_Long_descriptionIsSet = false;
    m_Name = U("");
    m_Next_event_date = 0;
    m_Next_event_dateIsSet = false;
    m_Reward_lag_minutes = 0;
    m_Reward_lag_minutesIsSet = false;
    m_Reward_setIsSet = false;
    m_ScheduleIsSet = false;
    m_Short_description = U("");
    m_Short_descriptionIsSet = false;
    m_Start_date = 0;
    m_Start_dateIsSet = false;
    m_Template = U("");
    m_TemplateIsSet = false;
    m_Updated_date = 0;
    m_Updated_dateIsSet = false;
    
}

ChallengeResource::~ChallengeResource()
{
}

void ChallengeResource::validate()
{
    // TODO: implement validation
}

web::json::value ChallengeResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ActivitiesIsSet)
    {
        val[U("activities")] = ModelBase::toJson(m_Activities);
    }
    if(m_Additional_propertiesIsSet)
    {
        val[U("additional_properties")] = ModelBase::toJson(m_Additional_properties);
    }
    if(m_Campaign_idIsSet)
    {
        val[U("campaign_id")] = ModelBase::toJson(m_Campaign_id);
    }
    if(m_Copy_ofIsSet)
    {
        val[U("copy_of")] = ModelBase::toJson(m_Copy_of);
    }
    if(m_Created_dateIsSet)
    {
        val[U("created_date")] = ModelBase::toJson(m_Created_date);
    }
    if(m_End_dateIsSet)
    {
        val[U("end_date")] = ModelBase::toJson(m_End_date);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_Leaderboard_strategyIsSet)
    {
        val[U("leaderboard_strategy")] = ModelBase::toJson(m_Leaderboard_strategy);
    }
    if(m_Long_descriptionIsSet)
    {
        val[U("long_description")] = ModelBase::toJson(m_Long_description);
    }
    val[U("name")] = ModelBase::toJson(m_Name);
    if(m_Next_event_dateIsSet)
    {
        val[U("next_event_date")] = ModelBase::toJson(m_Next_event_date);
    }
    if(m_Reward_lag_minutesIsSet)
    {
        val[U("reward_lag_minutes")] = ModelBase::toJson(m_Reward_lag_minutes);
    }
    if(m_Reward_setIsSet)
    {
        val[U("reward_set")] = ModelBase::toJson(m_Reward_set);
    }
    if(m_ScheduleIsSet)
    {
        val[U("schedule")] = ModelBase::toJson(m_Schedule);
    }
    if(m_Short_descriptionIsSet)
    {
        val[U("short_description")] = ModelBase::toJson(m_Short_description);
    }
    if(m_Start_dateIsSet)
    {
        val[U("start_date")] = ModelBase::toJson(m_Start_date);
    }
    if(m_TemplateIsSet)
    {
        val[U("template")] = ModelBase::toJson(m_Template);
    }
    if(m_Updated_dateIsSet)
    {
        val[U("updated_date")] = ModelBase::toJson(m_Updated_date);
    }
    

    return val;
}

void ChallengeResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("activities")))
    {
        setActivities(ModelBase::int32_tFromJson(val[U("activities")]));
    }
    if(val.has_field(U("additional_properties")))
    {
        if(!val[U("additional_properties")].is_null())
        {
            std::map<utility::string_t, std::shared_ptr<Property>> newItem(std::map<utility::string_t, Property>());
            newItem->fromJson(val[U("additional_properties")]);
            setAdditionalProperties( newItem );
        }
        
    }
    if(val.has_field(U("campaign_id")))
    {
        setCampaignId(ModelBase::int64_tFromJson(val[U("campaign_id")]));
    }
    if(val.has_field(U("copy_of")))
    {
        setCopyOf(ModelBase::int64_tFromJson(val[U("copy_of")]));
    }
    if(val.has_field(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromJson(val[U("created_date")]));
    }
    if(val.has_field(U("end_date")))
    {
        setEndDate(ModelBase::int64_tFromJson(val[U("end_date")]));
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int64_tFromJson(val[U("id")]));
    }
    if(val.has_field(U("leaderboard_strategy")))
    {
        setLeaderboardStrategy(ModelBase::stringFromJson(val[U("leaderboard_strategy")]));
        
    }
    if(val.has_field(U("long_description")))
    {
        setLongDescription(ModelBase::stringFromJson(val[U("long_description")]));
        
    }
    setName(ModelBase::stringFromJson(val[U("name")]));
    if(val.has_field(U("next_event_date")))
    {
        setNextEventDate(ModelBase::int64_tFromJson(val[U("next_event_date")]));
    }
    if(val.has_field(U("reward_lag_minutes")))
    {
        setRewardLagMinutes(ModelBase::int32_tFromJson(val[U("reward_lag_minutes")]));
    }
    if(val.has_field(U("reward_set")))
    {
        if(!val[U("reward_set")].is_null())
        {
            std::shared_ptr<RewardSetResource> newItem(new RewardSetResource());
            newItem->fromJson(val[U("reward_set")]);
            setRewardSet( newItem );
        }
        
    }
    if(val.has_field(U("schedule")))
    {
        if(!val[U("schedule")].is_null())
        {
            std::shared_ptr<Schedule> newItem(new Schedule());
            newItem->fromJson(val[U("schedule")]);
            setSchedule( newItem );
        }
        
    }
    if(val.has_field(U("short_description")))
    {
        setShortDescription(ModelBase::stringFromJson(val[U("short_description")]));
        
    }
    if(val.has_field(U("start_date")))
    {
        setStartDate(ModelBase::int64_tFromJson(val[U("start_date")]));
    }
    if(val.has_field(U("template")))
    {
        setTemplate(ModelBase::stringFromJson(val[U("template")]));
        
    }
    if(val.has_field(U("updated_date")))
    {
        setUpdatedDate(ModelBase::int64_tFromJson(val[U("updated_date")]));
    }
    
}

void ChallengeResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_ActivitiesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("activities"), m_Activities));
    }
    if(m_Additional_propertiesIsSet)
    {
        if (m_Additional_properties.get())
        {
            m_Additional_properties->toMultipart(multipart, U("additional_properties."));
        }
        
    }
    if(m_Campaign_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("campaign_id"), m_Campaign_id));
    }
    if(m_Copy_ofIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("copy_of"), m_Copy_of));
    }
    if(m_Created_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("created_date"), m_Created_date));
    }
    if(m_End_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("end_date"), m_End_date));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    if(m_Leaderboard_strategyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("leaderboard_strategy"), m_Leaderboard_strategy));
        
    }
    if(m_Long_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("long_description"), m_Long_description));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    if(m_Next_event_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("next_event_date"), m_Next_event_date));
    }
    if(m_Reward_lag_minutesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("reward_lag_minutes"), m_Reward_lag_minutes));
    }
    if(m_Reward_setIsSet)
    {
        if (m_Reward_set.get())
        {
            m_Reward_set->toMultipart(multipart, U("reward_set."));
        }
        
    }
    if(m_ScheduleIsSet)
    {
        if (m_Schedule.get())
        {
            m_Schedule->toMultipart(multipart, U("schedule."));
        }
        
    }
    if(m_Short_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("short_description"), m_Short_description));
        
    }
    if(m_Start_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("start_date"), m_Start_date));
    }
    if(m_TemplateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("template"), m_Template));
        
    }
    if(m_Updated_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("updated_date"), m_Updated_date));
    }
    
}

void ChallengeResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("activities")))
    {
        setActivities(ModelBase::int32_tFromHttpContent(multipart->getContent(U("activities"))));
    }
    if(multipart->hasContent(U("additional_properties")))
    {
        if(multipart->hasContent(U("additional_properties")))
        {
            std::map<utility::string_t, std::shared_ptr<Property>> newItem(std::map<utility::string_t, Property>());
            newItem->fromMultiPart(multipart, U("additional_properties."));
            setAdditionalProperties( newItem );
        }
        
    }
    if(multipart->hasContent(U("campaign_id")))
    {
        setCampaignId(ModelBase::int64_tFromHttpContent(multipart->getContent(U("campaign_id"))));
    }
    if(multipart->hasContent(U("copy_of")))
    {
        setCopyOf(ModelBase::int64_tFromHttpContent(multipart->getContent(U("copy_of"))));
    }
    if(multipart->hasContent(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("created_date"))));
    }
    if(multipart->hasContent(U("end_date")))
    {
        setEndDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("end_date"))));
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int64_tFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("leaderboard_strategy")))
    {
        setLeaderboardStrategy(ModelBase::stringFromHttpContent(multipart->getContent(U("leaderboard_strategy"))));
        
    }
    if(multipart->hasContent(U("long_description")))
    {
        setLongDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("long_description"))));
        
    }
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    if(multipart->hasContent(U("next_event_date")))
    {
        setNextEventDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("next_event_date"))));
    }
    if(multipart->hasContent(U("reward_lag_minutes")))
    {
        setRewardLagMinutes(ModelBase::int32_tFromHttpContent(multipart->getContent(U("reward_lag_minutes"))));
    }
    if(multipart->hasContent(U("reward_set")))
    {
        if(multipart->hasContent(U("reward_set")))
        {
            std::shared_ptr<RewardSetResource> newItem(new RewardSetResource());
            newItem->fromMultiPart(multipart, U("reward_set."));
            setRewardSet( newItem );
        }
        
    }
    if(multipart->hasContent(U("schedule")))
    {
        if(multipart->hasContent(U("schedule")))
        {
            std::shared_ptr<Schedule> newItem(new Schedule());
            newItem->fromMultiPart(multipart, U("schedule."));
            setSchedule( newItem );
        }
        
    }
    if(multipart->hasContent(U("short_description")))
    {
        setShortDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("short_description"))));
        
    }
    if(multipart->hasContent(U("start_date")))
    {
        setStartDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("start_date"))));
    }
    if(multipart->hasContent(U("template")))
    {
        setTemplate(ModelBase::stringFromHttpContent(multipart->getContent(U("template"))));
        
    }
    if(multipart->hasContent(U("updated_date")))
    {
        setUpdatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("updated_date"))));
    }
    
}


int32_t ChallengeResource::getActivities() const
{
    return m_Activities;
}
void ChallengeResource::setActivities(int32_t value)
{
    m_Activities = value;
    m_ActivitiesIsSet = true;
}
bool ChallengeResource::activitiesIsSet() const
{
    return m_ActivitiesIsSet;
}
void ChallengeResource::unsetActivities()
{
    m_ActivitiesIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<Property>>& ChallengeResource::getAdditionalProperties()
{
    return m_Additional_properties;
}
bool ChallengeResource::additional_propertiesIsSet() const
{
    return m_Additional_propertiesIsSet;
}
void ChallengeResource::unsetAdditional_properties()
{
    m_Additional_propertiesIsSet = false;
}
int64_t ChallengeResource::getCampaignId() const
{
    return m_Campaign_id;
}
void ChallengeResource::setCampaignId(int64_t value)
{
    m_Campaign_id = value;
    m_Campaign_idIsSet = true;
}
bool ChallengeResource::campaign_idIsSet() const
{
    return m_Campaign_idIsSet;
}
void ChallengeResource::unsetCampaign_id()
{
    m_Campaign_idIsSet = false;
}
int64_t ChallengeResource::getCopyOf() const
{
    return m_Copy_of;
}
void ChallengeResource::setCopyOf(int64_t value)
{
    m_Copy_of = value;
    m_Copy_ofIsSet = true;
}
bool ChallengeResource::copy_ofIsSet() const
{
    return m_Copy_ofIsSet;
}
void ChallengeResource::unsetCopy_of()
{
    m_Copy_ofIsSet = false;
}
int64_t ChallengeResource::getCreatedDate() const
{
    return m_Created_date;
}
void ChallengeResource::setCreatedDate(int64_t value)
{
    m_Created_date = value;
    m_Created_dateIsSet = true;
}
bool ChallengeResource::created_dateIsSet() const
{
    return m_Created_dateIsSet;
}
void ChallengeResource::unsetCreated_date()
{
    m_Created_dateIsSet = false;
}
int64_t ChallengeResource::getEndDate() const
{
    return m_End_date;
}
void ChallengeResource::setEndDate(int64_t value)
{
    m_End_date = value;
    m_End_dateIsSet = true;
}
bool ChallengeResource::end_dateIsSet() const
{
    return m_End_dateIsSet;
}
void ChallengeResource::unsetEnd_date()
{
    m_End_dateIsSet = false;
}
int64_t ChallengeResource::getId() const
{
    return m_Id;
}
void ChallengeResource::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool ChallengeResource::idIsSet() const
{
    return m_IdIsSet;
}
void ChallengeResource::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t ChallengeResource::getLeaderboardStrategy() const
{
    return m_Leaderboard_strategy;
}
void ChallengeResource::setLeaderboardStrategy(utility::string_t value)
{
    m_Leaderboard_strategy = value;
    m_Leaderboard_strategyIsSet = true;
}
bool ChallengeResource::leaderboard_strategyIsSet() const
{
    return m_Leaderboard_strategyIsSet;
}
void ChallengeResource::unsetLeaderboard_strategy()
{
    m_Leaderboard_strategyIsSet = false;
}
utility::string_t ChallengeResource::getLongDescription() const
{
    return m_Long_description;
}
void ChallengeResource::setLongDescription(utility::string_t value)
{
    m_Long_description = value;
    m_Long_descriptionIsSet = true;
}
bool ChallengeResource::long_descriptionIsSet() const
{
    return m_Long_descriptionIsSet;
}
void ChallengeResource::unsetLong_description()
{
    m_Long_descriptionIsSet = false;
}
utility::string_t ChallengeResource::getName() const
{
    return m_Name;
}
void ChallengeResource::setName(utility::string_t value)
{
    m_Name = value;
    
}
int64_t ChallengeResource::getNextEventDate() const
{
    return m_Next_event_date;
}
void ChallengeResource::setNextEventDate(int64_t value)
{
    m_Next_event_date = value;
    m_Next_event_dateIsSet = true;
}
bool ChallengeResource::next_event_dateIsSet() const
{
    return m_Next_event_dateIsSet;
}
void ChallengeResource::unsetNext_event_date()
{
    m_Next_event_dateIsSet = false;
}
int32_t ChallengeResource::getRewardLagMinutes() const
{
    return m_Reward_lag_minutes;
}
void ChallengeResource::setRewardLagMinutes(int32_t value)
{
    m_Reward_lag_minutes = value;
    m_Reward_lag_minutesIsSet = true;
}
bool ChallengeResource::reward_lag_minutesIsSet() const
{
    return m_Reward_lag_minutesIsSet;
}
void ChallengeResource::unsetReward_lag_minutes()
{
    m_Reward_lag_minutesIsSet = false;
}
std::shared_ptr<RewardSetResource> ChallengeResource::getRewardSet() const
{
    return m_Reward_set;
}
void ChallengeResource::setRewardSet(std::shared_ptr<RewardSetResource> value)
{
    m_Reward_set = value;
    m_Reward_setIsSet = true;
}
bool ChallengeResource::reward_setIsSet() const
{
    return m_Reward_setIsSet;
}
void ChallengeResource::unsetReward_set()
{
    m_Reward_setIsSet = false;
}
std::shared_ptr<Schedule> ChallengeResource::getSchedule() const
{
    return m_Schedule;
}
void ChallengeResource::setSchedule(std::shared_ptr<Schedule> value)
{
    m_Schedule = value;
    m_ScheduleIsSet = true;
}
bool ChallengeResource::scheduleIsSet() const
{
    return m_ScheduleIsSet;
}
void ChallengeResource::unsetSchedule()
{
    m_ScheduleIsSet = false;
}
utility::string_t ChallengeResource::getShortDescription() const
{
    return m_Short_description;
}
void ChallengeResource::setShortDescription(utility::string_t value)
{
    m_Short_description = value;
    m_Short_descriptionIsSet = true;
}
bool ChallengeResource::short_descriptionIsSet() const
{
    return m_Short_descriptionIsSet;
}
void ChallengeResource::unsetShort_description()
{
    m_Short_descriptionIsSet = false;
}
int64_t ChallengeResource::getStartDate() const
{
    return m_Start_date;
}
void ChallengeResource::setStartDate(int64_t value)
{
    m_Start_date = value;
    m_Start_dateIsSet = true;
}
bool ChallengeResource::start_dateIsSet() const
{
    return m_Start_dateIsSet;
}
void ChallengeResource::unsetStart_date()
{
    m_Start_dateIsSet = false;
}
utility::string_t ChallengeResource::getTemplate() const
{
    return m_Template;
}
void ChallengeResource::setTemplate(utility::string_t value)
{
    m_Template = value;
    m_TemplateIsSet = true;
}
bool ChallengeResource::templateIsSet() const
{
    return m_TemplateIsSet;
}
void ChallengeResource::unsetTemplate()
{
    m_TemplateIsSet = false;
}
int64_t ChallengeResource::getUpdatedDate() const
{
    return m_Updated_date;
}
void ChallengeResource::setUpdatedDate(int64_t value)
{
    m_Updated_date = value;
    m_Updated_dateIsSet = true;
}
bool ChallengeResource::updated_dateIsSet() const
{
    return m_Updated_dateIsSet;
}
void ChallengeResource::unsetUpdated_date()
{
    m_Updated_dateIsSet = false;
}

}
}
}
}

