/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * MapPropertyDefinitionResource.h
 *
 * 
 */

#ifndef MapPropertyDefinitionResource_H_
#define MapPropertyDefinitionResource_H_


#include "PropertyFieldListResource.h"
#include <cpprest/details/basic_types.h>
#include "PropertyDefinitionResource.h"
#include <vector>

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  MapPropertyDefinitionResource
    : public PropertyDefinitionResource
{
public:
    MapPropertyDefinitionResource();
    virtual ~MapPropertyDefinitionResource();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// MapPropertyDefinitionResource members

    /// <summary>
    /// Whether to allow additional properties beyond those specified or not
    /// </summary>
    bool getAllowAdditional() const;
    bool allowAdditionalIsSet() const;
    void unsetAllow_additional();
    void setAllowAdditional(bool value);
    /// <summary>
    /// If provided, a list of property definitions for each map entry
    /// </summary>
    std::vector<std::shared_ptr<PropertyDefinitionResource>>& getProperties();
    bool propertiesIsSet() const;
    void unsetProperties();
    void setProperties(std::vector<std::shared_ptr<PropertyDefinitionResource>> value);

protected:
    bool m_Allow_additional;
    bool m_Allow_additionalIsSet;
    std::vector<std::shared_ptr<PropertyDefinitionResource>> m_Properties;
    bool m_PropertiesIsSet;
};

}
}
}
}

#endif /* MapPropertyDefinitionResource_H_ */
