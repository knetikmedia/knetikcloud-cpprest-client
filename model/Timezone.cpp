/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Timezone.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Timezone::Timezone()
{
    m_Code = U("");
    m_CodeIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_Name = U("");
    m_NameIsSet = false;
    m_Offset = 0.0;
    m_OffsetIsSet = false;
    
}

Timezone::~Timezone()
{
}

void Timezone::validate()
{
    // TODO: implement validation
}

web::json::value Timezone::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CodeIsSet)
    {
        val[U("code")] = ModelBase::toJson(m_Code);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }
    if(m_OffsetIsSet)
    {
        val[U("offset")] = ModelBase::toJson(m_Offset);
    }
    

    return val;
}

void Timezone::fromJson(web::json::value& val)
{
    if(val.has_field(U("code")))
    {
        setCode(ModelBase::stringFromJson(val[U("code")]));
        
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int32_tFromJson(val[U("id")]));
    }
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
        
    }
    if(val.has_field(U("offset")))
    {
        setOffset(ModelBase::doubleFromJson(val[U("offset")]));
    }
    
}

void Timezone::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("code"), m_Code));
        
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
    if(m_OffsetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("offset"), m_Offset));
    }
    
}

void Timezone::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("code")))
    {
        setCode(ModelBase::stringFromHttpContent(multipart->getContent(U("code"))));
        
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
        
    }
    if(multipart->hasContent(U("offset")))
    {
        setOffset(ModelBase::doubleFromHttpContent(multipart->getContent(U("offset"))));
    }
    
}


utility::string_t Timezone::getCode() const
{
    return m_Code;
}
void Timezone::setCode(utility::string_t value)
{
    m_Code = value;
    m_CodeIsSet = true;
}
bool Timezone::codeIsSet() const
{
    return m_CodeIsSet;
}
void Timezone::unsetCode()
{
    m_CodeIsSet = false;
}
int32_t Timezone::getId() const
{
    return m_Id;
}
void Timezone::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Timezone::idIsSet() const
{
    return m_IdIsSet;
}
void Timezone::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Timezone::getName() const
{
    return m_Name;
}
void Timezone::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool Timezone::nameIsSet() const
{
    return m_NameIsSet;
}
void Timezone::unsetName()
{
    m_NameIsSet = false;
}
double Timezone::getOffset() const
{
    return m_Offset;
}
void Timezone::setOffset(double value)
{
    m_Offset = value;
    m_OffsetIsSet = true;
}
bool Timezone::offsetIsSet() const
{
    return m_OffsetIsSet;
}
void Timezone::unsetOffset()
{
    m_OffsetIsSet = false;
}

}
}
}
}

