/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * GroupMember.h
 *
 * 
 */

#ifndef GroupMember_H_
#define GroupMember_H_


#include "ModelBase.h"

#include "Group.h"
#include <cpprest/details/basic_types.h>
#include "User.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  GroupMember
    : public ModelBase
{
public:
    GroupMember();
    virtual ~GroupMember();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// GroupMember members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Group> getGroup() const;
    void setGroup(std::shared_ptr<Group> value);
    bool groupIsSet() const;
    void unsetGroup();
    /// <summary>
    /// 
    /// </summary>
    bool getSecondary() const;
    void setSecondary(bool value);
    bool secondaryIsSet() const;
    void unsetSecondary();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getStatus() const;
    void setStatus(utility::string_t value);
    bool statusIsSet() const;
    void unsetStatus();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<User> getUser() const;
    void setUser(std::shared_ptr<User> value);
    bool userIsSet() const;
    void unsetUser();

protected:
    std::shared_ptr<Group> m_Group;
    bool m_GroupIsSet;
bool m_Secondary;
    bool m_SecondaryIsSet;
utility::string_t m_Status;
    bool m_StatusIsSet;
std::shared_ptr<User> m_User;
    bool m_UserIsSet;
};

}
}
}
}

#endif /* GroupMember_H_ */
