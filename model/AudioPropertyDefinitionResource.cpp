/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "AudioPropertyDefinitionResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

AudioPropertyDefinitionResource::AudioPropertyDefinitionResource()
{
    m_File_type = U("");
    m_File_typeIsSet = false;
    m_Max_length = 0;
    m_Max_lengthIsSet = false;
    m_Min_length = 0;
    m_Min_lengthIsSet = false;
}

AudioPropertyDefinitionResource::~AudioPropertyDefinitionResource()
{
}

void AudioPropertyDefinitionResource::validate()
{
    // TODO: implement validation
}

web::json::value AudioPropertyDefinitionResource::toJson() const
{
    web::json::value val = this->PropertyDefinitionResource::toJson();

    if(m_File_typeIsSet)
    {
        val[U("file_type")] = ModelBase::toJson(m_File_type);
    }
    if(m_Max_lengthIsSet)
    {
        val[U("max_length")] = ModelBase::toJson(m_Max_length);
    }
    if(m_Min_lengthIsSet)
    {
        val[U("min_length")] = ModelBase::toJson(m_Min_length);
    }

    return val;
}

void AudioPropertyDefinitionResource::fromJson(web::json::value& val)
{
    this->PropertyDefinitionResource::fromJson(val);

    if(val.has_field(U("file_type")))
    {
        setFileType(ModelBase::stringFromJson(val[U("file_type")]));
    }
    if(val.has_field(U("max_length")))
    {
        setMaxLength(ModelBase::int32_tFromJson(val[U("max_length")]));
    }
    if(val.has_field(U("min_length")))
    {
        setMinLength(ModelBase::int32_tFromJson(val[U("min_length")]));
    }
}

void AudioPropertyDefinitionResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Field_listIsSet)
    {
        if (m_Field_list.get())
        {
            m_Field_list->toMultipart(multipart, U("field_list."));
        }
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("required"), m_Required));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("type"), m_Type));
    if(m_File_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("file_type"), m_File_type));
        
    }
    if(m_Max_lengthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("max_length"), m_Max_length));
    }
    if(m_Min_lengthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("min_length"), m_Min_length));
    }
}

void AudioPropertyDefinitionResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("field_list")))
    {
        if(multipart->hasContent(U("field_list")))
        {
            std::shared_ptr<PropertyFieldListResource> newItem(new PropertyFieldListResource());
            newItem->fromMultiPart(multipart, U("field_list."));
            setFieldList( newItem );
        }
    }
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    setRequired(ModelBase::boolFromHttpContent(multipart->getContent(U("required"))));
    setType(ModelBase::stringFromHttpContent(multipart->getContent(U("type"))));
    if(multipart->hasContent(U("file_type")))
    {
        setFileType(ModelBase::stringFromHttpContent(multipart->getContent(U("file_type"))));
    }
    if(multipart->hasContent(U("max_length")))
    {
        setMaxLength(ModelBase::int32_tFromHttpContent(multipart->getContent(U("max_length"))));
    }
    if(multipart->hasContent(U("min_length")))
    {
        setMinLength(ModelBase::int32_tFromHttpContent(multipart->getContent(U("min_length"))));
    }
}

utility::string_t AudioPropertyDefinitionResource::getFileType() const
{
    return m_File_type;
}


void AudioPropertyDefinitionResource::setFileType(utility::string_t value)
{
    m_File_type = value;
    m_File_typeIsSet = true;
}
bool AudioPropertyDefinitionResource::fileTypeIsSet() const
{
    return m_File_typeIsSet;
}

void AudioPropertyDefinitionResource::unsetFile_type()
{
    m_File_typeIsSet = false;
}

int32_t AudioPropertyDefinitionResource::getMaxLength() const
{
    return m_Max_length;
}


void AudioPropertyDefinitionResource::setMaxLength(int32_t value)
{
    m_Max_length = value;
    m_Max_lengthIsSet = true;
}
bool AudioPropertyDefinitionResource::maxLengthIsSet() const
{
    return m_Max_lengthIsSet;
}

void AudioPropertyDefinitionResource::unsetMax_length()
{
    m_Max_lengthIsSet = false;
}

int32_t AudioPropertyDefinitionResource::getMinLength() const
{
    return m_Min_length;
}


void AudioPropertyDefinitionResource::setMinLength(int32_t value)
{
    m_Min_length = value;
    m_Min_lengthIsSet = true;
}
bool AudioPropertyDefinitionResource::minLengthIsSet() const
{
    return m_Min_lengthIsSet;
}

void AudioPropertyDefinitionResource::unsetMin_length()
{
    m_Min_lengthIsSet = false;
}

}
}
}
}

