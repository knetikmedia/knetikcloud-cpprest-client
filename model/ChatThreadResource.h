/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * ChatThreadResource.h
 *
 * 
 */

#ifndef ChatThreadResource_H_
#define ChatThreadResource_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ChatThreadResource
    : public ModelBase
{
public:
    ChatThreadResource();
    virtual ~ChatThreadResource();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ChatThreadResource members

    /// <summary>
    /// The number of active users in the thread
    /// </summary>
    int32_t getActiveUsers() const;
    bool activeUsersIsSet() const;
    void unsetActive_users();
    void setActiveUsers(int32_t value);
    /// <summary>
    /// The number of messages in the thread
    /// </summary>
    int32_t getCount() const;
    bool countIsSet() const;
    void unsetCount();
    void setCount(int32_t value);
    /// <summary>
    /// The date the thread was created
    /// </summary>
    int64_t getCreatedDate() const;
    bool createdDateIsSet() const;
    void unsetCreated_date();
    void setCreatedDate(int64_t value);
    /// <summary>
    /// The id for this thread
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();
    void setId(utility::string_t value);
    /// <summary>
    /// The id of the recipient
    /// </summary>
    utility::string_t getRecipientId() const;
        void setRecipientId(utility::string_t value);
    /// <summary>
    /// The recipient type of the thread
    /// </summary>
    utility::string_t getRecipientType() const;
        void setRecipientType(utility::string_t value);
    /// <summary>
    /// The subject of the thread
    /// </summary>
    utility::string_t getSubject() const;
    bool subjectIsSet() const;
    void unsetSubject();
    void setSubject(utility::string_t value);
    /// <summary>
    /// The date the thread was updated
    /// </summary>
    int64_t getUpdatedDate() const;
    bool updatedDateIsSet() const;
    void unsetUpdated_date();
    void setUpdatedDate(int64_t value);

protected:
    int32_t m_Active_users;
    bool m_Active_usersIsSet;
    int32_t m_Count;
    bool m_CountIsSet;
    int64_t m_Created_date;
    bool m_Created_dateIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Recipient_id;
        utility::string_t m_Recipient_type;
        utility::string_t m_Subject;
    bool m_SubjectIsSet;
    int64_t m_Updated_date;
    bool m_Updated_dateIsSet;
};

}
}
}
}

#endif /* ChatThreadResource_H_ */
