/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "AggregateInvoiceReportResource.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

AggregateInvoiceReportResource::AggregateInvoiceReportResource()
{
    m_Count = 0;
    m_CountIsSet = false;
    m_date = U("");
    m_dateIsSet = false;
    m_Revenue = 0.0;
    m_RevenueIsSet = false;
    m_User_count = 0;
    m_User_countIsSet = false;
    
}

AggregateInvoiceReportResource::~AggregateInvoiceReportResource()
{
}

void AggregateInvoiceReportResource::validate()
{
    // TODO: implement validation
}

web::json::value AggregateInvoiceReportResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CountIsSet)
    {
        val[U("count")] = ModelBase::toJson(m_Count);
    }
    if(m_dateIsSet)
    {
        val[U("date")] = ModelBase::toJson(m_date);
    }
    if(m_RevenueIsSet)
    {
        val[U("revenue")] = ModelBase::toJson(m_Revenue);
    }
    if(m_User_countIsSet)
    {
        val[U("user_count")] = ModelBase::toJson(m_User_count);
    }
    

    return val;
}

void AggregateInvoiceReportResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("count")))
    {
        setCount(ModelBase::int64_tFromJson(val[U("count")]));
    }
    if(val.has_field(U("date")))
    {
        setDate(ModelBase::stringFromJson(val[U("date")]));
        
    }
    if(val.has_field(U("revenue")))
    {
        setRevenue(ModelBase::doubleFromJson(val[U("revenue")]));
    }
    if(val.has_field(U("user_count")))
    {
        setUserCount(ModelBase::int64_tFromJson(val[U("user_count")]));
    }
    
}

void AggregateInvoiceReportResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_CountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("count"), m_Count));
    }
    if(m_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("date"), m_date));
        
    }
    if(m_RevenueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("revenue"), m_Revenue));
    }
    if(m_User_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("user_count"), m_User_count));
    }
    
}

void AggregateInvoiceReportResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("count")))
    {
        setCount(ModelBase::int64_tFromHttpContent(multipart->getContent(U("count"))));
    }
    if(multipart->hasContent(U("date")))
    {
        setDate(ModelBase::stringFromHttpContent(multipart->getContent(U("date"))));
        
    }
    if(multipart->hasContent(U("revenue")))
    {
        setRevenue(ModelBase::doubleFromHttpContent(multipart->getContent(U("revenue"))));
    }
    if(multipart->hasContent(U("user_count")))
    {
        setUserCount(ModelBase::int64_tFromHttpContent(multipart->getContent(U("user_count"))));
    }
    
}


int64_t AggregateInvoiceReportResource::getCount() const
{
    return m_Count;
}
void AggregateInvoiceReportResource::setCount(int64_t value)
{
    m_Count = value;
    m_CountIsSet = true;
}
bool AggregateInvoiceReportResource::countIsSet() const
{
    return m_CountIsSet;
}
void AggregateInvoiceReportResource::unsetCount()
{
    m_CountIsSet = false;
}
utility::string_t AggregateInvoiceReportResource::getDate() const
{
    return m_date;
}
void AggregateInvoiceReportResource::setDate(utility::string_t value)
{
    m_date = value;
    m_dateIsSet = true;
}
bool AggregateInvoiceReportResource::dateIsSet() const
{
    return m_dateIsSet;
}
void AggregateInvoiceReportResource::unsetdate()
{
    m_dateIsSet = false;
}
double AggregateInvoiceReportResource::getRevenue() const
{
    return m_Revenue;
}
void AggregateInvoiceReportResource::setRevenue(double value)
{
    m_Revenue = value;
    m_RevenueIsSet = true;
}
bool AggregateInvoiceReportResource::revenueIsSet() const
{
    return m_RevenueIsSet;
}
void AggregateInvoiceReportResource::unsetRevenue()
{
    m_RevenueIsSet = false;
}
int64_t AggregateInvoiceReportResource::getUserCount() const
{
    return m_User_count;
}
void AggregateInvoiceReportResource::setUserCount(int64_t value)
{
    m_User_count = value;
    m_User_countIsSet = true;
}
bool AggregateInvoiceReportResource::user_countIsSet() const
{
    return m_User_countIsSet;
}
void AggregateInvoiceReportResource::unsetUser_count()
{
    m_User_countIsSet = false;
}

}
}
}
}

