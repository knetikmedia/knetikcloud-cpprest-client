/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * PropertyFieldResource.h
 *
 * 
 */

#ifndef PropertyFieldResource_H_
#define PropertyFieldResource_H_


#include "ModelBase.h"

#include "PropertyFieldResource.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  PropertyFieldResource
    : public ModelBase
{
public:
    PropertyFieldResource();
    virtual ~PropertyFieldResource();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PropertyFieldResource members

    /// <summary>
    /// A description of the field
    /// </summary>
    utility::string_t getDescription() const;
    void setDescription(utility::string_t value);
    bool descriptionIsSet() const;
    void unsetDescription();
    /// <summary>
    /// The type of values within a &#39;list&#39; type field
    /// </summary>
    utility::string_t getInnerType() const;
    void setInnerType(utility::string_t value);
    bool inner_typeIsSet() const;
    void unsetInner_type();
    /// <summary>
    /// A description of fields within objects within a &#39;list&#39; type field, when inner_type is &#39;object&#39;
    /// </summary>
    std::vector<std::shared_ptr<PropertyFieldResource>>& getInnerTypeFields();
    bool inner_type_fieldsIsSet() const;
    void unsetInner_type_fields();
    /// <summary>
    /// The name of the field
    /// </summary>
    utility::string_t getName() const;
    void setName(utility::string_t value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// Whether the field is required
    /// </summary>
    bool getRequired() const;
    void setRequired(bool value);
    bool requiredIsSet() const;
    void unsetRequired();
    /// <summary>
    /// The type of the field
    /// </summary>
    utility::string_t getType() const;
    void setType(utility::string_t value);
    bool typeIsSet() const;
    void unsetType();
    /// <summary>
    /// A list of valid values for &#39;enum&#39; type fields
    /// </summary>
    std::vector<utility::string_t>& getValidValues();
    bool valid_valuesIsSet() const;
    void unsetValid_values();

protected:
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
utility::string_t m_Inner_type;
    bool m_Inner_typeIsSet;
std::vector<std::shared_ptr<PropertyFieldResource>> m_Inner_type_fields;
    bool m_Inner_type_fieldsIsSet;
utility::string_t m_Name;
    bool m_NameIsSet;
bool m_Required;
    bool m_RequiredIsSet;
utility::string_t m_Type;
    bool m_TypeIsSet;
std::vector<utility::string_t> m_Valid_values;
    bool m_Valid_valuesIsSet;
};

}
}
}
}

#endif /* PropertyFieldResource_H_ */
