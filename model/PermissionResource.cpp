/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PermissionResource.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

PermissionResource::PermissionResource()
{
    m_Created_date = 0;
    m_Created_dateIsSet = false;
    m_Description = U("");
    m_DescriptionIsSet = false;
    m_Locked = false;
    m_LockedIsSet = false;
    m_Name = U("");
    m_Parent = U("");
    m_ParentIsSet = false;
    m_Permission = U("");
    m_Updated_date = 0;
    m_Updated_dateIsSet = false;
    
}

PermissionResource::~PermissionResource()
{
}

void PermissionResource::validate()
{
    // TODO: implement validation
}

web::json::value PermissionResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Created_dateIsSet)
    {
        val[U("created_date")] = ModelBase::toJson(m_Created_date);
    }
    if(m_DescriptionIsSet)
    {
        val[U("description")] = ModelBase::toJson(m_Description);
    }
    if(m_LockedIsSet)
    {
        val[U("locked")] = ModelBase::toJson(m_Locked);
    }
    val[U("name")] = ModelBase::toJson(m_Name);
    if(m_ParentIsSet)
    {
        val[U("parent")] = ModelBase::toJson(m_Parent);
    }
    val[U("permission")] = ModelBase::toJson(m_Permission);
    if(m_Updated_dateIsSet)
    {
        val[U("updated_date")] = ModelBase::toJson(m_Updated_date);
    }
    

    return val;
}

void PermissionResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromJson(val[U("created_date")]));
    }
    if(val.has_field(U("description")))
    {
        setDescription(ModelBase::stringFromJson(val[U("description")]));
        
    }
    if(val.has_field(U("locked")))
    {
        setLocked(ModelBase::boolFromJson(val[U("locked")]));
    }
    setName(ModelBase::stringFromJson(val[U("name")]));
    if(val.has_field(U("parent")))
    {
        setParent(ModelBase::stringFromJson(val[U("parent")]));
        
    }
    setPermission(ModelBase::stringFromJson(val[U("permission")]));
    if(val.has_field(U("updated_date")))
    {
        setUpdatedDate(ModelBase::int64_tFromJson(val[U("updated_date")]));
    }
    
}

void PermissionResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Created_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("created_date"), m_Created_date));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("description"), m_Description));
        
    }
    if(m_LockedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("locked"), m_Locked));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    if(m_ParentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("parent"), m_Parent));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("permission"), m_Permission));
    if(m_Updated_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("updated_date"), m_Updated_date));
    }
    
}

void PermissionResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("created_date"))));
    }
    if(multipart->hasContent(U("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("description"))));
        
    }
    if(multipart->hasContent(U("locked")))
    {
        setLocked(ModelBase::boolFromHttpContent(multipart->getContent(U("locked"))));
    }
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    if(multipart->hasContent(U("parent")))
    {
        setParent(ModelBase::stringFromHttpContent(multipart->getContent(U("parent"))));
        
    }
    setPermission(ModelBase::stringFromHttpContent(multipart->getContent(U("permission"))));
    if(multipart->hasContent(U("updated_date")))
    {
        setUpdatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("updated_date"))));
    }
    
}


int64_t PermissionResource::getCreatedDate() const
{
    return m_Created_date;
}
void PermissionResource::setCreatedDate(int64_t value)
{
    m_Created_date = value;
    m_Created_dateIsSet = true;
}
bool PermissionResource::created_dateIsSet() const
{
    return m_Created_dateIsSet;
}
void PermissionResource::unsetCreated_date()
{
    m_Created_dateIsSet = false;
}
utility::string_t PermissionResource::getDescription() const
{
    return m_Description;
}
void PermissionResource::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool PermissionResource::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void PermissionResource::unsetDescription()
{
    m_DescriptionIsSet = false;
}
bool PermissionResource::getLocked() const
{
    return m_Locked;
}
void PermissionResource::setLocked(bool value)
{
    m_Locked = value;
    m_LockedIsSet = true;
}
bool PermissionResource::lockedIsSet() const
{
    return m_LockedIsSet;
}
void PermissionResource::unsetLocked()
{
    m_LockedIsSet = false;
}
utility::string_t PermissionResource::getName() const
{
    return m_Name;
}
void PermissionResource::setName(utility::string_t value)
{
    m_Name = value;
    
}
utility::string_t PermissionResource::getParent() const
{
    return m_Parent;
}
void PermissionResource::setParent(utility::string_t value)
{
    m_Parent = value;
    m_ParentIsSet = true;
}
bool PermissionResource::parentIsSet() const
{
    return m_ParentIsSet;
}
void PermissionResource::unsetParent()
{
    m_ParentIsSet = false;
}
utility::string_t PermissionResource::getPermission() const
{
    return m_Permission;
}
void PermissionResource::setPermission(utility::string_t value)
{
    m_Permission = value;
    
}
int64_t PermissionResource::getUpdatedDate() const
{
    return m_Updated_date;
}
void PermissionResource::setUpdatedDate(int64_t value)
{
    m_Updated_date = value;
    m_Updated_dateIsSet = true;
}
bool PermissionResource::updated_dateIsSet() const
{
    return m_Updated_dateIsSet;
}
void PermissionResource::unsetUpdated_date()
{
    m_Updated_dateIsSet = false;
}

}
}
}
}

