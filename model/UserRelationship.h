/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * UserRelationship.h
 *
 * 
 */

#ifndef UserRelationship_H_
#define UserRelationship_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "User.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  UserRelationship
    : public ModelBase
{
public:
    UserRelationship();
    virtual ~UserRelationship();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UserRelationship members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<User> getChild() const;
    void setChild(std::shared_ptr<User> value);
    bool childIsSet() const;
    void unsetChild();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getContext() const;
    void setContext(utility::string_t value);
    bool contextIsSet() const;
    void unsetContext();
    /// <summary>
    /// 
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<User> getParent() const;
    void setParent(std::shared_ptr<User> value);
    bool parentIsSet() const;
    void unsetParent();

protected:
    std::shared_ptr<User> m_Child;
    bool m_ChildIsSet;
utility::string_t m_Context;
    bool m_ContextIsSet;
int64_t m_Id;
    bool m_IdIsSet;
std::shared_ptr<User> m_Parent;
    bool m_ParentIsSet;
};

}
}
}
}

#endif /* UserRelationship_H_ */
