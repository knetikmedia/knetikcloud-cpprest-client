/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * DeviceResource.h
 *
 * 
 */

#ifndef DeviceResource_H_
#define DeviceResource_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "SimpleUserResource.h"
#include <map>
#include <vector>
#include "Property.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  DeviceResource
    : public ModelBase
{
public:
    DeviceResource();
    virtual ~DeviceResource();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// DeviceResource members

    /// <summary>
    /// A map of additional properties, keyed on the property name.  Must match the names and types defined in the template if one is specified
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<Property>>& getAdditionalProperties();
    bool additionalPropertiesIsSet() const;
    void unsetAdditional_properties();
    void setAdditionalProperties(std::map<utility::string_t, std::shared_ptr<Property>> value);
    /// <summary>
    /// The date the device log was created
    /// </summary>
    int64_t getCreatedDate() const;
    bool createdDateIsSet() const;
    void unsetCreated_date();
    void setCreatedDate(int64_t value);
    /// <summary>
    /// The description of the device
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();
    void setDescription(utility::string_t value);
    /// <summary>
    /// The type of device. Use mobile to specifically register mobile devices. This particular type will be used to send and receive notifications
    /// </summary>
    utility::string_t getDeviceType() const;
    bool deviceTypeIsSet() const;
    void unsetDevice_type();
    void setDeviceType(utility::string_t value);
    /// <summary>
    /// The unique ID for this device
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();
    void setId(utility::string_t value);
    /// <summary>
    /// The physical location of the device, coordinates or named place (office, living room, etc)
    /// </summary>
    utility::string_t getLocation() const;
    bool locationIsSet() const;
    void unsetLocation();
    void setLocation(utility::string_t value);
    /// <summary>
    /// The MAC (media access control) address of the device
    /// </summary>
    utility::string_t getMacAddress() const;
    bool macAddressIsSet() const;
    void unsetMac_address();
    void setMacAddress(utility::string_t value);
    /// <summary>
    /// The make of the device
    /// </summary>
    utility::string_t getMake() const;
    bool makeIsSet() const;
    void unsetMake();
    void setMake(utility::string_t value);
    /// <summary>
    /// The model of the device
    /// </summary>
    utility::string_t getModel() const;
    bool modelIsSet() const;
    void unsetModel();
    void setModel(utility::string_t value);
    /// <summary>
    /// The name of the device
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();
    void setName(utility::string_t value);
    /// <summary>
    /// The OS (operating system) on the device
    /// </summary>
    utility::string_t getOs() const;
    bool osIsSet() const;
    void unsetOs();
    void setOs(utility::string_t value);
    /// <summary>
    /// The user that owns the device
    /// </summary>
    std::shared_ptr<SimpleUserResource> getOwner() const;
    bool ownerIsSet() const;
    void unsetOwner();
    void setOwner(std::shared_ptr<SimpleUserResource> value);
    /// <summary>
    /// The serial number of the device
    /// </summary>
    utility::string_t getSerial() const;
    bool serialIsSet() const;
    void unsetSerial();
    void setSerial(utility::string_t value);
    /// <summary>
    /// Random tags to facilitate search
    /// </summary>
    std::vector<utility::string_t>& getTags();
    bool tagsIsSet() const;
    void unsetTags();
    void setTags(std::vector<utility::string_t> value);
    /// <summary>
    /// Use to describe and validate custom properties (custom schema). May be null and no validation of additional_properties will be done
    /// </summary>
    utility::string_t getTemplate() const;
    bool templateIsSet() const;
    void unsetTemplate();
    void setTemplate(utility::string_t value);
    /// <summary>
    /// The date the device log was updated
    /// </summary>
    int64_t getUpdatedDate() const;
    bool updatedDateIsSet() const;
    void unsetUpdated_date();
    void setUpdatedDate(int64_t value);
    /// <summary>
    /// The users currently using the device
    /// </summary>
    std::vector<std::shared_ptr<SimpleUserResource>>& getUsers();
    bool usersIsSet() const;
    void unsetUsers();
    void setUsers(std::vector<std::shared_ptr<SimpleUserResource>> value);

protected:
    std::map<utility::string_t, std::shared_ptr<Property>> m_Additional_properties;
    bool m_Additional_propertiesIsSet;
    int64_t m_Created_date;
    bool m_Created_dateIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    utility::string_t m_Device_type;
    bool m_Device_typeIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Location;
    bool m_LocationIsSet;
    utility::string_t m_Mac_address;
    bool m_Mac_addressIsSet;
    utility::string_t m_Make;
    bool m_MakeIsSet;
    utility::string_t m_Model;
    bool m_ModelIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Os;
    bool m_OsIsSet;
    std::shared_ptr<SimpleUserResource> m_Owner;
    bool m_OwnerIsSet;
    utility::string_t m_Serial;
    bool m_SerialIsSet;
    std::vector<utility::string_t> m_Tags;
    bool m_TagsIsSet;
    utility::string_t m_Template;
    bool m_TemplateIsSet;
    int64_t m_Updated_date;
    bool m_Updated_dateIsSet;
    std::vector<std::shared_ptr<SimpleUserResource>> m_Users;
    bool m_UsersIsSet;
};

}
}
}
}

#endif /* DeviceResource_H_ */
