/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "UserItemLogResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

UserItemLogResource::UserItemLogResource()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Info = U("");
    m_InfoIsSet = false;
    m_ItemIsSet = false;
    m_Log_date = 0L;
    m_Log_dateIsSet = false;
    m_Type = U("");
    m_TypeIsSet = false;
    m_UserIsSet = false;
    m_User_inventory = 0;
    m_User_inventoryIsSet = false;
}

UserItemLogResource::~UserItemLogResource()
{
}

void UserItemLogResource::validate()
{
    // TODO: implement validation
}

web::json::value UserItemLogResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_InfoIsSet)
    {
        val[U("info")] = ModelBase::toJson(m_Info);
    }
    if(m_ItemIsSet)
    {
        val[U("item")] = ModelBase::toJson(m_Item);
    }
    if(m_Log_dateIsSet)
    {
        val[U("log_date")] = ModelBase::toJson(m_Log_date);
    }
    if(m_TypeIsSet)
    {
        val[U("type")] = ModelBase::toJson(m_Type);
    }
    if(m_UserIsSet)
    {
        val[U("user")] = ModelBase::toJson(m_User);
    }
    if(m_User_inventoryIsSet)
    {
        val[U("user_inventory")] = ModelBase::toJson(m_User_inventory);
    }

    return val;
}

void UserItemLogResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int32_tFromJson(val[U("id")]));
    }
    if(val.has_field(U("info")))
    {
        setInfo(ModelBase::stringFromJson(val[U("info")]));
    }
    if(val.has_field(U("item")))
    {
        if(!val[U("item")].is_null())
        {
            std::shared_ptr<SimpleReferenceResource«int»> newItem(new SimpleReferenceResource«int»());
            newItem->fromJson(val[U("item")]);
            setItem( newItem );
        }
    }
    if(val.has_field(U("log_date")))
    {
        setLogDate(ModelBase::int64_tFromJson(val[U("log_date")]));
    }
    if(val.has_field(U("type")))
    {
        setType(ModelBase::stringFromJson(val[U("type")]));
    }
    if(val.has_field(U("user")))
    {
        if(!val[U("user")].is_null())
        {
            std::shared_ptr<SimpleUserResource> newItem(new SimpleUserResource());
            newItem->fromJson(val[U("user")]);
            setUser( newItem );
        }
    }
    if(val.has_field(U("user_inventory")))
    {
        setUserInventory(ModelBase::int32_tFromJson(val[U("user_inventory")]));
    }
}

void UserItemLogResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    if(m_InfoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("info"), m_Info));
        
    }
    if(m_ItemIsSet)
    {
        if (m_Item.get())
        {
            m_Item->toMultipart(multipart, U("item."));
        }
        
    }
    if(m_Log_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("log_date"), m_Log_date));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("type"), m_Type));
        
    }
    if(m_UserIsSet)
    {
        if (m_User.get())
        {
            m_User->toMultipart(multipart, U("user."));
        }
        
    }
    if(m_User_inventoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("user_inventory"), m_User_inventory));
    }
}

void UserItemLogResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("info")))
    {
        setInfo(ModelBase::stringFromHttpContent(multipart->getContent(U("info"))));
    }
    if(multipart->hasContent(U("item")))
    {
        if(multipart->hasContent(U("item")))
        {
            std::shared_ptr<SimpleReferenceResource«int»> newItem(new SimpleReferenceResource«int»());
            newItem->fromMultiPart(multipart, U("item."));
            setItem( newItem );
        }
    }
    if(multipart->hasContent(U("log_date")))
    {
        setLogDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("log_date"))));
    }
    if(multipart->hasContent(U("type")))
    {
        setType(ModelBase::stringFromHttpContent(multipart->getContent(U("type"))));
    }
    if(multipart->hasContent(U("user")))
    {
        if(multipart->hasContent(U("user")))
        {
            std::shared_ptr<SimpleUserResource> newItem(new SimpleUserResource());
            newItem->fromMultiPart(multipart, U("user."));
            setUser( newItem );
        }
    }
    if(multipart->hasContent(U("user_inventory")))
    {
        setUserInventory(ModelBase::int32_tFromHttpContent(multipart->getContent(U("user_inventory"))));
    }
}

int32_t UserItemLogResource::getId() const
{
    return m_Id;
}


void UserItemLogResource::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool UserItemLogResource::idIsSet() const
{
    return m_IdIsSet;
}

void UserItemLogResource::unsetId()
{
    m_IdIsSet = false;
}

utility::string_t UserItemLogResource::getInfo() const
{
    return m_Info;
}


void UserItemLogResource::setInfo(utility::string_t value)
{
    m_Info = value;
    m_InfoIsSet = true;
}
bool UserItemLogResource::infoIsSet() const
{
    return m_InfoIsSet;
}

void UserItemLogResource::unsetInfo()
{
    m_InfoIsSet = false;
}

std::shared_ptr<SimpleReferenceResource«int»> UserItemLogResource::getItem() const
{
    return m_Item;
}


void UserItemLogResource::setItem(std::shared_ptr<SimpleReferenceResource«int»> value)
{
    m_Item = value;
    m_ItemIsSet = true;
}
bool UserItemLogResource::itemIsSet() const
{
    return m_ItemIsSet;
}

void UserItemLogResource::unsetItem()
{
    m_ItemIsSet = false;
}

int64_t UserItemLogResource::getLogDate() const
{
    return m_Log_date;
}


void UserItemLogResource::setLogDate(int64_t value)
{
    m_Log_date = value;
    m_Log_dateIsSet = true;
}
bool UserItemLogResource::logDateIsSet() const
{
    return m_Log_dateIsSet;
}

void UserItemLogResource::unsetLog_date()
{
    m_Log_dateIsSet = false;
}

utility::string_t UserItemLogResource::getType() const
{
    return m_Type;
}


void UserItemLogResource::setType(utility::string_t value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool UserItemLogResource::typeIsSet() const
{
    return m_TypeIsSet;
}

void UserItemLogResource::unsetType()
{
    m_TypeIsSet = false;
}

std::shared_ptr<SimpleUserResource> UserItemLogResource::getUser() const
{
    return m_User;
}


void UserItemLogResource::setUser(std::shared_ptr<SimpleUserResource> value)
{
    m_User = value;
    m_UserIsSet = true;
}
bool UserItemLogResource::userIsSet() const
{
    return m_UserIsSet;
}

void UserItemLogResource::unsetUser()
{
    m_UserIsSet = false;
}

int32_t UserItemLogResource::getUserInventory() const
{
    return m_User_inventory;
}


void UserItemLogResource::setUserInventory(int32_t value)
{
    m_User_inventory = value;
    m_User_inventoryIsSet = true;
}
bool UserItemLogResource::userInventoryIsSet() const
{
    return m_User_inventoryIsSet;
}

void UserItemLogResource::unsetUser_inventory()
{
    m_User_inventoryIsSet = false;
}

}
}
}
}

