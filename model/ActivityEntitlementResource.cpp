/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ActivityEntitlementResource.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

ActivityEntitlementResource::ActivityEntitlementResource()
{
    m_Currency_code = U("");
    m_Currency_codeIsSet = false;
    m_Item_id = 0;
    m_Name = U("");
    m_NameIsSet = false;
    m_Price = 0.0;
    m_PriceIsSet = false;
    m_Sku = U("");
    m_SkuIsSet = false;
    
}

ActivityEntitlementResource::~ActivityEntitlementResource()
{
}

void ActivityEntitlementResource::validate()
{
    // TODO: implement validation
}

web::json::value ActivityEntitlementResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Currency_codeIsSet)
    {
        val[U("currency_code")] = ModelBase::toJson(m_Currency_code);
    }
    val[U("item_id")] = ModelBase::toJson(m_Item_id);
    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }
    if(m_PriceIsSet)
    {
        val[U("price")] = ModelBase::toJson(m_Price);
    }
    if(m_SkuIsSet)
    {
        val[U("sku")] = ModelBase::toJson(m_Sku);
    }
    

    return val;
}

void ActivityEntitlementResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("currency_code")))
    {
        setCurrencyCode(ModelBase::stringFromJson(val[U("currency_code")]));
        
    }
    setItemId(ModelBase::int32_tFromJson(val[U("item_id")]));
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
        
    }
    if(val.has_field(U("price")))
    {
        setPrice(ModelBase::doubleFromJson(val[U("price")]));
    }
    if(val.has_field(U("sku")))
    {
        setSku(ModelBase::stringFromJson(val[U("sku")]));
        
    }
    
}

void ActivityEntitlementResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Currency_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("currency_code"), m_Currency_code));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("item_id"), m_Item_id));
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
    if(m_PriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("price"), m_Price));
    }
    if(m_SkuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("sku"), m_Sku));
        
    }
    
}

void ActivityEntitlementResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("currency_code")))
    {
        setCurrencyCode(ModelBase::stringFromHttpContent(multipart->getContent(U("currency_code"))));
        
    }
    setItemId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("item_id"))));
    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
        
    }
    if(multipart->hasContent(U("price")))
    {
        setPrice(ModelBase::doubleFromHttpContent(multipart->getContent(U("price"))));
    }
    if(multipart->hasContent(U("sku")))
    {
        setSku(ModelBase::stringFromHttpContent(multipart->getContent(U("sku"))));
        
    }
    
}


utility::string_t ActivityEntitlementResource::getCurrencyCode() const
{
    return m_Currency_code;
}
void ActivityEntitlementResource::setCurrencyCode(utility::string_t value)
{
    m_Currency_code = value;
    m_Currency_codeIsSet = true;
}
bool ActivityEntitlementResource::currency_codeIsSet() const
{
    return m_Currency_codeIsSet;
}
void ActivityEntitlementResource::unsetCurrency_code()
{
    m_Currency_codeIsSet = false;
}
int32_t ActivityEntitlementResource::getItemId() const
{
    return m_Item_id;
}
void ActivityEntitlementResource::setItemId(int32_t value)
{
    m_Item_id = value;
    
}
utility::string_t ActivityEntitlementResource::getName() const
{
    return m_Name;
}
void ActivityEntitlementResource::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool ActivityEntitlementResource::nameIsSet() const
{
    return m_NameIsSet;
}
void ActivityEntitlementResource::unsetName()
{
    m_NameIsSet = false;
}
double ActivityEntitlementResource::getPrice() const
{
    return m_Price;
}
void ActivityEntitlementResource::setPrice(double value)
{
    m_Price = value;
    m_PriceIsSet = true;
}
bool ActivityEntitlementResource::priceIsSet() const
{
    return m_PriceIsSet;
}
void ActivityEntitlementResource::unsetPrice()
{
    m_PriceIsSet = false;
}
utility::string_t ActivityEntitlementResource::getSku() const
{
    return m_Sku;
}
void ActivityEntitlementResource::setSku(utility::string_t value)
{
    m_Sku = value;
    m_SkuIsSet = true;
}
bool ActivityEntitlementResource::skuIsSet() const
{
    return m_SkuIsSet;
}
void ActivityEntitlementResource::unsetSku()
{
    m_SkuIsSet = false;
}

}
}
}
}

