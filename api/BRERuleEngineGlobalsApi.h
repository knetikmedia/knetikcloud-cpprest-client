/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * BRERuleEngineGlobalsApi.h
 *
 * 
 */

#ifndef BRERuleEngineGlobalsApi_H_
#define BRERuleEngineGlobalsApi_H_


#include "ApiClient.h"

#include "BreGlobalResource.h"
#include "PageResource«BreGlobalResource».h"
#include "Result.h"
#include <cpprest/details/basic_types.h>

namespace com {
namespace knetikcloud {
namespace client {
namespace api {

using namespace com::knetikcloud::client::model;

class  BRERuleEngineGlobalsApi
{
public:
    BRERuleEngineGlobalsApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~BRERuleEngineGlobalsApi();
    /// <summary>
    /// Create a global definition
    /// </summary>
    /// <remarks>
    /// Once created you can then use in a custom rule. Note that global definitions cannot be modified or deleted if in use.
    /// </remarks>
    /// <param name="breGlobalResource">The BRE global resource object (optional)</param>
    pplx::task<std::shared_ptr<BreGlobalResource>> createBREGlobal(std::shared_ptr<BreGlobalResource> breGlobalResource);
    /// <summary>
    /// Delete a global
    /// </summary>
    /// <remarks>
    /// May fail if there are existing rules against it. Cannot delete core globals
    /// </remarks>
    /// <param name="id">The id of the global definition</param>
    pplx::task<void> deleteBREGlobal(utility::string_t id);
    /// <summary>
    /// Get a single global definition
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">The id of the global definition</param>
    pplx::task<std::shared_ptr<BreGlobalResource>> getBREGlobal(utility::string_t id);
    /// <summary>
    /// List global definitions
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="filterSystem">Filter for globals that are system globals when true, or not when false. Leave off for both mixed (optional)</param>/// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
    pplx::task<std::shared_ptr<PageResource«BreGlobalResource»>> getBREGlobals(bool filterSystem, int32_t size, int32_t page);
    /// <summary>
    /// Update a global definition
    /// </summary>
    /// <remarks>
    /// May fail if new parameters mismatch requirements of existing rules. Cannot update core globals
    /// </remarks>
    /// <param name="id">The id of the global definition</param>/// <param name="breGlobalResource">The BRE global resource object (optional)</param>
    pplx::task<std::shared_ptr<BreGlobalResource>> updateBREGlobal(utility::string_t id, std::shared_ptr<BreGlobalResource> breGlobalResource);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* BRERuleEngineGlobalsApi_H_ */

