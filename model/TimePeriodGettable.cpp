/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "TimePeriodGettable.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

TimePeriodGettable::TimePeriodGettable()
{
    m_Description = U("");
    m_DescriptionIsSet = false;
    m_Type_hint = U("");
    m_Type_hintIsSet = false;
    m_Get_limit = 0;
    m_Group_name = U("");
    m_Group_nameIsSet = false;
    m_Time_length = 0;
    m_Unit_of_time = U("");
    
}

TimePeriodGettable::~TimePeriodGettable()
{
}

void TimePeriodGettable::validate()
{
    // TODO: implement validation
}

web::json::value TimePeriodGettable::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_DescriptionIsSet)
    {
        val[U("description")] = ModelBase::toJson(m_Description);
    }
    if(m_Type_hintIsSet)
    {
        val[U("type_hint")] = ModelBase::toJson(m_Type_hint);
    }
    val[U("get_limit")] = ModelBase::toJson(m_Get_limit);
    if(m_Group_nameIsSet)
    {
        val[U("group_name")] = ModelBase::toJson(m_Group_name);
    }
    val[U("time_length")] = ModelBase::toJson(m_Time_length);
    val[U("unit_of_time")] = ModelBase::toJson(m_Unit_of_time);
    

    return val;
}

void TimePeriodGettable::fromJson(web::json::value& val)
{
    if(val.has_field(U("description")))
    {
        setDescription(ModelBase::stringFromJson(val[U("description")]));
        
    }
    if(val.has_field(U("type_hint")))
    {
        setTypeHint(ModelBase::stringFromJson(val[U("type_hint")]));
        
    }
    setGetLimit(ModelBase::int32_tFromJson(val[U("get_limit")]));
    if(val.has_field(U("group_name")))
    {
        setGroupName(ModelBase::stringFromJson(val[U("group_name")]));
        
    }
    setTimeLength(ModelBase::int32_tFromJson(val[U("time_length")]));
    setUnitOfTime(ModelBase::stringFromJson(val[U("unit_of_time")]));
    
}

void TimePeriodGettable::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("description"), m_Description));
        
    }
    if(m_Type_hintIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("type_hint"), m_Type_hint));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("get_limit"), m_Get_limit));
    if(m_Group_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("group_name"), m_Group_name));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("time_length"), m_Time_length));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("unit_of_time"), m_Unit_of_time));
    
}

void TimePeriodGettable::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("description"))));
        
    }
    if(multipart->hasContent(U("type_hint")))
    {
        setTypeHint(ModelBase::stringFromHttpContent(multipart->getContent(U("type_hint"))));
        
    }
    setGetLimit(ModelBase::int32_tFromHttpContent(multipart->getContent(U("get_limit"))));
    if(multipart->hasContent(U("group_name")))
    {
        setGroupName(ModelBase::stringFromHttpContent(multipart->getContent(U("group_name"))));
        
    }
    setTimeLength(ModelBase::int32_tFromHttpContent(multipart->getContent(U("time_length"))));
    setUnitOfTime(ModelBase::stringFromHttpContent(multipart->getContent(U("unit_of_time"))));
    
}


utility::string_t TimePeriodGettable::getDescription() const
{
    return m_Description;
}
void TimePeriodGettable::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool TimePeriodGettable::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void TimePeriodGettable::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t TimePeriodGettable::getTypeHint() const
{
    return m_Type_hint;
}
void TimePeriodGettable::setTypeHint(utility::string_t value)
{
    m_Type_hint = value;
    m_Type_hintIsSet = true;
}
bool TimePeriodGettable::type_hintIsSet() const
{
    return m_Type_hintIsSet;
}
void TimePeriodGettable::unsetType_hint()
{
    m_Type_hintIsSet = false;
}
int32_t TimePeriodGettable::getGetLimit() const
{
    return m_Get_limit;
}
void TimePeriodGettable::setGetLimit(int32_t value)
{
    m_Get_limit = value;
    
}
utility::string_t TimePeriodGettable::getGroupName() const
{
    return m_Group_name;
}
void TimePeriodGettable::setGroupName(utility::string_t value)
{
    m_Group_name = value;
    m_Group_nameIsSet = true;
}
bool TimePeriodGettable::group_nameIsSet() const
{
    return m_Group_nameIsSet;
}
void TimePeriodGettable::unsetGroup_name()
{
    m_Group_nameIsSet = false;
}
int32_t TimePeriodGettable::getTimeLength() const
{
    return m_Time_length;
}
void TimePeriodGettable::setTimeLength(int32_t value)
{
    m_Time_length = value;
    
}
utility::string_t TimePeriodGettable::getUnitOfTime() const
{
    return m_Unit_of_time;
}
void TimePeriodGettable::setUnitOfTime(utility::string_t value)
{
    m_Unit_of_time = value;
    
}

}
}
}
}

