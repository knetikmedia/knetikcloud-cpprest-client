/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Video.h
 *
 * 
 */

#ifndef Video_H_
#define Video_H_


#include "ModelBase.h"

#include "Collection«VideoContribution».h"
#include "VideoTag.h"
#include <cpprest/details/basic_types.h>
#include "Artist.h"
#include <vector>
#include "User.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Video
    : public ModelBase
{
public:
    Video();
    virtual ~Video();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Video members

    /// <summary>
    /// 
    /// </summary>
    bool getActive() const;
    void setActive(bool value);
    bool activeIsSet() const;
    void unsetActive();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Artist> getAuthor() const;
    void setAuthor(std::shared_ptr<Artist> value);
    bool authorIsSet() const;
    void unsetAuthor();
    /// <summary>
    /// 
    /// </summary>
    int64_t getAuthored() const;
    void setAuthored(int64_t value);
    bool authoredIsSet() const;
    void unsetAuthored();
    /// <summary>
    /// 
    /// </summary>
    bool getBanned() const;
    void setBanned(bool value);
    bool bannedIsSet() const;
    void unsetBanned();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCategoryId() const;
    void setCategoryId(utility::string_t value);
    bool category_idIsSet() const;
    void unsetCategory_id();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCategoryName() const;
    void setCategoryName(utility::string_t value);
    bool category_nameIsSet() const;
    void unsetCategory_name();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Collection«VideoContribution»> getContributors() const;
    void setContributors(std::shared_ptr<Collection«VideoContribution»> value);
    bool contributorsIsSet() const;
    void unsetContributors();
    /// <summary>
    /// 
    /// </summary>
    int64_t getCreated() const;
    void setCreated(int64_t value);
    bool createdIsSet() const;
    void unsetCreated();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEmbed() const;
    void setEmbed(utility::string_t value);
    bool embedIsSet() const;
    void unsetEmbed();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getExtension() const;
    void setExtension(utility::string_t value);
    bool extensionIsSet() const;
    void unsetExtension();
    /// <summary>
    /// 
    /// </summary>
    int32_t getHeight() const;
    void setHeight(int32_t value);
    bool heightIsSet() const;
    void unsetHeight();
    /// <summary>
    /// 
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// 
    /// </summary>
    int32_t getLength() const;
    void setLength(int32_t value);
    bool lengthIsSet() const;
    void unsetLength();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLocation() const;
    void setLocation(utility::string_t value);
    bool locationIsSet() const;
    void unsetLocation();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLongDescription() const;
    void setLongDescription(utility::string_t value);
    bool long_descriptionIsSet() const;
    void unsetLong_description();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMimeType() const;
    void setMimeType(utility::string_t value);
    bool mime_typeIsSet() const;
    void unsetMime_type();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    void setName(utility::string_t value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// 
    /// </summary>
    int32_t getPriority() const;
    void setPriority(int32_t value);
    bool priorityIsSet() const;
    void unsetPriority();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPrivacy() const;
    void setPrivacy(utility::string_t value);
    bool privacyIsSet() const;
    void unsetPrivacy();
    /// <summary>
    /// 
    /// </summary>
    bool getPublished() const;
    void setPublished(bool value);
    bool publishedIsSet() const;
    void unsetPublished();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getShortDescription() const;
    void setShortDescription(utility::string_t value);
    bool short_descriptionIsSet() const;
    void unsetShort_description();
    /// <summary>
    /// 
    /// </summary>
    int64_t getSize() const;
    void setSize(int64_t value);
    bool sizeIsSet() const;
    void unsetSize();
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<VideoTag>>& getTags();
    bool tagsIsSet() const;
    void unsetTags();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getThumbnail() const;
    void setThumbnail(utility::string_t value);
    bool thumbnailIsSet() const;
    void unsetThumbnail();
    /// <summary>
    /// 
    /// </summary>
    int64_t getUpdated() const;
    void setUpdated(int64_t value);
    bool updatedIsSet() const;
    void unsetUpdated();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<User> getUploader() const;
    void setUploader(std::shared_ptr<User> value);
    bool uploaderIsSet() const;
    void unsetUploader();
    /// <summary>
    /// 
    /// </summary>
    int64_t getViews() const;
    void setViews(int64_t value);
    bool viewsIsSet() const;
    void unsetViews();
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<User>>& getWhitelist();
    bool whitelistIsSet() const;
    void unsetWhitelist();
    /// <summary>
    /// 
    /// </summary>
    int32_t getWidth() const;
    void setWidth(int32_t value);
    bool widthIsSet() const;
    void unsetWidth();

protected:
    bool m_Active;
    bool m_ActiveIsSet;
std::shared_ptr<Artist> m_Author;
    bool m_AuthorIsSet;
int64_t m_Authored;
    bool m_AuthoredIsSet;
bool m_Banned;
    bool m_BannedIsSet;
utility::string_t m_Category_id;
    bool m_Category_idIsSet;
utility::string_t m_Category_name;
    bool m_Category_nameIsSet;
std::shared_ptr<Collection«VideoContribution»> m_Contributors;
    bool m_ContributorsIsSet;
int64_t m_Created;
    bool m_CreatedIsSet;
utility::string_t m_Embed;
    bool m_EmbedIsSet;
utility::string_t m_Extension;
    bool m_ExtensionIsSet;
int32_t m_Height;
    bool m_HeightIsSet;
int64_t m_Id;
    bool m_IdIsSet;
int32_t m_Length;
    bool m_LengthIsSet;
utility::string_t m_Location;
    bool m_LocationIsSet;
utility::string_t m_Long_description;
    bool m_Long_descriptionIsSet;
utility::string_t m_Mime_type;
    bool m_Mime_typeIsSet;
utility::string_t m_Name;
    bool m_NameIsSet;
int32_t m_Priority;
    bool m_PriorityIsSet;
utility::string_t m_Privacy;
    bool m_PrivacyIsSet;
bool m_Published;
    bool m_PublishedIsSet;
utility::string_t m_Short_description;
    bool m_Short_descriptionIsSet;
int64_t m_Size;
    bool m_SizeIsSet;
std::vector<std::shared_ptr<VideoTag>> m_Tags;
    bool m_TagsIsSet;
utility::string_t m_Thumbnail;
    bool m_ThumbnailIsSet;
int64_t m_Updated;
    bool m_UpdatedIsSet;
std::shared_ptr<User> m_Uploader;
    bool m_UploaderIsSet;
int64_t m_Views;
    bool m_ViewsIsSet;
std::vector<std::shared_ptr<User>> m_Whitelist;
    bool m_WhitelistIsSet;
int32_t m_Width;
    bool m_WidthIsSet;
};

}
}
}
}

#endif /* Video_H_ */
