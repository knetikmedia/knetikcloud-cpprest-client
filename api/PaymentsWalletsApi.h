/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * PaymentsWalletsApi.h
 *
 * 
 */

#ifndef PaymentsWalletsApi_H_
#define PaymentsWalletsApi_H_


#include "ApiClient.h"

#include "PageResource«SimpleWallet».h"
#include "PageResource«WalletTotalResponse».h"
#include "PageResource«WalletTransactionResource».h"
#include "Result.h"
#include "SimpleWallet.h"
#include "WalletAlterRequest.h"
#include "WalletTransactionResource.h"
#include <cpprest/details/basic_types.h>

namespace com {
namespace knetikcloud {
namespace client {
namespace api {

using namespace com::knetikcloud::client::model;

class  PaymentsWalletsApi
{
public:
    PaymentsWalletsApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~PaymentsWalletsApi();
    /// <summary>
    /// Returns the user&#39;s wallet for the given currency code
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="userId">The ID of the user for whom wallet is being retrieved</param>/// <param name="currencyCode">Currency code of the user&#39;s wallet</param>
    pplx::task<std::shared_ptr<SimpleWallet>> getUserWallet(int32_t userId, utility::string_t currencyCode);
    /// <summary>
    /// Retrieve a user&#39;s wallet transactions
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="userId">The ID of the user for whom wallet transactions are being retrieved</param>/// <param name="currencyCode">Currency code of the user&#39;s wallet</param>/// <param name="filterType">Filter for transactions with specified type (optional)</param>/// <param name="filterMaxDate">Filter for transactions from no earlier than the specified date as a unix timestamp in seconds (optional)</param>/// <param name="filterMinDate">Filter for transactions from no later than the specified date as a unix timestamp in seconds (optional)</param>/// <param name="filterSign">Filter for transactions with amount with the given sign.  Allowable values: (&#39;positive&#39;, &#39;negative&#39;) (optional)</param>/// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
    pplx::task<std::shared_ptr<PageResource«WalletTransactionResource»>> getUserWalletTransactions(int32_t userId, utility::string_t currencyCode, utility::string_t filterType, int64_t filterMaxDate, int64_t filterMinDate, utility::string_t filterSign, int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// List all of a user&#39;s wallets
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="userId">The ID of the user for whom wallets are being retrieved</param>
    pplx::task<std::vector<std::shared_ptr<SimpleWallet>>> getUserWallets(int32_t userId);
    /// <summary>
    /// Retrieves a summation of wallet balances by currency code
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    
    pplx::task<std::shared_ptr<PageResource«WalletTotalResponse»>> getWalletBalances();
    /// <summary>
    /// Retrieve wallet transactions across the system
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="filterInvoice">Filter for transactions from a specific invoice (optional)</param>/// <param name="filterType">Filter for transactions with specified type (optional)</param>/// <param name="filterDate">A comma separated string without spaces.  First value is the operator to search on, second value is the log start date, a unix timestamp in seconds. Can be repeated for a range, eg: GT,123,LT,456  Allowed operators: (GT, LT, EQ, GOE, LOE). (optional)</param>/// <param name="filterSign">Filter for transactions with amount with the given sign (optional)</param>/// <param name="filterUserId">Filter for transactions for specific userId (optional)</param>/// <param name="filterUsername">Filter for transactions for specific username that start with the given string (optional)</param>/// <param name="filterDetails">Filter for transactions for specific details that start with the given string (optional)</param>/// <param name="filterCurrencyCode">Filter for transactions for specific currency code (optional)</param>/// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
    pplx::task<std::shared_ptr<PageResource«WalletTransactionResource»>> getWalletTransactions(int32_t filterInvoice, utility::string_t filterType, utility::string_t filterDate, utility::string_t filterSign, int32_t filterUserId, utility::string_t filterUsername, utility::string_t filterDetails, utility::string_t filterCurrencyCode, int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// Retrieve a list of wallets across the system
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
    pplx::task<std::shared_ptr<PageResource«SimpleWallet»>> getWallets(int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// Updates the balance for a user&#39;s wallet
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="userId">The ID of the user for whom wallet is being modified</param>/// <param name="currencyCode">Currency code of the user&#39;s wallet</param>/// <param name="request">The requested balance modification to be made to the user&#39;s wallet (optional)</param>
    pplx::task<std::shared_ptr<WalletTransactionResource>> updateWalletBalance(int32_t userId, utility::string_t currencyCode, std::shared_ptr<WalletAlterRequest> request);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* PaymentsWalletsApi_H_ */

