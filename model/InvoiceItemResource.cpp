/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "InvoiceItemResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

InvoiceItemResource::InvoiceItemResource()
{
    m_Affiliate_id = 0;
    m_Affiliate_idIsSet = false;
    m_Bundle_sku = U("");
    m_Bundle_skuIsSet = false;
    m_Current_fulfillment_status = U("");
    m_Current_fulfillment_statusIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_Invoice_id = 0;
    m_Invoice_idIsSet = false;
    m_Item_id = 0;
    m_Item_idIsSet = false;
    m_Item_name = U("");
    m_Item_nameIsSet = false;
    m_Original_total_price = 0.0;
    m_Original_total_priceIsSet = false;
    m_Original_unit_price = 0.0;
    m_Original_unit_priceIsSet = false;
    m_Qty = 0;
    m_QtyIsSet = false;
    m_Sale_name = U("");
    m_Sale_nameIsSet = false;
    m_Sku = U("");
    m_SkuIsSet = false;
    m_Sku_description = U("");
    m_Sku_descriptionIsSet = false;
    m_System_price = 0.0;
    m_System_priceIsSet = false;
    m_Total_price = 0.0;
    m_Total_priceIsSet = false;
    m_Type_hint = U("");
    m_Type_hintIsSet = false;
    m_Unit_price = 0.0;
    m_Unit_priceIsSet = false;
    
}

InvoiceItemResource::~InvoiceItemResource()
{
}

void InvoiceItemResource::validate()
{
    // TODO: implement validation
}

web::json::value InvoiceItemResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Affiliate_idIsSet)
    {
        val[U("affiliate_id")] = ModelBase::toJson(m_Affiliate_id);
    }
    if(m_Bundle_skuIsSet)
    {
        val[U("bundle_sku")] = ModelBase::toJson(m_Bundle_sku);
    }
    if(m_Current_fulfillment_statusIsSet)
    {
        val[U("current_fulfillment_status")] = ModelBase::toJson(m_Current_fulfillment_status);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_Invoice_idIsSet)
    {
        val[U("invoice_id")] = ModelBase::toJson(m_Invoice_id);
    }
    if(m_Item_idIsSet)
    {
        val[U("item_id")] = ModelBase::toJson(m_Item_id);
    }
    if(m_Item_nameIsSet)
    {
        val[U("item_name")] = ModelBase::toJson(m_Item_name);
    }
    if(m_Original_total_priceIsSet)
    {
        val[U("original_total_price")] = ModelBase::toJson(m_Original_total_price);
    }
    if(m_Original_unit_priceIsSet)
    {
        val[U("original_unit_price")] = ModelBase::toJson(m_Original_unit_price);
    }
    if(m_QtyIsSet)
    {
        val[U("qty")] = ModelBase::toJson(m_Qty);
    }
    if(m_Sale_nameIsSet)
    {
        val[U("sale_name")] = ModelBase::toJson(m_Sale_name);
    }
    if(m_SkuIsSet)
    {
        val[U("sku")] = ModelBase::toJson(m_Sku);
    }
    if(m_Sku_descriptionIsSet)
    {
        val[U("sku_description")] = ModelBase::toJson(m_Sku_description);
    }
    if(m_System_priceIsSet)
    {
        val[U("system_price")] = ModelBase::toJson(m_System_price);
    }
    if(m_Total_priceIsSet)
    {
        val[U("total_price")] = ModelBase::toJson(m_Total_price);
    }
    if(m_Type_hintIsSet)
    {
        val[U("type_hint")] = ModelBase::toJson(m_Type_hint);
    }
    if(m_Unit_priceIsSet)
    {
        val[U("unit_price")] = ModelBase::toJson(m_Unit_price);
    }
    

    return val;
}

void InvoiceItemResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("affiliate_id")))
    {
        setAffiliateId(ModelBase::int32_tFromJson(val[U("affiliate_id")]));
    }
    if(val.has_field(U("bundle_sku")))
    {
        setBundleSku(ModelBase::stringFromJson(val[U("bundle_sku")]));
        
    }
    if(val.has_field(U("current_fulfillment_status")))
    {
        setCurrentFulfillmentStatus(ModelBase::stringFromJson(val[U("current_fulfillment_status")]));
        
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int32_tFromJson(val[U("id")]));
    }
    if(val.has_field(U("invoice_id")))
    {
        setInvoiceId(ModelBase::int32_tFromJson(val[U("invoice_id")]));
    }
    if(val.has_field(U("item_id")))
    {
        setItemId(ModelBase::int32_tFromJson(val[U("item_id")]));
    }
    if(val.has_field(U("item_name")))
    {
        setItemName(ModelBase::stringFromJson(val[U("item_name")]));
        
    }
    if(val.has_field(U("original_total_price")))
    {
        setOriginalTotalPrice(ModelBase::doubleFromJson(val[U("original_total_price")]));
    }
    if(val.has_field(U("original_unit_price")))
    {
        setOriginalUnitPrice(ModelBase::doubleFromJson(val[U("original_unit_price")]));
    }
    if(val.has_field(U("qty")))
    {
        setQty(ModelBase::int32_tFromJson(val[U("qty")]));
    }
    if(val.has_field(U("sale_name")))
    {
        setSaleName(ModelBase::stringFromJson(val[U("sale_name")]));
        
    }
    if(val.has_field(U("sku")))
    {
        setSku(ModelBase::stringFromJson(val[U("sku")]));
        
    }
    if(val.has_field(U("sku_description")))
    {
        setSkuDescription(ModelBase::stringFromJson(val[U("sku_description")]));
        
    }
    if(val.has_field(U("system_price")))
    {
        setSystemPrice(ModelBase::doubleFromJson(val[U("system_price")]));
    }
    if(val.has_field(U("total_price")))
    {
        setTotalPrice(ModelBase::doubleFromJson(val[U("total_price")]));
    }
    if(val.has_field(U("type_hint")))
    {
        setTypeHint(ModelBase::stringFromJson(val[U("type_hint")]));
        
    }
    if(val.has_field(U("unit_price")))
    {
        setUnitPrice(ModelBase::doubleFromJson(val[U("unit_price")]));
    }
    
}

void InvoiceItemResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Affiliate_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("affiliate_id"), m_Affiliate_id));
    }
    if(m_Bundle_skuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("bundle_sku"), m_Bundle_sku));
        
    }
    if(m_Current_fulfillment_statusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("current_fulfillment_status"), m_Current_fulfillment_status));
        
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    if(m_Invoice_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("invoice_id"), m_Invoice_id));
    }
    if(m_Item_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("item_id"), m_Item_id));
    }
    if(m_Item_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("item_name"), m_Item_name));
        
    }
    if(m_Original_total_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("original_total_price"), m_Original_total_price));
    }
    if(m_Original_unit_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("original_unit_price"), m_Original_unit_price));
    }
    if(m_QtyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("qty"), m_Qty));
    }
    if(m_Sale_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("sale_name"), m_Sale_name));
        
    }
    if(m_SkuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("sku"), m_Sku));
        
    }
    if(m_Sku_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("sku_description"), m_Sku_description));
        
    }
    if(m_System_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("system_price"), m_System_price));
    }
    if(m_Total_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("total_price"), m_Total_price));
    }
    if(m_Type_hintIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("type_hint"), m_Type_hint));
        
    }
    if(m_Unit_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("unit_price"), m_Unit_price));
    }
    
}

void InvoiceItemResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("affiliate_id")))
    {
        setAffiliateId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("affiliate_id"))));
    }
    if(multipart->hasContent(U("bundle_sku")))
    {
        setBundleSku(ModelBase::stringFromHttpContent(multipart->getContent(U("bundle_sku"))));
        
    }
    if(multipart->hasContent(U("current_fulfillment_status")))
    {
        setCurrentFulfillmentStatus(ModelBase::stringFromHttpContent(multipart->getContent(U("current_fulfillment_status"))));
        
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("invoice_id")))
    {
        setInvoiceId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("invoice_id"))));
    }
    if(multipart->hasContent(U("item_id")))
    {
        setItemId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("item_id"))));
    }
    if(multipart->hasContent(U("item_name")))
    {
        setItemName(ModelBase::stringFromHttpContent(multipart->getContent(U("item_name"))));
        
    }
    if(multipart->hasContent(U("original_total_price")))
    {
        setOriginalTotalPrice(ModelBase::doubleFromHttpContent(multipart->getContent(U("original_total_price"))));
    }
    if(multipart->hasContent(U("original_unit_price")))
    {
        setOriginalUnitPrice(ModelBase::doubleFromHttpContent(multipart->getContent(U("original_unit_price"))));
    }
    if(multipart->hasContent(U("qty")))
    {
        setQty(ModelBase::int32_tFromHttpContent(multipart->getContent(U("qty"))));
    }
    if(multipart->hasContent(U("sale_name")))
    {
        setSaleName(ModelBase::stringFromHttpContent(multipart->getContent(U("sale_name"))));
        
    }
    if(multipart->hasContent(U("sku")))
    {
        setSku(ModelBase::stringFromHttpContent(multipart->getContent(U("sku"))));
        
    }
    if(multipart->hasContent(U("sku_description")))
    {
        setSkuDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("sku_description"))));
        
    }
    if(multipart->hasContent(U("system_price")))
    {
        setSystemPrice(ModelBase::doubleFromHttpContent(multipart->getContent(U("system_price"))));
    }
    if(multipart->hasContent(U("total_price")))
    {
        setTotalPrice(ModelBase::doubleFromHttpContent(multipart->getContent(U("total_price"))));
    }
    if(multipart->hasContent(U("type_hint")))
    {
        setTypeHint(ModelBase::stringFromHttpContent(multipart->getContent(U("type_hint"))));
        
    }
    if(multipart->hasContent(U("unit_price")))
    {
        setUnitPrice(ModelBase::doubleFromHttpContent(multipart->getContent(U("unit_price"))));
    }
    
}


int32_t InvoiceItemResource::getAffiliateId() const
{
    return m_Affiliate_id;
}
void InvoiceItemResource::setAffiliateId(int32_t value)
{
    m_Affiliate_id = value;
    m_Affiliate_idIsSet = true;
}
bool InvoiceItemResource::affiliate_idIsSet() const
{
    return m_Affiliate_idIsSet;
}
void InvoiceItemResource::unsetAffiliate_id()
{
    m_Affiliate_idIsSet = false;
}
utility::string_t InvoiceItemResource::getBundleSku() const
{
    return m_Bundle_sku;
}
void InvoiceItemResource::setBundleSku(utility::string_t value)
{
    m_Bundle_sku = value;
    m_Bundle_skuIsSet = true;
}
bool InvoiceItemResource::bundle_skuIsSet() const
{
    return m_Bundle_skuIsSet;
}
void InvoiceItemResource::unsetBundle_sku()
{
    m_Bundle_skuIsSet = false;
}
utility::string_t InvoiceItemResource::getCurrentFulfillmentStatus() const
{
    return m_Current_fulfillment_status;
}
void InvoiceItemResource::setCurrentFulfillmentStatus(utility::string_t value)
{
    m_Current_fulfillment_status = value;
    m_Current_fulfillment_statusIsSet = true;
}
bool InvoiceItemResource::current_fulfillment_statusIsSet() const
{
    return m_Current_fulfillment_statusIsSet;
}
void InvoiceItemResource::unsetCurrent_fulfillment_status()
{
    m_Current_fulfillment_statusIsSet = false;
}
int32_t InvoiceItemResource::getId() const
{
    return m_Id;
}
void InvoiceItemResource::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool InvoiceItemResource::idIsSet() const
{
    return m_IdIsSet;
}
void InvoiceItemResource::unsetId()
{
    m_IdIsSet = false;
}
int32_t InvoiceItemResource::getInvoiceId() const
{
    return m_Invoice_id;
}
void InvoiceItemResource::setInvoiceId(int32_t value)
{
    m_Invoice_id = value;
    m_Invoice_idIsSet = true;
}
bool InvoiceItemResource::invoice_idIsSet() const
{
    return m_Invoice_idIsSet;
}
void InvoiceItemResource::unsetInvoice_id()
{
    m_Invoice_idIsSet = false;
}
int32_t InvoiceItemResource::getItemId() const
{
    return m_Item_id;
}
void InvoiceItemResource::setItemId(int32_t value)
{
    m_Item_id = value;
    m_Item_idIsSet = true;
}
bool InvoiceItemResource::item_idIsSet() const
{
    return m_Item_idIsSet;
}
void InvoiceItemResource::unsetItem_id()
{
    m_Item_idIsSet = false;
}
utility::string_t InvoiceItemResource::getItemName() const
{
    return m_Item_name;
}
void InvoiceItemResource::setItemName(utility::string_t value)
{
    m_Item_name = value;
    m_Item_nameIsSet = true;
}
bool InvoiceItemResource::item_nameIsSet() const
{
    return m_Item_nameIsSet;
}
void InvoiceItemResource::unsetItem_name()
{
    m_Item_nameIsSet = false;
}
double InvoiceItemResource::getOriginalTotalPrice() const
{
    return m_Original_total_price;
}
void InvoiceItemResource::setOriginalTotalPrice(double value)
{
    m_Original_total_price = value;
    m_Original_total_priceIsSet = true;
}
bool InvoiceItemResource::original_total_priceIsSet() const
{
    return m_Original_total_priceIsSet;
}
void InvoiceItemResource::unsetOriginal_total_price()
{
    m_Original_total_priceIsSet = false;
}
double InvoiceItemResource::getOriginalUnitPrice() const
{
    return m_Original_unit_price;
}
void InvoiceItemResource::setOriginalUnitPrice(double value)
{
    m_Original_unit_price = value;
    m_Original_unit_priceIsSet = true;
}
bool InvoiceItemResource::original_unit_priceIsSet() const
{
    return m_Original_unit_priceIsSet;
}
void InvoiceItemResource::unsetOriginal_unit_price()
{
    m_Original_unit_priceIsSet = false;
}
int32_t InvoiceItemResource::getQty() const
{
    return m_Qty;
}
void InvoiceItemResource::setQty(int32_t value)
{
    m_Qty = value;
    m_QtyIsSet = true;
}
bool InvoiceItemResource::qtyIsSet() const
{
    return m_QtyIsSet;
}
void InvoiceItemResource::unsetQty()
{
    m_QtyIsSet = false;
}
utility::string_t InvoiceItemResource::getSaleName() const
{
    return m_Sale_name;
}
void InvoiceItemResource::setSaleName(utility::string_t value)
{
    m_Sale_name = value;
    m_Sale_nameIsSet = true;
}
bool InvoiceItemResource::sale_nameIsSet() const
{
    return m_Sale_nameIsSet;
}
void InvoiceItemResource::unsetSale_name()
{
    m_Sale_nameIsSet = false;
}
utility::string_t InvoiceItemResource::getSku() const
{
    return m_Sku;
}
void InvoiceItemResource::setSku(utility::string_t value)
{
    m_Sku = value;
    m_SkuIsSet = true;
}
bool InvoiceItemResource::skuIsSet() const
{
    return m_SkuIsSet;
}
void InvoiceItemResource::unsetSku()
{
    m_SkuIsSet = false;
}
utility::string_t InvoiceItemResource::getSkuDescription() const
{
    return m_Sku_description;
}
void InvoiceItemResource::setSkuDescription(utility::string_t value)
{
    m_Sku_description = value;
    m_Sku_descriptionIsSet = true;
}
bool InvoiceItemResource::sku_descriptionIsSet() const
{
    return m_Sku_descriptionIsSet;
}
void InvoiceItemResource::unsetSku_description()
{
    m_Sku_descriptionIsSet = false;
}
double InvoiceItemResource::getSystemPrice() const
{
    return m_System_price;
}
void InvoiceItemResource::setSystemPrice(double value)
{
    m_System_price = value;
    m_System_priceIsSet = true;
}
bool InvoiceItemResource::system_priceIsSet() const
{
    return m_System_priceIsSet;
}
void InvoiceItemResource::unsetSystem_price()
{
    m_System_priceIsSet = false;
}
double InvoiceItemResource::getTotalPrice() const
{
    return m_Total_price;
}
void InvoiceItemResource::setTotalPrice(double value)
{
    m_Total_price = value;
    m_Total_priceIsSet = true;
}
bool InvoiceItemResource::total_priceIsSet() const
{
    return m_Total_priceIsSet;
}
void InvoiceItemResource::unsetTotal_price()
{
    m_Total_priceIsSet = false;
}
utility::string_t InvoiceItemResource::getTypeHint() const
{
    return m_Type_hint;
}
void InvoiceItemResource::setTypeHint(utility::string_t value)
{
    m_Type_hint = value;
    m_Type_hintIsSet = true;
}
bool InvoiceItemResource::type_hintIsSet() const
{
    return m_Type_hintIsSet;
}
void InvoiceItemResource::unsetType_hint()
{
    m_Type_hintIsSet = false;
}
double InvoiceItemResource::getUnitPrice() const
{
    return m_Unit_price;
}
void InvoiceItemResource::setUnitPrice(double value)
{
    m_Unit_price = value;
    m_Unit_priceIsSet = true;
}
bool InvoiceItemResource::unit_priceIsSet() const
{
    return m_Unit_priceIsSet;
}
void InvoiceItemResource::unsetUnit_price()
{
    m_Unit_priceIsSet = false;
}

}
}
}
}

