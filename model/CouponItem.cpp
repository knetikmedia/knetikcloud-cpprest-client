/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "CouponItem.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

CouponItem::CouponItem()
{
    m_Coupon_type_hint = U("");
    m_Discount_max = 0.0;
    m_Discount_maxIsSet = false;
    m_Discount_min_cart_value = 0.0;
    m_Discount_min_cart_valueIsSet = false;
    m_Discount_type = U("");
    m_Discount_value = 0.0;
    m_Exclusive = false;
    m_ExclusiveIsSet = false;
    m_Item_id = 0;
    m_Item_idIsSet = false;
    m_Max_quantity = 0;
    m_Max_quantityIsSet = false;
    m_Self_exclusive = false;
    m_Self_exclusiveIsSet = false;
    m_Valid_for_tagsIsSet = false;
}

CouponItem::~CouponItem()
{
}

void CouponItem::validate()
{
    // TODO: implement validation
}

web::json::value CouponItem::toJson() const
{
    web::json::value val = this->StoreItem::toJson();

    val[U("coupon_type_hint")] = ModelBase::toJson(m_Coupon_type_hint);
    if(m_Discount_maxIsSet)
    {
        val[U("discount_max")] = ModelBase::toJson(m_Discount_max);
    }
    if(m_Discount_min_cart_valueIsSet)
    {
        val[U("discount_min_cart_value")] = ModelBase::toJson(m_Discount_min_cart_value);
    }
    val[U("discount_type")] = ModelBase::toJson(m_Discount_type);
    val[U("discount_value")] = ModelBase::toJson(m_Discount_value);
    if(m_ExclusiveIsSet)
    {
        val[U("exclusive")] = ModelBase::toJson(m_Exclusive);
    }
    if(m_Item_idIsSet)
    {
        val[U("item_id")] = ModelBase::toJson(m_Item_id);
    }
    if(m_Max_quantityIsSet)
    {
        val[U("max_quantity")] = ModelBase::toJson(m_Max_quantity);
    }
    if(m_Self_exclusiveIsSet)
    {
        val[U("self_exclusive")] = ModelBase::toJson(m_Self_exclusive);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Valid_for_tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("valid_for_tags")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void CouponItem::fromJson(web::json::value& val)
{
    this->StoreItem::fromJson(val);

    setCouponTypeHint(ModelBase::stringFromJson(val[U("coupon_type_hint")]));
    if(val.has_field(U("discount_max")))
    {
        setDiscountMax(ModelBase::doubleFromJson(val[U("discount_max")]));
    }
    if(val.has_field(U("discount_min_cart_value")))
    {
        setDiscountMinCartValue(ModelBase::doubleFromJson(val[U("discount_min_cart_value")]));
    }
    setDiscountType(ModelBase::stringFromJson(val[U("discount_type")]));
    setDiscountValue(ModelBase::doubleFromJson(val[U("discount_value")]));
    if(val.has_field(U("exclusive")))
    {
        setExclusive(ModelBase::boolFromJson(val[U("exclusive")]));
    }
    if(val.has_field(U("item_id")))
    {
        setItemId(ModelBase::int32_tFromJson(val[U("item_id")]));
    }
    if(val.has_field(U("max_quantity")))
    {
        setMaxQuantity(ModelBase::int32_tFromJson(val[U("max_quantity")]));
    }
    if(val.has_field(U("self_exclusive")))
    {
        setSelfExclusive(ModelBase::boolFromJson(val[U("self_exclusive")]));
    }
    {
        m_Valid_for_tags.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("valid_for_tags")))
        {
        for( auto& item : val[U("valid_for_tags")].as_array() )
        {
            m_Valid_for_tags.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
}

void CouponItem::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Additional_properties )
        {
            web::json::value tmp = web::json::value::object();
            tmp[U("key")] = ModelBase::toJson(item.first);
            tmp[U("value")] = ModelBase::toJson(item.second);
            jsonArray.push_back(tmp);
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("additional_properties"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Behaviors )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("behaviors"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_CategoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("category"), m_Category));
        
    }
    if(m_Created_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("created_date"), m_Created_date));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    if(m_Long_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("long_description"), m_Long_description));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    if(m_Short_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("short_description"), m_Short_description));
        
    }
    if(m_SortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("sort"), m_Sort));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("tags"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_TemplateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("template"), m_Template));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("type_hint"), m_Type_hint));
    if(m_Unique_keyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("unique_key"), m_Unique_key));
        
    }
    if(m_Updated_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("updated_date"), m_Updated_date));
    }
    if(m_DisplayableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("displayable"), m_Displayable));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Geo_country_list )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("geo_country_list"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_Geo_policy_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("geo_policy_type"), m_Geo_policy_type));
        
    }
    if(m_Shipping_tierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("shipping_tier"), m_Shipping_tier));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Skus )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + U("skus"), web::json::value::array(jsonArray), U("application/json")));
            }
    if(m_Store_endIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("store_end"), m_Store_end));
    }
    if(m_Store_startIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("store_start"), m_Store_start));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("vendor_id"), m_Vendor_id));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("coupon_type_hint"), m_Coupon_type_hint));
    if(m_Discount_maxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("discount_max"), m_Discount_max));
    }
    if(m_Discount_min_cart_valueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("discount_min_cart_value"), m_Discount_min_cart_value));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("discount_type"), m_Discount_type));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("discount_value"), m_Discount_value));
    if(m_ExclusiveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("exclusive"), m_Exclusive));
    }
    if(m_Item_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("item_id"), m_Item_id));
    }
    if(m_Max_quantityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("max_quantity"), m_Max_quantity));
    }
    if(m_Self_exclusiveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("self_exclusive"), m_Self_exclusive));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Valid_for_tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("valid_for_tags"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
}

void CouponItem::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        m_Additional_properties.clear();
        if(multipart->hasContent(U("additional_properties")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("additional_properties"))));
        for( auto& item : jsonArray.as_array() )
        {
            utility::string_t key;
            if(item.has_field(U("key")))
            {
                key = ModelBase::stringFromJson(item[U("key")]);
            }
            if(item.is_null())
            {
                m_Additional_properties.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, std::shared_ptr<Property>(nullptr) ));
            }
            else
            {
                std::shared_ptr<Property> newItem(new Property());
                newItem->fromJson(item[U("value")]);
                m_Additional_properties.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, newItem ));
            }
        }
        }
    }
    {
        m_Behaviors.clear();
        if(multipart->hasContent(U("behaviors")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("behaviors"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Behaviors.push_back( std::shared_ptr<Behavior>(nullptr) );
            }
            else
            {
                std::shared_ptr<Behavior> newItem(new Behavior());
                newItem->fromJson(item);
                m_Behaviors.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(U("category")))
    {
        setCategory(ModelBase::stringFromHttpContent(multipart->getContent(U("category"))));
    }
    if(multipart->hasContent(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("created_date"))));
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("long_description")))
    {
        setLongDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("long_description"))));
    }
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    if(multipart->hasContent(U("short_description")))
    {
        setShortDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("short_description"))));
    }
    if(multipart->hasContent(U("sort")))
    {
        setSort(ModelBase::int32_tFromHttpContent(multipart->getContent(U("sort"))));
    }
    {
        m_Tags.clear();
        if(multipart->hasContent(U("tags")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("tags"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Tags.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(multipart->hasContent(U("template")))
    {
        setTemplate(ModelBase::stringFromHttpContent(multipart->getContent(U("template"))));
    }
    setTypeHint(ModelBase::stringFromHttpContent(multipart->getContent(U("type_hint"))));
    if(multipart->hasContent(U("unique_key")))
    {
        setUniqueKey(ModelBase::stringFromHttpContent(multipart->getContent(U("unique_key"))));
    }
    if(multipart->hasContent(U("updated_date")))
    {
        setUpdatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("updated_date"))));
    }
    if(multipart->hasContent(U("displayable")))
    {
        setDisplayable(ModelBase::boolFromHttpContent(multipart->getContent(U("displayable"))));
    }
    {
        m_Geo_country_list.clear();
        if(multipart->hasContent(U("geo_country_list")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("geo_country_list"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Geo_country_list.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(multipart->hasContent(U("geo_policy_type")))
    {
        setGeoPolicyType(ModelBase::stringFromHttpContent(multipart->getContent(U("geo_policy_type"))));
    }
    if(multipart->hasContent(U("shipping_tier")))
    {
        setShippingTier(ModelBase::int32_tFromHttpContent(multipart->getContent(U("shipping_tier"))));
    }
    {
        m_Skus.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("skus"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Skus.push_back( std::shared_ptr<Sku>(nullptr) );
            }
            else
            {
                std::shared_ptr<Sku> newItem(new Sku());
                newItem->fromJson(item);
                m_Skus.push_back( newItem );
            }
        }
    }
    if(multipart->hasContent(U("store_end")))
    {
        setStoreEnd(ModelBase::int64_tFromHttpContent(multipart->getContent(U("store_end"))));
    }
    if(multipart->hasContent(U("store_start")))
    {
        setStoreStart(ModelBase::int64_tFromHttpContent(multipart->getContent(U("store_start"))));
    }
    setVendorId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("vendor_id"))));
    setCouponTypeHint(ModelBase::stringFromHttpContent(multipart->getContent(U("coupon_type_hint"))));
    if(multipart->hasContent(U("discount_max")))
    {
        setDiscountMax(ModelBase::doubleFromHttpContent(multipart->getContent(U("discount_max"))));
    }
    if(multipart->hasContent(U("discount_min_cart_value")))
    {
        setDiscountMinCartValue(ModelBase::doubleFromHttpContent(multipart->getContent(U("discount_min_cart_value"))));
    }
    setDiscountType(ModelBase::stringFromHttpContent(multipart->getContent(U("discount_type"))));
    setDiscountValue(ModelBase::doubleFromHttpContent(multipart->getContent(U("discount_value"))));
    if(multipart->hasContent(U("exclusive")))
    {
        setExclusive(ModelBase::boolFromHttpContent(multipart->getContent(U("exclusive"))));
    }
    if(multipart->hasContent(U("item_id")))
    {
        setItemId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("item_id"))));
    }
    if(multipart->hasContent(U("max_quantity")))
    {
        setMaxQuantity(ModelBase::int32_tFromHttpContent(multipart->getContent(U("max_quantity"))));
    }
    if(multipart->hasContent(U("self_exclusive")))
    {
        setSelfExclusive(ModelBase::boolFromHttpContent(multipart->getContent(U("self_exclusive"))));
    }
    {
        m_Valid_for_tags.clear();
        if(multipart->hasContent(U("valid_for_tags")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("valid_for_tags"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Valid_for_tags.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
}

utility::string_t CouponItem::getCouponTypeHint() const
{
    return m_Coupon_type_hint;
}


void CouponItem::setCouponTypeHint(utility::string_t value)
{
    m_Coupon_type_hint = value;
    
}
double CouponItem::getDiscountMax() const
{
    return m_Discount_max;
}


void CouponItem::setDiscountMax(double value)
{
    m_Discount_max = value;
    m_Discount_maxIsSet = true;
}
bool CouponItem::discountMaxIsSet() const
{
    return m_Discount_maxIsSet;
}

void CouponItem::unsetDiscount_max()
{
    m_Discount_maxIsSet = false;
}

double CouponItem::getDiscountMinCartValue() const
{
    return m_Discount_min_cart_value;
}


void CouponItem::setDiscountMinCartValue(double value)
{
    m_Discount_min_cart_value = value;
    m_Discount_min_cart_valueIsSet = true;
}
bool CouponItem::discountMinCartValueIsSet() const
{
    return m_Discount_min_cart_valueIsSet;
}

void CouponItem::unsetDiscount_min_cart_value()
{
    m_Discount_min_cart_valueIsSet = false;
}

utility::string_t CouponItem::getDiscountType() const
{
    return m_Discount_type;
}


void CouponItem::setDiscountType(utility::string_t value)
{
    m_Discount_type = value;
    
}
double CouponItem::getDiscountValue() const
{
    return m_Discount_value;
}


void CouponItem::setDiscountValue(double value)
{
    m_Discount_value = value;
    
}
bool CouponItem::getExclusive() const
{
    return m_Exclusive;
}


void CouponItem::setExclusive(bool value)
{
    m_Exclusive = value;
    m_ExclusiveIsSet = true;
}
bool CouponItem::exclusiveIsSet() const
{
    return m_ExclusiveIsSet;
}

void CouponItem::unsetExclusive()
{
    m_ExclusiveIsSet = false;
}

int32_t CouponItem::getItemId() const
{
    return m_Item_id;
}


void CouponItem::setItemId(int32_t value)
{
    m_Item_id = value;
    m_Item_idIsSet = true;
}
bool CouponItem::itemIdIsSet() const
{
    return m_Item_idIsSet;
}

void CouponItem::unsetItem_id()
{
    m_Item_idIsSet = false;
}

int32_t CouponItem::getMaxQuantity() const
{
    return m_Max_quantity;
}


void CouponItem::setMaxQuantity(int32_t value)
{
    m_Max_quantity = value;
    m_Max_quantityIsSet = true;
}
bool CouponItem::maxQuantityIsSet() const
{
    return m_Max_quantityIsSet;
}

void CouponItem::unsetMax_quantity()
{
    m_Max_quantityIsSet = false;
}

bool CouponItem::getSelfExclusive() const
{
    return m_Self_exclusive;
}


void CouponItem::setSelfExclusive(bool value)
{
    m_Self_exclusive = value;
    m_Self_exclusiveIsSet = true;
}
bool CouponItem::selfExclusiveIsSet() const
{
    return m_Self_exclusiveIsSet;
}

void CouponItem::unsetSelf_exclusive()
{
    m_Self_exclusiveIsSet = false;
}

std::vector<utility::string_t>& CouponItem::getValidForTags()
{
    return m_Valid_for_tags;
}

void CouponItem::setValidForTags(std::vector<utility::string_t> value)
{
    m_Valid_for_tags = value;
    m_Valid_for_tagsIsSet = true;
}
bool CouponItem::validForTagsIsSet() const
{
    return m_Valid_for_tagsIsSet;
}

void CouponItem::unsetValid_for_tags()
{
    m_Valid_for_tagsIsSet = false;
}

}
}
}
}

