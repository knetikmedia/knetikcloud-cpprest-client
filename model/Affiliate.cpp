/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Affiliate.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Affiliate::Affiliate()
{
    m_Affiliate_key = U("");
    m_Affiliate_keyIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    
}

Affiliate::~Affiliate()
{
}

void Affiliate::validate()
{
    // TODO: implement validation
}

web::json::value Affiliate::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Affiliate_keyIsSet)
    {
        val[U("affiliate_key")] = ModelBase::toJson(m_Affiliate_key);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    

    return val;
}

void Affiliate::fromJson(web::json::value& val)
{
    if(val.has_field(U("affiliate_key")))
    {
        setAffiliateKey(ModelBase::stringFromJson(val[U("affiliate_key")]));
        
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int32_tFromJson(val[U("id")]));
    }
    
}

void Affiliate::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Affiliate_keyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("affiliate_key"), m_Affiliate_key));
        
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    
}

void Affiliate::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("affiliate_key")))
    {
        setAffiliateKey(ModelBase::stringFromHttpContent(multipart->getContent(U("affiliate_key"))));
        
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("id"))));
    }
    
}


utility::string_t Affiliate::getAffiliateKey() const
{
    return m_Affiliate_key;
}
void Affiliate::setAffiliateKey(utility::string_t value)
{
    m_Affiliate_key = value;
    m_Affiliate_keyIsSet = true;
}
bool Affiliate::affiliate_keyIsSet() const
{
    return m_Affiliate_keyIsSet;
}
void Affiliate::unsetAffiliate_key()
{
    m_Affiliate_keyIsSet = false;
}
int32_t Affiliate::getId() const
{
    return m_Id;
}
void Affiliate::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Affiliate::idIsSet() const
{
    return m_IdIsSet;
}
void Affiliate::unsetId()
{
    m_IdIsSet = false;
}

}
}
}
}

