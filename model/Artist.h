/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Artist.h
 *
 * 
 */

#ifndef Artist_H_
#define Artist_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>
#include "Property.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Artist
    : public ModelBase
{
public:
    Artist();
    virtual ~Artist();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Artist members

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<Property>>& getAdditionalProperties();
    bool additional_propertiesIsSet() const;
    void unsetAdditional_properties();
    /// <summary>
    /// 
    /// </summary>
    int64_t getBorn() const;
    void setBorn(int64_t value);
    bool bornIsSet() const;
    void unsetBorn();
    /// <summary>
    /// 
    /// </summary>
    int32_t getContributionCount() const;
    void setContributionCount(int32_t value);
    bool contribution_countIsSet() const;
    void unsetContribution_count();
    /// <summary>
    /// 
    /// </summary>
    int64_t getCreated() const;
    void setCreated(int64_t value);
    bool createdIsSet() const;
    void unsetCreated();
    /// <summary>
    /// 
    /// </summary>
    int64_t getDied() const;
    void setDied(int64_t value);
    bool diedIsSet() const;
    void unsetDied();
    /// <summary>
    /// 
    /// </summary>
    int64_t getId() const;
    void setId(int64_t value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLongDescription() const;
    void setLongDescription(utility::string_t value);
    bool long_descriptionIsSet() const;
    void unsetLong_description();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    void setName(utility::string_t value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// 
    /// </summary>
    int32_t getPriority() const;
    void setPriority(int32_t value);
    bool priorityIsSet() const;
    void unsetPriority();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPropertiesString() const;
    void setPropertiesString(utility::string_t value);
    bool properties_stringIsSet() const;
    void unsetProperties_string();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getShortDescription() const;
    void setShortDescription(utility::string_t value);
    bool short_descriptionIsSet() const;
    void unsetShort_description();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTemplate() const;
    void setTemplate(utility::string_t value);
    bool templateIsSet() const;
    void unsetTemplate();
    /// <summary>
    /// 
    /// </summary>
    int64_t getUpdated() const;
    void setUpdated(int64_t value);
    bool updatedIsSet() const;
    void unsetUpdated();

protected:
    std::map<utility::string_t, std::shared_ptr<Property>> m_Additional_properties;
    bool m_Additional_propertiesIsSet;
int64_t m_Born;
    bool m_BornIsSet;
int32_t m_Contribution_count;
    bool m_Contribution_countIsSet;
int64_t m_Created;
    bool m_CreatedIsSet;
int64_t m_Died;
    bool m_DiedIsSet;
int64_t m_Id;
    bool m_IdIsSet;
utility::string_t m_Long_description;
    bool m_Long_descriptionIsSet;
utility::string_t m_Name;
    bool m_NameIsSet;
int32_t m_Priority;
    bool m_PriorityIsSet;
utility::string_t m_Properties_string;
    bool m_Properties_stringIsSet;
utility::string_t m_Short_description;
    bool m_Short_descriptionIsSet;
utility::string_t m_Template;
    bool m_TemplateIsSet;
int64_t m_Updated;
    bool m_UpdatedIsSet;
};

}
}
}
}

#endif /* Artist_H_ */
