/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ServiceDeployedEvent.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

ServiceDeployedEvent::ServiceDeployedEvent()
{
    m_Service_name = U("");
    m_Swagger_url = U("");
}

ServiceDeployedEvent::~ServiceDeployedEvent()
{
}

void ServiceDeployedEvent::validate()
{
    // TODO: implement validation
}

web::json::value ServiceDeployedEvent::toJson() const
{
    web::json::value val = this->BroadcastableEvent::toJson();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Events )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[U("events")] = web::json::value::array(jsonArray);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Resources )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[U("resources")] = web::json::value::array(jsonArray);
    }
    val[U("service_name")] = ModelBase::toJson(m_Service_name);
    val[U("swagger_url")] = ModelBase::toJson(m_Swagger_url);

    return val;
}

void ServiceDeployedEvent::fromJson(web::json::value& val)
{
    this->BroadcastableEvent::fromJson(val);

    {
        m_Events.clear();
        std::vector<web::json::value> jsonArray;
        for( auto& item : val[U("events")].as_array() )
        {
            if(item.is_null())
            {
                m_Events.push_back( std::shared_ptr<BreTriggerResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<BreTriggerResource> newItem(new BreTriggerResource());
                newItem->fromJson(item);
                m_Events.push_back( newItem );
            }
        }
    }
    {
        m_Resources.clear();
        std::vector<web::json::value> jsonArray;
        for( auto& item : val[U("resources")].as_array() )
        {
            if(item.is_null())
            {
                m_Resources.push_back( std::shared_ptr<ResourceTypeDescription>(nullptr) );
            }
            else
            {
                std::shared_ptr<ResourceTypeDescription> newItem(new ResourceTypeDescription());
                newItem->fromJson(item);
                m_Resources.push_back( newItem );
            }
        }
    }
    setServiceName(ModelBase::stringFromJson(val[U("service_name")]));
    setSwaggerUrl(ModelBase::stringFromJson(val[U("swagger_url")]));
}

void ServiceDeployedEvent::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_ClientIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("client"), m_Client));
        
    }
    if(m_CustomerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("customer"), m_Customer));
        
    }
    if(m_Do_not_broadcastIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("do_not_broadcast"), m_Do_not_broadcast));
    }
    if(m_SectionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("section"), m_Section));
        
    }
    if(m_SourceIsSet)
    {
        if (m_Source.get())
        {
            m_Source->toMultipart(multipart, U("source."));
        }
        
    }
    if(m_SpecificsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("specifics"), m_Specifics));
        
    }
    if(m_SynchronousIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("synchronous"), m_Synchronous));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("timestamp"), m_Timestamp));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("type"), m_Type));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Events )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + U("events"), web::json::value::array(jsonArray), U("application/json")));
            }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Resources )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + U("resources"), web::json::value::array(jsonArray), U("application/json")));
            }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("service_name"), m_Service_name));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("swagger_url"), m_Swagger_url));
}

void ServiceDeployedEvent::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("client")))
    {
        setClient(ModelBase::stringFromHttpContent(multipart->getContent(U("client"))));
    }
    if(multipart->hasContent(U("customer")))
    {
        setCustomer(ModelBase::stringFromHttpContent(multipart->getContent(U("customer"))));
    }
    if(multipart->hasContent(U("do_not_broadcast")))
    {
        setDoNotBroadcast(ModelBase::boolFromHttpContent(multipart->getContent(U("do_not_broadcast"))));
    }
    if(multipart->hasContent(U("section")))
    {
        setSection(ModelBase::stringFromHttpContent(multipart->getContent(U("section"))));
    }
    if(multipart->hasContent(U("source")))
    {
        if(multipart->hasContent(U("source")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, U("source."));
            setSource( newItem );
        }
    }
    if(multipart->hasContent(U("specifics")))
    {
        setSpecifics(ModelBase::stringFromHttpContent(multipart->getContent(U("specifics"))));
    }
    if(multipart->hasContent(U("synchronous")))
    {
        setSynchronous(ModelBase::boolFromHttpContent(multipart->getContent(U("synchronous"))));
    }
    if(multipart->hasContent(U("timestamp")))
    {
        setTimestamp(ModelBase::int64_tFromHttpContent(multipart->getContent(U("timestamp"))));
    }
    setType(ModelBase::stringFromHttpContent(multipart->getContent(U("type"))));
    {
        m_Events.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("events"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Events.push_back( std::shared_ptr<BreTriggerResource>(nullptr) );
            }
            else
            {
                std::shared_ptr<BreTriggerResource> newItem(new BreTriggerResource());
                newItem->fromJson(item);
                m_Events.push_back( newItem );
            }
        }
    }
    {
        m_Resources.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("resources"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Resources.push_back( std::shared_ptr<ResourceTypeDescription>(nullptr) );
            }
            else
            {
                std::shared_ptr<ResourceTypeDescription> newItem(new ResourceTypeDescription());
                newItem->fromJson(item);
                m_Resources.push_back( newItem );
            }
        }
    }
    setServiceName(ModelBase::stringFromHttpContent(multipart->getContent(U("service_name"))));
    setSwaggerUrl(ModelBase::stringFromHttpContent(multipart->getContent(U("swagger_url"))));
}

std::vector<std::shared_ptr<BreTriggerResource>>& ServiceDeployedEvent::getEvents()
{
    return m_Events;
}

void ServiceDeployedEvent::setEvents(std::vector<std::shared_ptr<BreTriggerResource>> value)
{
    m_Events = value;
    
}
std::vector<std::shared_ptr<ResourceTypeDescription>>& ServiceDeployedEvent::getResources()
{
    return m_Resources;
}

void ServiceDeployedEvent::setResources(std::vector<std::shared_ptr<ResourceTypeDescription>> value)
{
    m_Resources = value;
    
}
utility::string_t ServiceDeployedEvent::getServiceName() const
{
    return m_Service_name;
}


void ServiceDeployedEvent::setServiceName(utility::string_t value)
{
    m_Service_name = value;
    
}
utility::string_t ServiceDeployedEvent::getSwaggerUrl() const
{
    return m_Swagger_url;
}


void ServiceDeployedEvent::setSwaggerUrl(utility::string_t value)
{
    m_Swagger_url = value;
    
}
}
}
}
}

