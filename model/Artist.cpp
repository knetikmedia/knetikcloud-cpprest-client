/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Artist.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Artist::Artist()
{
    m_Additional_propertiesIsSet = false;
    m_Born = 0;
    m_BornIsSet = false;
    m_Contribution_count = 0;
    m_Contribution_countIsSet = false;
    m_Created = 0;
    m_CreatedIsSet = false;
    m_Died = 0;
    m_DiedIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_Long_description = U("");
    m_Long_descriptionIsSet = false;
    m_Name = U("");
    m_NameIsSet = false;
    m_Priority = 0;
    m_PriorityIsSet = false;
    m_Properties_string = U("");
    m_Properties_stringIsSet = false;
    m_Short_description = U("");
    m_Short_descriptionIsSet = false;
    m_Template = U("");
    m_TemplateIsSet = false;
    m_Updated = 0;
    m_UpdatedIsSet = false;
    
}

Artist::~Artist()
{
}

void Artist::validate()
{
    // TODO: implement validation
}

web::json::value Artist::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Additional_propertiesIsSet)
    {
        val[U("additional_properties")] = ModelBase::toJson(m_Additional_properties);
    }
    if(m_BornIsSet)
    {
        val[U("born")] = ModelBase::toJson(m_Born);
    }
    if(m_Contribution_countIsSet)
    {
        val[U("contribution_count")] = ModelBase::toJson(m_Contribution_count);
    }
    if(m_CreatedIsSet)
    {
        val[U("created")] = ModelBase::toJson(m_Created);
    }
    if(m_DiedIsSet)
    {
        val[U("died")] = ModelBase::toJson(m_Died);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_Long_descriptionIsSet)
    {
        val[U("long_description")] = ModelBase::toJson(m_Long_description);
    }
    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }
    if(m_PriorityIsSet)
    {
        val[U("priority")] = ModelBase::toJson(m_Priority);
    }
    if(m_Properties_stringIsSet)
    {
        val[U("properties_string")] = ModelBase::toJson(m_Properties_string);
    }
    if(m_Short_descriptionIsSet)
    {
        val[U("short_description")] = ModelBase::toJson(m_Short_description);
    }
    if(m_TemplateIsSet)
    {
        val[U("template")] = ModelBase::toJson(m_Template);
    }
    if(m_UpdatedIsSet)
    {
        val[U("updated")] = ModelBase::toJson(m_Updated);
    }
    

    return val;
}

void Artist::fromJson(web::json::value& val)
{
    if(val.has_field(U("additional_properties")))
    {
        if(!val[U("additional_properties")].is_null())
        {
            std::map<utility::string_t, std::shared_ptr<Property>> newItem(std::map<utility::string_t, Property>());
            newItem->fromJson(val[U("additional_properties")]);
            setAdditionalProperties( newItem );
        }
        
    }
    if(val.has_field(U("born")))
    {
        setBorn(ModelBase::int64_tFromJson(val[U("born")]));
    }
    if(val.has_field(U("contribution_count")))
    {
        setContributionCount(ModelBase::int32_tFromJson(val[U("contribution_count")]));
    }
    if(val.has_field(U("created")))
    {
        setCreated(ModelBase::int64_tFromJson(val[U("created")]));
    }
    if(val.has_field(U("died")))
    {
        setDied(ModelBase::int64_tFromJson(val[U("died")]));
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int64_tFromJson(val[U("id")]));
    }
    if(val.has_field(U("long_description")))
    {
        setLongDescription(ModelBase::stringFromJson(val[U("long_description")]));
        
    }
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
        
    }
    if(val.has_field(U("priority")))
    {
        setPriority(ModelBase::int32_tFromJson(val[U("priority")]));
    }
    if(val.has_field(U("properties_string")))
    {
        setPropertiesString(ModelBase::stringFromJson(val[U("properties_string")]));
        
    }
    if(val.has_field(U("short_description")))
    {
        setShortDescription(ModelBase::stringFromJson(val[U("short_description")]));
        
    }
    if(val.has_field(U("template")))
    {
        setTemplate(ModelBase::stringFromJson(val[U("template")]));
        
    }
    if(val.has_field(U("updated")))
    {
        setUpdated(ModelBase::int64_tFromJson(val[U("updated")]));
    }
    
}

void Artist::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Additional_propertiesIsSet)
    {
        if (m_Additional_properties.get())
        {
            m_Additional_properties->toMultipart(multipart, U("additional_properties."));
        }
        
    }
    if(m_BornIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("born"), m_Born));
    }
    if(m_Contribution_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("contribution_count"), m_Contribution_count));
    }
    if(m_CreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("created"), m_Created));
    }
    if(m_DiedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("died"), m_Died));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    if(m_Long_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("long_description"), m_Long_description));
        
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
    if(m_PriorityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("priority"), m_Priority));
    }
    if(m_Properties_stringIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("properties_string"), m_Properties_string));
        
    }
    if(m_Short_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("short_description"), m_Short_description));
        
    }
    if(m_TemplateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("template"), m_Template));
        
    }
    if(m_UpdatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("updated"), m_Updated));
    }
    
}

void Artist::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("additional_properties")))
    {
        if(multipart->hasContent(U("additional_properties")))
        {
            std::map<utility::string_t, std::shared_ptr<Property>> newItem(std::map<utility::string_t, Property>());
            newItem->fromMultiPart(multipart, U("additional_properties."));
            setAdditionalProperties( newItem );
        }
        
    }
    if(multipart->hasContent(U("born")))
    {
        setBorn(ModelBase::int64_tFromHttpContent(multipart->getContent(U("born"))));
    }
    if(multipart->hasContent(U("contribution_count")))
    {
        setContributionCount(ModelBase::int32_tFromHttpContent(multipart->getContent(U("contribution_count"))));
    }
    if(multipart->hasContent(U("created")))
    {
        setCreated(ModelBase::int64_tFromHttpContent(multipart->getContent(U("created"))));
    }
    if(multipart->hasContent(U("died")))
    {
        setDied(ModelBase::int64_tFromHttpContent(multipart->getContent(U("died"))));
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int64_tFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("long_description")))
    {
        setLongDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("long_description"))));
        
    }
    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
        
    }
    if(multipart->hasContent(U("priority")))
    {
        setPriority(ModelBase::int32_tFromHttpContent(multipart->getContent(U("priority"))));
    }
    if(multipart->hasContent(U("properties_string")))
    {
        setPropertiesString(ModelBase::stringFromHttpContent(multipart->getContent(U("properties_string"))));
        
    }
    if(multipart->hasContent(U("short_description")))
    {
        setShortDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("short_description"))));
        
    }
    if(multipart->hasContent(U("template")))
    {
        setTemplate(ModelBase::stringFromHttpContent(multipart->getContent(U("template"))));
        
    }
    if(multipart->hasContent(U("updated")))
    {
        setUpdated(ModelBase::int64_tFromHttpContent(multipart->getContent(U("updated"))));
    }
    
}


std::map<utility::string_t, std::shared_ptr<Property>>& Artist::getAdditionalProperties()
{
    return m_Additional_properties;
}
bool Artist::additional_propertiesIsSet() const
{
    return m_Additional_propertiesIsSet;
}
void Artist::unsetAdditional_properties()
{
    m_Additional_propertiesIsSet = false;
}
int64_t Artist::getBorn() const
{
    return m_Born;
}
void Artist::setBorn(int64_t value)
{
    m_Born = value;
    m_BornIsSet = true;
}
bool Artist::bornIsSet() const
{
    return m_BornIsSet;
}
void Artist::unsetBorn()
{
    m_BornIsSet = false;
}
int32_t Artist::getContributionCount() const
{
    return m_Contribution_count;
}
void Artist::setContributionCount(int32_t value)
{
    m_Contribution_count = value;
    m_Contribution_countIsSet = true;
}
bool Artist::contribution_countIsSet() const
{
    return m_Contribution_countIsSet;
}
void Artist::unsetContribution_count()
{
    m_Contribution_countIsSet = false;
}
int64_t Artist::getCreated() const
{
    return m_Created;
}
void Artist::setCreated(int64_t value)
{
    m_Created = value;
    m_CreatedIsSet = true;
}
bool Artist::createdIsSet() const
{
    return m_CreatedIsSet;
}
void Artist::unsetCreated()
{
    m_CreatedIsSet = false;
}
int64_t Artist::getDied() const
{
    return m_Died;
}
void Artist::setDied(int64_t value)
{
    m_Died = value;
    m_DiedIsSet = true;
}
bool Artist::diedIsSet() const
{
    return m_DiedIsSet;
}
void Artist::unsetDied()
{
    m_DiedIsSet = false;
}
int64_t Artist::getId() const
{
    return m_Id;
}
void Artist::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Artist::idIsSet() const
{
    return m_IdIsSet;
}
void Artist::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Artist::getLongDescription() const
{
    return m_Long_description;
}
void Artist::setLongDescription(utility::string_t value)
{
    m_Long_description = value;
    m_Long_descriptionIsSet = true;
}
bool Artist::long_descriptionIsSet() const
{
    return m_Long_descriptionIsSet;
}
void Artist::unsetLong_description()
{
    m_Long_descriptionIsSet = false;
}
utility::string_t Artist::getName() const
{
    return m_Name;
}
void Artist::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool Artist::nameIsSet() const
{
    return m_NameIsSet;
}
void Artist::unsetName()
{
    m_NameIsSet = false;
}
int32_t Artist::getPriority() const
{
    return m_Priority;
}
void Artist::setPriority(int32_t value)
{
    m_Priority = value;
    m_PriorityIsSet = true;
}
bool Artist::priorityIsSet() const
{
    return m_PriorityIsSet;
}
void Artist::unsetPriority()
{
    m_PriorityIsSet = false;
}
utility::string_t Artist::getPropertiesString() const
{
    return m_Properties_string;
}
void Artist::setPropertiesString(utility::string_t value)
{
    m_Properties_string = value;
    m_Properties_stringIsSet = true;
}
bool Artist::properties_stringIsSet() const
{
    return m_Properties_stringIsSet;
}
void Artist::unsetProperties_string()
{
    m_Properties_stringIsSet = false;
}
utility::string_t Artist::getShortDescription() const
{
    return m_Short_description;
}
void Artist::setShortDescription(utility::string_t value)
{
    m_Short_description = value;
    m_Short_descriptionIsSet = true;
}
bool Artist::short_descriptionIsSet() const
{
    return m_Short_descriptionIsSet;
}
void Artist::unsetShort_description()
{
    m_Short_descriptionIsSet = false;
}
utility::string_t Artist::getTemplate() const
{
    return m_Template;
}
void Artist::setTemplate(utility::string_t value)
{
    m_Template = value;
    m_TemplateIsSet = true;
}
bool Artist::templateIsSet() const
{
    return m_TemplateIsSet;
}
void Artist::unsetTemplate()
{
    m_TemplateIsSet = false;
}
int64_t Artist::getUpdated() const
{
    return m_Updated;
}
void Artist::setUpdated(int64_t value)
{
    m_Updated = value;
    m_UpdatedIsSet = true;
}
bool Artist::updatedIsSet() const
{
    return m_UpdatedIsSet;
}
void Artist::unsetUpdated()
{
    m_UpdatedIsSet = false;
}

}
}
}
}

