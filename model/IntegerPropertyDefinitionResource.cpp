/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "IntegerPropertyDefinitionResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

IntegerPropertyDefinitionResource::IntegerPropertyDefinitionResource()
{
    m_Field_listIsSet = false;
    m_Name = U("");
    m_Required = false;
    m_Type = U("");
    m_Max = 0;
    m_MaxIsSet = false;
    m_Min = 0;
    m_MinIsSet = false;
    
}

IntegerPropertyDefinitionResource::~IntegerPropertyDefinitionResource()
{
}

void IntegerPropertyDefinitionResource::validate()
{
    // TODO: implement validation
}

web::json::value IntegerPropertyDefinitionResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Field_listIsSet)
    {
        val[U("field_list")] = ModelBase::toJson(m_Field_list);
    }
    val[U("name")] = ModelBase::toJson(m_Name);
    val[U("required")] = ModelBase::toJson(m_Required);
    val[U("type")] = ModelBase::toJson(m_Type);
    if(m_MaxIsSet)
    {
        val[U("max")] = ModelBase::toJson(m_Max);
    }
    if(m_MinIsSet)
    {
        val[U("min")] = ModelBase::toJson(m_Min);
    }
    

    return val;
}

void IntegerPropertyDefinitionResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("field_list")))
    {
        if(!val[U("field_list")].is_null())
        {
            std::shared_ptr<PropertyFieldListResource> newItem(new PropertyFieldListResource());
            newItem->fromJson(val[U("field_list")]);
            setFieldList( newItem );
        }
        
    }
    setName(ModelBase::stringFromJson(val[U("name")]));
    setRequired(ModelBase::boolFromJson(val[U("required")]));
    setType(ModelBase::stringFromJson(val[U("type")]));
    if(val.has_field(U("max")))
    {
        setMax(ModelBase::int32_tFromJson(val[U("max")]));
    }
    if(val.has_field(U("min")))
    {
        setMin(ModelBase::int32_tFromJson(val[U("min")]));
    }
    
}

void IntegerPropertyDefinitionResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Field_listIsSet)
    {
        if (m_Field_list.get())
        {
            m_Field_list->toMultipart(multipart, U("field_list."));
        }
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("required"), m_Required));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("type"), m_Type));
    if(m_MaxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("max"), m_Max));
    }
    if(m_MinIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("min"), m_Min));
    }
    
}

void IntegerPropertyDefinitionResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("field_list")))
    {
        if(multipart->hasContent(U("field_list")))
        {
            std::shared_ptr<PropertyFieldListResource> newItem(new PropertyFieldListResource());
            newItem->fromMultiPart(multipart, U("field_list."));
            setFieldList( newItem );
        }
        
    }
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    setRequired(ModelBase::boolFromHttpContent(multipart->getContent(U("required"))));
    setType(ModelBase::stringFromHttpContent(multipart->getContent(U("type"))));
    if(multipart->hasContent(U("max")))
    {
        setMax(ModelBase::int32_tFromHttpContent(multipart->getContent(U("max"))));
    }
    if(multipart->hasContent(U("min")))
    {
        setMin(ModelBase::int32_tFromHttpContent(multipart->getContent(U("min"))));
    }
    
}


std::shared_ptr<PropertyFieldListResource> IntegerPropertyDefinitionResource::getFieldList() const
{
    return m_Field_list;
}
void IntegerPropertyDefinitionResource::setFieldList(std::shared_ptr<PropertyFieldListResource> value)
{
    m_Field_list = value;
    m_Field_listIsSet = true;
}
bool IntegerPropertyDefinitionResource::field_listIsSet() const
{
    return m_Field_listIsSet;
}
void IntegerPropertyDefinitionResource::unsetField_list()
{
    m_Field_listIsSet = false;
}
utility::string_t IntegerPropertyDefinitionResource::getName() const
{
    return m_Name;
}
void IntegerPropertyDefinitionResource::setName(utility::string_t value)
{
    m_Name = value;
    
}
bool IntegerPropertyDefinitionResource::getRequired() const
{
    return m_Required;
}
void IntegerPropertyDefinitionResource::setRequired(bool value)
{
    m_Required = value;
    
}
utility::string_t IntegerPropertyDefinitionResource::getType() const
{
    return m_Type;
}
void IntegerPropertyDefinitionResource::setType(utility::string_t value)
{
    m_Type = value;
    
}
int32_t IntegerPropertyDefinitionResource::getMax() const
{
    return m_Max;
}
void IntegerPropertyDefinitionResource::setMax(int32_t value)
{
    m_Max = value;
    m_MaxIsSet = true;
}
bool IntegerPropertyDefinitionResource::maxIsSet() const
{
    return m_MaxIsSet;
}
void IntegerPropertyDefinitionResource::unsetMax()
{
    m_MaxIsSet = false;
}
int32_t IntegerPropertyDefinitionResource::getMin() const
{
    return m_Min;
}
void IntegerPropertyDefinitionResource::setMin(int32_t value)
{
    m_Min = value;
    m_MinIsSet = true;
}
bool IntegerPropertyDefinitionResource::minIsSet() const
{
    return m_MinIsSet;
}
void IntegerPropertyDefinitionResource::unsetMin()
{
    m_MinIsSet = false;
}

}
}
}
}

