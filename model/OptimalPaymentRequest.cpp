/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "OptimalPaymentRequest.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

OptimalPaymentRequest::OptimalPaymentRequest()
{
    m_Email = U("");
    m_EmailIsSet = false;
    m_First_name = U("");
    m_First_nameIsSet = false;
    m_Invoice_id = 0;
    m_Last_name = U("");
    m_Last_nameIsSet = false;
    m_On_decline = U("");
    m_On_error = U("");
    m_On_success = U("");
}

OptimalPaymentRequest::~OptimalPaymentRequest()
{
}

void OptimalPaymentRequest::validate()
{
    // TODO: implement validation
}

web::json::value OptimalPaymentRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_EmailIsSet)
    {
        val[U("email")] = ModelBase::toJson(m_Email);
    }
    if(m_First_nameIsSet)
    {
        val[U("first_name")] = ModelBase::toJson(m_First_name);
    }
    val[U("invoice_id")] = ModelBase::toJson(m_Invoice_id);
    if(m_Last_nameIsSet)
    {
        val[U("last_name")] = ModelBase::toJson(m_Last_name);
    }
    val[U("on_decline")] = ModelBase::toJson(m_On_decline);
    val[U("on_error")] = ModelBase::toJson(m_On_error);
    val[U("on_success")] = ModelBase::toJson(m_On_success);

    return val;
}

void OptimalPaymentRequest::fromJson(web::json::value& val)
{
    if(val.has_field(U("email")))
    {
        setEmail(ModelBase::stringFromJson(val[U("email")]));
    }
    if(val.has_field(U("first_name")))
    {
        setFirstName(ModelBase::stringFromJson(val[U("first_name")]));
    }
    setInvoiceId(ModelBase::int32_tFromJson(val[U("invoice_id")]));
    if(val.has_field(U("last_name")))
    {
        setLastName(ModelBase::stringFromJson(val[U("last_name")]));
    }
    setOnDecline(ModelBase::stringFromJson(val[U("on_decline")]));
    setOnError(ModelBase::stringFromJson(val[U("on_error")]));
    setOnSuccess(ModelBase::stringFromJson(val[U("on_success")]));
}

void OptimalPaymentRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("email"), m_Email));
        
    }
    if(m_First_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("first_name"), m_First_name));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("invoice_id"), m_Invoice_id));
    if(m_Last_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("last_name"), m_Last_name));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("on_decline"), m_On_decline));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("on_error"), m_On_error));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("on_success"), m_On_success));
}

void OptimalPaymentRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("email")))
    {
        setEmail(ModelBase::stringFromHttpContent(multipart->getContent(U("email"))));
    }
    if(multipart->hasContent(U("first_name")))
    {
        setFirstName(ModelBase::stringFromHttpContent(multipart->getContent(U("first_name"))));
    }
    setInvoiceId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("invoice_id"))));
    if(multipart->hasContent(U("last_name")))
    {
        setLastName(ModelBase::stringFromHttpContent(multipart->getContent(U("last_name"))));
    }
    setOnDecline(ModelBase::stringFromHttpContent(multipart->getContent(U("on_decline"))));
    setOnError(ModelBase::stringFromHttpContent(multipart->getContent(U("on_error"))));
    setOnSuccess(ModelBase::stringFromHttpContent(multipart->getContent(U("on_success"))));
}

utility::string_t OptimalPaymentRequest::getEmail() const
{
    return m_Email;
}


void OptimalPaymentRequest::setEmail(utility::string_t value)
{
    m_Email = value;
    m_EmailIsSet = true;
}
bool OptimalPaymentRequest::emailIsSet() const
{
    return m_EmailIsSet;
}

void OptimalPaymentRequest::unsetEmail()
{
    m_EmailIsSet = false;
}

utility::string_t OptimalPaymentRequest::getFirstName() const
{
    return m_First_name;
}


void OptimalPaymentRequest::setFirstName(utility::string_t value)
{
    m_First_name = value;
    m_First_nameIsSet = true;
}
bool OptimalPaymentRequest::firstNameIsSet() const
{
    return m_First_nameIsSet;
}

void OptimalPaymentRequest::unsetFirst_name()
{
    m_First_nameIsSet = false;
}

int32_t OptimalPaymentRequest::getInvoiceId() const
{
    return m_Invoice_id;
}


void OptimalPaymentRequest::setInvoiceId(int32_t value)
{
    m_Invoice_id = value;
    
}
utility::string_t OptimalPaymentRequest::getLastName() const
{
    return m_Last_name;
}


void OptimalPaymentRequest::setLastName(utility::string_t value)
{
    m_Last_name = value;
    m_Last_nameIsSet = true;
}
bool OptimalPaymentRequest::lastNameIsSet() const
{
    return m_Last_nameIsSet;
}

void OptimalPaymentRequest::unsetLast_name()
{
    m_Last_nameIsSet = false;
}

utility::string_t OptimalPaymentRequest::getOnDecline() const
{
    return m_On_decline;
}


void OptimalPaymentRequest::setOnDecline(utility::string_t value)
{
    m_On_decline = value;
    
}
utility::string_t OptimalPaymentRequest::getOnError() const
{
    return m_On_error;
}


void OptimalPaymentRequest::setOnError(utility::string_t value)
{
    m_On_error = value;
    
}
utility::string_t OptimalPaymentRequest::getOnSuccess() const
{
    return m_On_success;
}


void OptimalPaymentRequest::setOnSuccess(utility::string_t value)
{
    m_On_success = value;
    
}
}
}
}
}

