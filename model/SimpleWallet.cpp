/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SimpleWallet.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

SimpleWallet::SimpleWallet()
{
    m_Balance = 0.0;
    m_BalanceIsSet = false;
    m_Code = U("");
    m_CodeIsSet = false;
    m_Currency_name = U("");
    m_Currency_nameIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_User_id = 0;
    m_User_idIsSet = false;
}

SimpleWallet::~SimpleWallet()
{
}

void SimpleWallet::validate()
{
    // TODO: implement validation
}

web::json::value SimpleWallet::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_BalanceIsSet)
    {
        val[U("balance")] = ModelBase::toJson(m_Balance);
    }
    if(m_CodeIsSet)
    {
        val[U("code")] = ModelBase::toJson(m_Code);
    }
    if(m_Currency_nameIsSet)
    {
        val[U("currency_name")] = ModelBase::toJson(m_Currency_name);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_User_idIsSet)
    {
        val[U("user_id")] = ModelBase::toJson(m_User_id);
    }

    return val;
}

void SimpleWallet::fromJson(web::json::value& val)
{
    if(val.has_field(U("balance")))
    {
        setBalance(ModelBase::doubleFromJson(val[U("balance")]));
    }
    if(val.has_field(U("code")))
    {
        setCode(ModelBase::stringFromJson(val[U("code")]));
    }
    if(val.has_field(U("currency_name")))
    {
        setCurrencyName(ModelBase::stringFromJson(val[U("currency_name")]));
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int32_tFromJson(val[U("id")]));
    }
    if(val.has_field(U("user_id")))
    {
        setUserId(ModelBase::int32_tFromJson(val[U("user_id")]));
    }
}

void SimpleWallet::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_BalanceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("balance"), m_Balance));
    }
    if(m_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("code"), m_Code));
        
    }
    if(m_Currency_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("currency_name"), m_Currency_name));
        
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("user_id"), m_User_id));
    }
}

void SimpleWallet::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("balance")))
    {
        setBalance(ModelBase::doubleFromHttpContent(multipart->getContent(U("balance"))));
    }
    if(multipart->hasContent(U("code")))
    {
        setCode(ModelBase::stringFromHttpContent(multipart->getContent(U("code"))));
    }
    if(multipart->hasContent(U("currency_name")))
    {
        setCurrencyName(ModelBase::stringFromHttpContent(multipart->getContent(U("currency_name"))));
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("user_id")))
    {
        setUserId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("user_id"))));
    }
}

double SimpleWallet::getBalance() const
{
    return m_Balance;
}


void SimpleWallet::setBalance(double value)
{
    m_Balance = value;
    m_BalanceIsSet = true;
}
bool SimpleWallet::balanceIsSet() const
{
    return m_BalanceIsSet;
}

void SimpleWallet::unsetBalance()
{
    m_BalanceIsSet = false;
}

utility::string_t SimpleWallet::getCode() const
{
    return m_Code;
}


void SimpleWallet::setCode(utility::string_t value)
{
    m_Code = value;
    m_CodeIsSet = true;
}
bool SimpleWallet::codeIsSet() const
{
    return m_CodeIsSet;
}

void SimpleWallet::unsetCode()
{
    m_CodeIsSet = false;
}

utility::string_t SimpleWallet::getCurrencyName() const
{
    return m_Currency_name;
}


void SimpleWallet::setCurrencyName(utility::string_t value)
{
    m_Currency_name = value;
    m_Currency_nameIsSet = true;
}
bool SimpleWallet::currencyNameIsSet() const
{
    return m_Currency_nameIsSet;
}

void SimpleWallet::unsetCurrency_name()
{
    m_Currency_nameIsSet = false;
}

int32_t SimpleWallet::getId() const
{
    return m_Id;
}


void SimpleWallet::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool SimpleWallet::idIsSet() const
{
    return m_IdIsSet;
}

void SimpleWallet::unsetId()
{
    m_IdIsSet = false;
}

int32_t SimpleWallet::getUserId() const
{
    return m_User_id;
}


void SimpleWallet::setUserId(int32_t value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}
bool SimpleWallet::userIdIsSet() const
{
    return m_User_idIsSet;
}

void SimpleWallet::unsetUser_id()
{
    m_User_idIsSet = false;
}

}
}
}
}

