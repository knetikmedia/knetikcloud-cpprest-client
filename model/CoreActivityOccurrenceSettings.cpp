/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "CoreActivityOccurrenceSettings.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

CoreActivityOccurrenceSettings::CoreActivityOccurrenceSettings()
{
    m_Boot_in_play = false;
    m_Boot_in_playIsSet = false;
    m_Custom_launch_address = U("");
    m_Custom_launch_addressIsSet = false;
    m_Host_status_control = false;
    m_Host_status_controlIsSet = false;
    m_Join_in_play = false;
    m_Join_in_playIsSet = false;
    m_Leave_in_play = false;
    m_Leave_in_playIsSet = false;
    m_Max_players = 0;
    m_Max_playersIsSet = false;
    m_Min_players = 0;
    m_Min_playersIsSet = false;
    m_Non_host_status_control = false;
    m_Non_host_status_controlIsSet = false;
    m_Results_trust = U("");
    m_Results_trustIsSet = false;
}

CoreActivityOccurrenceSettings::~CoreActivityOccurrenceSettings()
{
}

void CoreActivityOccurrenceSettings::validate()
{
    // TODO: implement validation
}

web::json::value CoreActivityOccurrenceSettings::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Boot_in_playIsSet)
    {
        val[U("boot_in_play")] = ModelBase::toJson(m_Boot_in_play);
    }
    if(m_Custom_launch_addressIsSet)
    {
        val[U("custom_launch_address")] = ModelBase::toJson(m_Custom_launch_address);
    }
    if(m_Host_status_controlIsSet)
    {
        val[U("host_status_control")] = ModelBase::toJson(m_Host_status_control);
    }
    if(m_Join_in_playIsSet)
    {
        val[U("join_in_play")] = ModelBase::toJson(m_Join_in_play);
    }
    if(m_Leave_in_playIsSet)
    {
        val[U("leave_in_play")] = ModelBase::toJson(m_Leave_in_play);
    }
    if(m_Max_playersIsSet)
    {
        val[U("max_players")] = ModelBase::toJson(m_Max_players);
    }
    if(m_Min_playersIsSet)
    {
        val[U("min_players")] = ModelBase::toJson(m_Min_players);
    }
    if(m_Non_host_status_controlIsSet)
    {
        val[U("non_host_status_control")] = ModelBase::toJson(m_Non_host_status_control);
    }
    if(m_Results_trustIsSet)
    {
        val[U("results_trust")] = ModelBase::toJson(m_Results_trust);
    }

    return val;
}

void CoreActivityOccurrenceSettings::fromJson(web::json::value& val)
{
    if(val.has_field(U("boot_in_play")))
    {
        setBootInPlay(ModelBase::boolFromJson(val[U("boot_in_play")]));
    }
    if(val.has_field(U("custom_launch_address")))
    {
        setCustomLaunchAddress(ModelBase::stringFromJson(val[U("custom_launch_address")]));
    }
    if(val.has_field(U("host_status_control")))
    {
        setHostStatusControl(ModelBase::boolFromJson(val[U("host_status_control")]));
    }
    if(val.has_field(U("join_in_play")))
    {
        setJoinInPlay(ModelBase::boolFromJson(val[U("join_in_play")]));
    }
    if(val.has_field(U("leave_in_play")))
    {
        setLeaveInPlay(ModelBase::boolFromJson(val[U("leave_in_play")]));
    }
    if(val.has_field(U("max_players")))
    {
        setMaxPlayers(ModelBase::int32_tFromJson(val[U("max_players")]));
    }
    if(val.has_field(U("min_players")))
    {
        setMinPlayers(ModelBase::int32_tFromJson(val[U("min_players")]));
    }
    if(val.has_field(U("non_host_status_control")))
    {
        setNonHostStatusControl(ModelBase::boolFromJson(val[U("non_host_status_control")]));
    }
    if(val.has_field(U("results_trust")))
    {
        setResultsTrust(ModelBase::stringFromJson(val[U("results_trust")]));
    }
}

void CoreActivityOccurrenceSettings::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Boot_in_playIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("boot_in_play"), m_Boot_in_play));
    }
    if(m_Custom_launch_addressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("custom_launch_address"), m_Custom_launch_address));
        
    }
    if(m_Host_status_controlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("host_status_control"), m_Host_status_control));
    }
    if(m_Join_in_playIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("join_in_play"), m_Join_in_play));
    }
    if(m_Leave_in_playIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("leave_in_play"), m_Leave_in_play));
    }
    if(m_Max_playersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("max_players"), m_Max_players));
    }
    if(m_Min_playersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("min_players"), m_Min_players));
    }
    if(m_Non_host_status_controlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("non_host_status_control"), m_Non_host_status_control));
    }
    if(m_Results_trustIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("results_trust"), m_Results_trust));
        
    }
}

void CoreActivityOccurrenceSettings::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("boot_in_play")))
    {
        setBootInPlay(ModelBase::boolFromHttpContent(multipart->getContent(U("boot_in_play"))));
    }
    if(multipart->hasContent(U("custom_launch_address")))
    {
        setCustomLaunchAddress(ModelBase::stringFromHttpContent(multipart->getContent(U("custom_launch_address"))));
    }
    if(multipart->hasContent(U("host_status_control")))
    {
        setHostStatusControl(ModelBase::boolFromHttpContent(multipart->getContent(U("host_status_control"))));
    }
    if(multipart->hasContent(U("join_in_play")))
    {
        setJoinInPlay(ModelBase::boolFromHttpContent(multipart->getContent(U("join_in_play"))));
    }
    if(multipart->hasContent(U("leave_in_play")))
    {
        setLeaveInPlay(ModelBase::boolFromHttpContent(multipart->getContent(U("leave_in_play"))));
    }
    if(multipart->hasContent(U("max_players")))
    {
        setMaxPlayers(ModelBase::int32_tFromHttpContent(multipart->getContent(U("max_players"))));
    }
    if(multipart->hasContent(U("min_players")))
    {
        setMinPlayers(ModelBase::int32_tFromHttpContent(multipart->getContent(U("min_players"))));
    }
    if(multipart->hasContent(U("non_host_status_control")))
    {
        setNonHostStatusControl(ModelBase::boolFromHttpContent(multipart->getContent(U("non_host_status_control"))));
    }
    if(multipart->hasContent(U("results_trust")))
    {
        setResultsTrust(ModelBase::stringFromHttpContent(multipart->getContent(U("results_trust"))));
    }
}

bool CoreActivityOccurrenceSettings::getBootInPlay() const
{
    return m_Boot_in_play;
}


void CoreActivityOccurrenceSettings::setBootInPlay(bool value)
{
    m_Boot_in_play = value;
    m_Boot_in_playIsSet = true;
}
bool CoreActivityOccurrenceSettings::bootInPlayIsSet() const
{
    return m_Boot_in_playIsSet;
}

void CoreActivityOccurrenceSettings::unsetBoot_in_play()
{
    m_Boot_in_playIsSet = false;
}

utility::string_t CoreActivityOccurrenceSettings::getCustomLaunchAddress() const
{
    return m_Custom_launch_address;
}


void CoreActivityOccurrenceSettings::setCustomLaunchAddress(utility::string_t value)
{
    m_Custom_launch_address = value;
    m_Custom_launch_addressIsSet = true;
}
bool CoreActivityOccurrenceSettings::customLaunchAddressIsSet() const
{
    return m_Custom_launch_addressIsSet;
}

void CoreActivityOccurrenceSettings::unsetCustom_launch_address()
{
    m_Custom_launch_addressIsSet = false;
}

bool CoreActivityOccurrenceSettings::getHostStatusControl() const
{
    return m_Host_status_control;
}


void CoreActivityOccurrenceSettings::setHostStatusControl(bool value)
{
    m_Host_status_control = value;
    m_Host_status_controlIsSet = true;
}
bool CoreActivityOccurrenceSettings::hostStatusControlIsSet() const
{
    return m_Host_status_controlIsSet;
}

void CoreActivityOccurrenceSettings::unsetHost_status_control()
{
    m_Host_status_controlIsSet = false;
}

bool CoreActivityOccurrenceSettings::getJoinInPlay() const
{
    return m_Join_in_play;
}


void CoreActivityOccurrenceSettings::setJoinInPlay(bool value)
{
    m_Join_in_play = value;
    m_Join_in_playIsSet = true;
}
bool CoreActivityOccurrenceSettings::joinInPlayIsSet() const
{
    return m_Join_in_playIsSet;
}

void CoreActivityOccurrenceSettings::unsetJoin_in_play()
{
    m_Join_in_playIsSet = false;
}

bool CoreActivityOccurrenceSettings::getLeaveInPlay() const
{
    return m_Leave_in_play;
}


void CoreActivityOccurrenceSettings::setLeaveInPlay(bool value)
{
    m_Leave_in_play = value;
    m_Leave_in_playIsSet = true;
}
bool CoreActivityOccurrenceSettings::leaveInPlayIsSet() const
{
    return m_Leave_in_playIsSet;
}

void CoreActivityOccurrenceSettings::unsetLeave_in_play()
{
    m_Leave_in_playIsSet = false;
}

int32_t CoreActivityOccurrenceSettings::getMaxPlayers() const
{
    return m_Max_players;
}


void CoreActivityOccurrenceSettings::setMaxPlayers(int32_t value)
{
    m_Max_players = value;
    m_Max_playersIsSet = true;
}
bool CoreActivityOccurrenceSettings::maxPlayersIsSet() const
{
    return m_Max_playersIsSet;
}

void CoreActivityOccurrenceSettings::unsetMax_players()
{
    m_Max_playersIsSet = false;
}

int32_t CoreActivityOccurrenceSettings::getMinPlayers() const
{
    return m_Min_players;
}


void CoreActivityOccurrenceSettings::setMinPlayers(int32_t value)
{
    m_Min_players = value;
    m_Min_playersIsSet = true;
}
bool CoreActivityOccurrenceSettings::minPlayersIsSet() const
{
    return m_Min_playersIsSet;
}

void CoreActivityOccurrenceSettings::unsetMin_players()
{
    m_Min_playersIsSet = false;
}

bool CoreActivityOccurrenceSettings::getNonHostStatusControl() const
{
    return m_Non_host_status_control;
}


void CoreActivityOccurrenceSettings::setNonHostStatusControl(bool value)
{
    m_Non_host_status_control = value;
    m_Non_host_status_controlIsSet = true;
}
bool CoreActivityOccurrenceSettings::nonHostStatusControlIsSet() const
{
    return m_Non_host_status_controlIsSet;
}

void CoreActivityOccurrenceSettings::unsetNon_host_status_control()
{
    m_Non_host_status_controlIsSet = false;
}

utility::string_t CoreActivityOccurrenceSettings::getResultsTrust() const
{
    return m_Results_trust;
}


void CoreActivityOccurrenceSettings::setResultsTrust(utility::string_t value)
{
    m_Results_trust = value;
    m_Results_trustIsSet = true;
}
bool CoreActivityOccurrenceSettings::resultsTrustIsSet() const
{
    return m_Results_trustIsSet;
}

void CoreActivityOccurrenceSettings::unsetResults_trust()
{
    m_Results_trustIsSet = false;
}

}
}
}
}

