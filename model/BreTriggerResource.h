/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * BreTriggerResource.h
 *
 * 
 */

#ifndef BreTriggerResource_H_
#define BreTriggerResource_H_


#include "ModelBase.h"

#include "BreTriggerParameterDefinition.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  BreTriggerResource
    : public ModelBase
{
public:
    BreTriggerResource();
    virtual ~BreTriggerResource();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BreTriggerResource members

    /// <summary>
    /// The category this trigger belongs to. See endpoints for related asset information. All new triggers are in category &#39;custom&#39;
    /// </summary>
    utility::string_t getCategory() const;
    bool categoryIsSet() const;
    void unsetCategory();
    void setCategory(utility::string_t value);
    /// <summary>
    /// The unique name for the event. This serves as the unique identifier. Cannot be changed after creation
    /// </summary>
    utility::string_t getEventName() const;
        void setEventName(utility::string_t value);
    /// <summary>
    /// A list of parameters that will be sent with the event when the trigger is fired. These must be included in the event and match the described types
    /// </summary>
    std::vector<std::shared_ptr<BreTriggerParameterDefinition>>& getParameters();
    bool parametersIsSet() const;
    void unsetParameters();
    void setParameters(std::vector<std::shared_ptr<BreTriggerParameterDefinition>> value);
    /// <summary>
    /// Where this trigger came from. System triggers cannot be removed or updated
    /// </summary>
    bool getSystemTrigger() const;
    bool systemTriggerIsSet() const;
    void unsetSystem_trigger();
    void setSystemTrigger(bool value);
    /// <summary>
    /// A list of tags for filtering
    /// </summary>
    std::vector<utility::string_t>& getTags();
    bool tagsIsSet() const;
    void unsetTags();
    void setTags(std::vector<utility::string_t> value);
    /// <summary>
    /// A description of the trigger
    /// </summary>
    utility::string_t getTriggerDescription() const;
        void setTriggerDescription(utility::string_t value);
    /// <summary>
    /// A human readable name for this trigger
    /// </summary>
    utility::string_t getTriggerName() const;
        void setTriggerName(utility::string_t value);

protected:
    utility::string_t m_Category;
    bool m_CategoryIsSet;
    utility::string_t m_Event_name;
        std::vector<std::shared_ptr<BreTriggerParameterDefinition>> m_Parameters;
    bool m_ParametersIsSet;
    bool m_System_trigger;
    bool m_System_triggerIsSet;
    std::vector<utility::string_t> m_Tags;
    bool m_TagsIsSet;
    utility::string_t m_Trigger_description;
        utility::string_t m_Trigger_name;
    };

}
}
}
}

#endif /* BreTriggerResource_H_ */
