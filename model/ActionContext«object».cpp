/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ActionContext«object».h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

ActionContext«object»::ActionContext«object»()
{
    m_Type = U("");
}

ActionContext«object»::~ActionContext«object»()
{
}

void ActionContext«object»::validate()
{
    // TODO: implement validation
}

web::json::value ActionContext«object»::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("mapping")] = ModelBase::toJson(m_Mapping);
    val[U("type")] = ModelBase::toJson(m_Type);

    return val;
}

void ActionContext«object»::fromJson(web::json::value& val)
{
    std::shared_ptr<Object> newMapping(nullptr);
    newMapping->fromJson(val[U("mapping")]);
    setMapping( newMapping );
    setType(ModelBase::stringFromJson(val[U("type")]));
}

void ActionContext«object»::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    m_Mapping->toMultipart(multipart, U("mapping."));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("type"), m_Type));
}

void ActionContext«object»::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    std::shared_ptr<Object> newMapping(nullptr);
    newMapping->fromMultiPart(multipart, U("mapping."));
    setMapping( newMapping );
    setType(ModelBase::stringFromHttpContent(multipart->getContent(U("type"))));
}

std::shared_ptr<Object> ActionContext«object»::getMapping() const
{
    return m_Mapping;
}


void ActionContext«object»::setMapping(std::shared_ptr<Object> value)
{
    m_Mapping = value;
    
}
utility::string_t ActionContext«object»::getType() const
{
    return m_Type;
}


void ActionContext«object»::setType(utility::string_t value)
{
    m_Type = value;
    
}
}
}
}
}

