/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Group.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

Group::Group()
{
    m_Additional_propertiesIsSet = false;
    m_Description = U("");
    m_DescriptionIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_Member_count = 0;
    m_Member_countIsSet = false;
    m_Message_of_the_day = U("");
    m_Message_of_the_dayIsSet = false;
    m_Name = U("");
    m_NameIsSet = false;
    m_ParentIsSet = false;
    m_Properties_string = U("");
    m_Properties_stringIsSet = false;
    m_Status = U("");
    m_StatusIsSet = false;
    m_Sub_member_count = 0;
    m_Sub_member_countIsSet = false;
    m_Template = U("");
    m_TemplateIsSet = false;
    m_Unique_name = U("");
    m_Unique_nameIsSet = false;
    
}

Group::~Group()
{
}

void Group::validate()
{
    // TODO: implement validation
}

web::json::value Group::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Additional_propertiesIsSet)
    {
        val[U("additional_properties")] = ModelBase::toJson(m_Additional_properties);
    }
    if(m_DescriptionIsSet)
    {
        val[U("description")] = ModelBase::toJson(m_Description);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_Member_countIsSet)
    {
        val[U("member_count")] = ModelBase::toJson(m_Member_count);
    }
    if(m_Message_of_the_dayIsSet)
    {
        val[U("message_of_the_day")] = ModelBase::toJson(m_Message_of_the_day);
    }
    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }
    if(m_ParentIsSet)
    {
        val[U("parent")] = ModelBase::toJson(m_Parent);
    }
    if(m_Properties_stringIsSet)
    {
        val[U("properties_string")] = ModelBase::toJson(m_Properties_string);
    }
    if(m_StatusIsSet)
    {
        val[U("status")] = ModelBase::toJson(m_Status);
    }
    if(m_Sub_member_countIsSet)
    {
        val[U("sub_member_count")] = ModelBase::toJson(m_Sub_member_count);
    }
    if(m_TemplateIsSet)
    {
        val[U("template")] = ModelBase::toJson(m_Template);
    }
    if(m_Unique_nameIsSet)
    {
        val[U("unique_name")] = ModelBase::toJson(m_Unique_name);
    }
    

    return val;
}

void Group::fromJson(web::json::value& val)
{
    if(val.has_field(U("additional_properties")))
    {
        if(!val[U("additional_properties")].is_null())
        {
            std::map<utility::string_t, std::shared_ptr<Property>> newItem(std::map<utility::string_t, Property>());
            newItem->fromJson(val[U("additional_properties")]);
            setAdditionalProperties( newItem );
        }
        
    }
    if(val.has_field(U("description")))
    {
        setDescription(ModelBase::stringFromJson(val[U("description")]));
        
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int32_tFromJson(val[U("id")]));
    }
    if(val.has_field(U("member_count")))
    {
        setMemberCount(ModelBase::int32_tFromJson(val[U("member_count")]));
    }
    if(val.has_field(U("message_of_the_day")))
    {
        setMessageOfTheDay(ModelBase::stringFromJson(val[U("message_of_the_day")]));
        
    }
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
        
    }
    if(val.has_field(U("parent")))
    {
        if(!val[U("parent")].is_null())
        {
            std::shared_ptr<Group> newItem(new Group());
            newItem->fromJson(val[U("parent")]);
            setParent( newItem );
        }
        
    }
    if(val.has_field(U("properties_string")))
    {
        setPropertiesString(ModelBase::stringFromJson(val[U("properties_string")]));
        
    }
    if(val.has_field(U("status")))
    {
        setStatus(ModelBase::stringFromJson(val[U("status")]));
        
    }
    if(val.has_field(U("sub_member_count")))
    {
        setSubMemberCount(ModelBase::int32_tFromJson(val[U("sub_member_count")]));
    }
    if(val.has_field(U("template")))
    {
        setTemplate(ModelBase::stringFromJson(val[U("template")]));
        
    }
    if(val.has_field(U("unique_name")))
    {
        setUniqueName(ModelBase::stringFromJson(val[U("unique_name")]));
        
    }
    
}

void Group::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Additional_propertiesIsSet)
    {
        if (m_Additional_properties.get())
        {
            m_Additional_properties->toMultipart(multipart, U("additional_properties."));
        }
        
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("description"), m_Description));
        
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    if(m_Member_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("member_count"), m_Member_count));
    }
    if(m_Message_of_the_dayIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("message_of_the_day"), m_Message_of_the_day));
        
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
    if(m_ParentIsSet)
    {
        if (m_Parent.get())
        {
            m_Parent->toMultipart(multipart, U("parent."));
        }
        
    }
    if(m_Properties_stringIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("properties_string"), m_Properties_string));
        
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("status"), m_Status));
        
    }
    if(m_Sub_member_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("sub_member_count"), m_Sub_member_count));
    }
    if(m_TemplateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("template"), m_Template));
        
    }
    if(m_Unique_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("unique_name"), m_Unique_name));
        
    }
    
}

void Group::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("additional_properties")))
    {
        if(multipart->hasContent(U("additional_properties")))
        {
            std::map<utility::string_t, std::shared_ptr<Property>> newItem(std::map<utility::string_t, Property>());
            newItem->fromMultiPart(multipart, U("additional_properties."));
            setAdditionalProperties( newItem );
        }
        
    }
    if(multipart->hasContent(U("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("description"))));
        
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("member_count")))
    {
        setMemberCount(ModelBase::int32_tFromHttpContent(multipart->getContent(U("member_count"))));
    }
    if(multipart->hasContent(U("message_of_the_day")))
    {
        setMessageOfTheDay(ModelBase::stringFromHttpContent(multipart->getContent(U("message_of_the_day"))));
        
    }
    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
        
    }
    if(multipart->hasContent(U("parent")))
    {
        if(multipart->hasContent(U("parent")))
        {
            std::shared_ptr<Group> newItem(new Group());
            newItem->fromMultiPart(multipart, U("parent."));
            setParent( newItem );
        }
        
    }
    if(multipart->hasContent(U("properties_string")))
    {
        setPropertiesString(ModelBase::stringFromHttpContent(multipart->getContent(U("properties_string"))));
        
    }
    if(multipart->hasContent(U("status")))
    {
        setStatus(ModelBase::stringFromHttpContent(multipart->getContent(U("status"))));
        
    }
    if(multipart->hasContent(U("sub_member_count")))
    {
        setSubMemberCount(ModelBase::int32_tFromHttpContent(multipart->getContent(U("sub_member_count"))));
    }
    if(multipart->hasContent(U("template")))
    {
        setTemplate(ModelBase::stringFromHttpContent(multipart->getContent(U("template"))));
        
    }
    if(multipart->hasContent(U("unique_name")))
    {
        setUniqueName(ModelBase::stringFromHttpContent(multipart->getContent(U("unique_name"))));
        
    }
    
}


std::map<utility::string_t, std::shared_ptr<Property>>& Group::getAdditionalProperties()
{
    return m_Additional_properties;
}
bool Group::additional_propertiesIsSet() const
{
    return m_Additional_propertiesIsSet;
}
void Group::unsetAdditional_properties()
{
    m_Additional_propertiesIsSet = false;
}
utility::string_t Group::getDescription() const
{
    return m_Description;
}
void Group::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool Group::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void Group::unsetDescription()
{
    m_DescriptionIsSet = false;
}
int32_t Group::getId() const
{
    return m_Id;
}
void Group::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Group::idIsSet() const
{
    return m_IdIsSet;
}
void Group::unsetId()
{
    m_IdIsSet = false;
}
int32_t Group::getMemberCount() const
{
    return m_Member_count;
}
void Group::setMemberCount(int32_t value)
{
    m_Member_count = value;
    m_Member_countIsSet = true;
}
bool Group::member_countIsSet() const
{
    return m_Member_countIsSet;
}
void Group::unsetMember_count()
{
    m_Member_countIsSet = false;
}
utility::string_t Group::getMessageOfTheDay() const
{
    return m_Message_of_the_day;
}
void Group::setMessageOfTheDay(utility::string_t value)
{
    m_Message_of_the_day = value;
    m_Message_of_the_dayIsSet = true;
}
bool Group::message_of_the_dayIsSet() const
{
    return m_Message_of_the_dayIsSet;
}
void Group::unsetMessage_of_the_day()
{
    m_Message_of_the_dayIsSet = false;
}
utility::string_t Group::getName() const
{
    return m_Name;
}
void Group::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool Group::nameIsSet() const
{
    return m_NameIsSet;
}
void Group::unsetName()
{
    m_NameIsSet = false;
}
std::shared_ptr<Group> Group::getParent() const
{
    return m_Parent;
}
void Group::setParent(std::shared_ptr<Group> value)
{
    m_Parent = value;
    m_ParentIsSet = true;
}
bool Group::parentIsSet() const
{
    return m_ParentIsSet;
}
void Group::unsetParent()
{
    m_ParentIsSet = false;
}
utility::string_t Group::getPropertiesString() const
{
    return m_Properties_string;
}
void Group::setPropertiesString(utility::string_t value)
{
    m_Properties_string = value;
    m_Properties_stringIsSet = true;
}
bool Group::properties_stringIsSet() const
{
    return m_Properties_stringIsSet;
}
void Group::unsetProperties_string()
{
    m_Properties_stringIsSet = false;
}
utility::string_t Group::getStatus() const
{
    return m_Status;
}
void Group::setStatus(utility::string_t value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool Group::statusIsSet() const
{
    return m_StatusIsSet;
}
void Group::unsetStatus()
{
    m_StatusIsSet = false;
}
int32_t Group::getSubMemberCount() const
{
    return m_Sub_member_count;
}
void Group::setSubMemberCount(int32_t value)
{
    m_Sub_member_count = value;
    m_Sub_member_countIsSet = true;
}
bool Group::sub_member_countIsSet() const
{
    return m_Sub_member_countIsSet;
}
void Group::unsetSub_member_count()
{
    m_Sub_member_countIsSet = false;
}
utility::string_t Group::getTemplate() const
{
    return m_Template;
}
void Group::setTemplate(utility::string_t value)
{
    m_Template = value;
    m_TemplateIsSet = true;
}
bool Group::templateIsSet() const
{
    return m_TemplateIsSet;
}
void Group::unsetTemplate()
{
    m_TemplateIsSet = false;
}
utility::string_t Group::getUniqueName() const
{
    return m_Unique_name;
}
void Group::setUniqueName(utility::string_t value)
{
    m_Unique_name = value;
    m_Unique_nameIsSet = true;
}
bool Group::unique_nameIsSet() const
{
    return m_Unique_nameIsSet;
}
void Group::unsetUnique_name()
{
    m_Unique_nameIsSet = false;
}

}
}
}
}

