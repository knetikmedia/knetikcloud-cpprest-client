/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * PaymentMethodDetails.h
 *
 * 
 */

#ifndef PaymentMethodDetails_H_
#define PaymentMethodDetails_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  PaymentMethodDetails
    : public ModelBase
{
public:
    PaymentMethodDetails();
    virtual ~PaymentMethodDetails();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PaymentMethodDetails members

    /// <summary>
    /// 
    /// </summary>
    bool getDefault() const;
    bool defaultIsSet() const;
    void unsetDefault();
    void setDefault(bool value);
    /// <summary>
    /// The expiration date for the payment method, expressed as seconds since epoch. Typically used for credit card payment methods
    /// </summary>
    int64_t getExpirationDate() const;
    bool expirationDateIsSet() const;
    void unsetExpiration_date();
    void setExpirationDate(int64_t value);
    /// <summary>
    /// The expiration month (1 - 12) for the payment method. Typically used for credit card payment methods
    /// </summary>
    int32_t getExpirationMonth() const;
    bool expirationMonthIsSet() const;
    void unsetExpiration_month();
    void setExpirationMonth(int32_t value);
    /// <summary>
    /// The expiration year for the payment method. Typically used for credit card payment methods
    /// </summary>
    int32_t getExpirationYear() const;
    bool expirationYearIsSet() const;
    void unsetExpiration_year();
    void setExpirationYear(int32_t value);
    /// <summary>
    /// The last 4 digits of the account number for the payment method. Typically used for credit card payment methods
    /// </summary>
    utility::string_t getLast4() const;
    bool last4IsSet() const;
    void unsetLast4();
    void setLast4(utility::string_t value);
    /// <summary>
    /// The sort value for the payment method
    /// </summary>
    int32_t getSort() const;
    bool sortIsSet() const;
    void unsetSort();
    void setSort(int32_t value);
    /// <summary>
    /// An optional unique identifier
    /// </summary>
    utility::string_t getUniqueKey() const;
    bool uniqueKeyIsSet() const;
    void unsetUnique_key();
    void setUniqueKey(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    bool getVerified() const;
    bool verifiedIsSet() const;
    void unsetVerified();
    void setVerified(bool value);

protected:
    bool m_Default;
    bool m_DefaultIsSet;
    int64_t m_Expiration_date;
    bool m_Expiration_dateIsSet;
    int32_t m_Expiration_month;
    bool m_Expiration_monthIsSet;
    int32_t m_Expiration_year;
    bool m_Expiration_yearIsSet;
    utility::string_t m_Last4;
    bool m_Last4IsSet;
    int32_t m_Sort;
    bool m_SortIsSet;
    utility::string_t m_Unique_key;
    bool m_Unique_keyIsSet;
    bool m_Verified;
    bool m_VerifiedIsSet;
};

}
}
}
}

#endif /* PaymentMethodDetails_H_ */
