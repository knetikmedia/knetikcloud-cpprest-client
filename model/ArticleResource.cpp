/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ArticleResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

ArticleResource::ArticleResource()
{
    m_Active = false;
    m_Additional_propertiesIsSet = false;
    m_Body = U("");
    m_Created_date = 0L;
    m_Created_dateIsSet = false;
    m_Id = U("");
    m_IdIsSet = false;
    m_TagsIsSet = false;
    m_Template = U("");
    m_TemplateIsSet = false;
    m_Title = U("");
    m_Updated_date = 0L;
    m_Updated_dateIsSet = false;
}

ArticleResource::~ArticleResource()
{
}

void ArticleResource::validate()
{
    // TODO: implement validation
}

web::json::value ArticleResource::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("active")] = ModelBase::toJson(m_Active);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Additional_properties )
        {
            web::json::value tmp = web::json::value::object();
            tmp[U("key")] = ModelBase::toJson(item.first);
            tmp[U("value")] = ModelBase::toJson(item.second);
            jsonArray.push_back(tmp);
        }
        if(jsonArray.size() > 0)
        {
            val[U("additional_properties")] = web::json::value::array(jsonArray);
        }
    }
    val[U("body")] = ModelBase::toJson(m_Body);
    val[U("category")] = ModelBase::toJson(m_Category);
    if(m_Created_dateIsSet)
    {
        val[U("created_date")] = ModelBase::toJson(m_Created_date);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("tags")] = web::json::value::array(jsonArray);
        }
    }
    if(m_TemplateIsSet)
    {
        val[U("template")] = ModelBase::toJson(m_Template);
    }
    val[U("title")] = ModelBase::toJson(m_Title);
    if(m_Updated_dateIsSet)
    {
        val[U("updated_date")] = ModelBase::toJson(m_Updated_date);
    }

    return val;
}

void ArticleResource::fromJson(web::json::value& val)
{
    setActive(ModelBase::boolFromJson(val[U("active")]));
    {
        m_Additional_properties.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("additional_properties")))
        {
        for( auto& item : val[U("additional_properties")].as_array() )
        {  
            utility::string_t key;
            if(item.has_field(U("key")))
            {
                key = ModelBase::stringFromJson(item[U("key")]);
            }
            if(item.is_null())
            {
                m_Additional_properties.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, std::shared_ptr<Property>(nullptr) ));
            }
            else
            {
                std::shared_ptr<Property> newItem(new Property());
                newItem->fromJson(item[U("value")]);
                m_Additional_properties.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, newItem ));
            }
        }
        }
    }
    setBody(ModelBase::stringFromJson(val[U("body")]));
    std::shared_ptr<NestedCategory> newCategory(new NestedCategory());
    newCategory->fromJson(val[U("category")]);
    setCategory( newCategory );
    if(val.has_field(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromJson(val[U("created_date")]));
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::stringFromJson(val[U("id")]));
    }
    {
        m_Tags.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("tags")))
        {
        for( auto& item : val[U("tags")].as_array() )
        {
            m_Tags.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(val.has_field(U("template")))
    {
        setTemplate(ModelBase::stringFromJson(val[U("template")]));
    }
    setTitle(ModelBase::stringFromJson(val[U("title")]));
    if(val.has_field(U("updated_date")))
    {
        setUpdatedDate(ModelBase::int64_tFromJson(val[U("updated_date")]));
    }
}

void ArticleResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("active"), m_Active));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Additional_properties )
        {
            web::json::value tmp = web::json::value::object();
            tmp[U("key")] = ModelBase::toJson(item.first);
            tmp[U("value")] = ModelBase::toJson(item.second);
            jsonArray.push_back(tmp);
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("additional_properties"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("body"), m_Body));
    m_Category->toMultipart(multipart, U("category."));
    if(m_Created_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("created_date"), m_Created_date));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("tags"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_TemplateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("template"), m_Template));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("title"), m_Title));
    if(m_Updated_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("updated_date"), m_Updated_date));
    }
}

void ArticleResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setActive(ModelBase::boolFromHttpContent(multipart->getContent(U("active"))));
    {
        m_Additional_properties.clear();
        if(multipart->hasContent(U("additional_properties")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("additional_properties"))));
        for( auto& item : jsonArray.as_array() )
        {
            utility::string_t key;
            if(item.has_field(U("key")))
            {
                key = ModelBase::stringFromJson(item[U("key")]);
            }
            if(item.is_null())
            {
                m_Additional_properties.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, std::shared_ptr<Property>(nullptr) ));
            }
            else
            {
                std::shared_ptr<Property> newItem(new Property());
                newItem->fromJson(item[U("value")]);
                m_Additional_properties.insert(std::pair<utility::string_t,std::shared_ptr<Property>>( key, newItem ));
            }
        }
        }
    }
    setBody(ModelBase::stringFromHttpContent(multipart->getContent(U("body"))));
    std::shared_ptr<NestedCategory> newCategory(new NestedCategory());
    newCategory->fromMultiPart(multipart, U("category."));
    setCategory( newCategory );
    if(multipart->hasContent(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("created_date"))));
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(U("id"))));
    }
    {
        m_Tags.clear();
        if(multipart->hasContent(U("tags")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("tags"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Tags.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(multipart->hasContent(U("template")))
    {
        setTemplate(ModelBase::stringFromHttpContent(multipart->getContent(U("template"))));
    }
    setTitle(ModelBase::stringFromHttpContent(multipart->getContent(U("title"))));
    if(multipart->hasContent(U("updated_date")))
    {
        setUpdatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("updated_date"))));
    }
}

bool ArticleResource::getActive() const
{
    return m_Active;
}


void ArticleResource::setActive(bool value)
{
    m_Active = value;
    
}
std::map<utility::string_t, std::shared_ptr<Property>>& ArticleResource::getAdditionalProperties()
{
    return m_Additional_properties;
}

void ArticleResource::setAdditionalProperties(std::map<utility::string_t, std::shared_ptr<Property>> value)
{
    m_Additional_properties = value;
    m_Additional_propertiesIsSet = true;
}
bool ArticleResource::additionalPropertiesIsSet() const
{
    return m_Additional_propertiesIsSet;
}

void ArticleResource::unsetAdditional_properties()
{
    m_Additional_propertiesIsSet = false;
}

utility::string_t ArticleResource::getBody() const
{
    return m_Body;
}


void ArticleResource::setBody(utility::string_t value)
{
    m_Body = value;
    
}
std::shared_ptr<NestedCategory> ArticleResource::getCategory() const
{
    return m_Category;
}


void ArticleResource::setCategory(std::shared_ptr<NestedCategory> value)
{
    m_Category = value;
    
}
int64_t ArticleResource::getCreatedDate() const
{
    return m_Created_date;
}


void ArticleResource::setCreatedDate(int64_t value)
{
    m_Created_date = value;
    m_Created_dateIsSet = true;
}
bool ArticleResource::createdDateIsSet() const
{
    return m_Created_dateIsSet;
}

void ArticleResource::unsetCreated_date()
{
    m_Created_dateIsSet = false;
}

utility::string_t ArticleResource::getId() const
{
    return m_Id;
}


void ArticleResource::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool ArticleResource::idIsSet() const
{
    return m_IdIsSet;
}

void ArticleResource::unsetId()
{
    m_IdIsSet = false;
}

std::vector<utility::string_t>& ArticleResource::getTags()
{
    return m_Tags;
}

void ArticleResource::setTags(std::vector<utility::string_t> value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}
bool ArticleResource::tagsIsSet() const
{
    return m_TagsIsSet;
}

void ArticleResource::unsetTags()
{
    m_TagsIsSet = false;
}

utility::string_t ArticleResource::getTemplate() const
{
    return m_Template;
}


void ArticleResource::setTemplate(utility::string_t value)
{
    m_Template = value;
    m_TemplateIsSet = true;
}
bool ArticleResource::templateIsSet() const
{
    return m_TemplateIsSet;
}

void ArticleResource::unsetTemplate()
{
    m_TemplateIsSet = false;
}

utility::string_t ArticleResource::getTitle() const
{
    return m_Title;
}


void ArticleResource::setTitle(utility::string_t value)
{
    m_Title = value;
    
}
int64_t ArticleResource::getUpdatedDate() const
{
    return m_Updated_date;
}


void ArticleResource::setUpdatedDate(int64_t value)
{
    m_Updated_date = value;
    m_Updated_dateIsSet = true;
}
bool ArticleResource::updatedDateIsSet() const
{
    return m_Updated_dateIsSet;
}

void ArticleResource::unsetUpdated_date()
{
    m_Updated_dateIsSet = false;
}

}
}
}
}

