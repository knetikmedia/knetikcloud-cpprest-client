/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * LeaderboardEntryResource.h
 *
 * 
 */

#ifndef LeaderboardEntryResource_H_
#define LeaderboardEntryResource_H_


#include "ModelBase.h"

#include "SimpleUserResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  LeaderboardEntryResource
    : public ModelBase
{
public:
    LeaderboardEntryResource();
    virtual ~LeaderboardEntryResource();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// LeaderboardEntryResource members

    /// <summary>
    /// The position of the user in the leaderboard. Null means non-compete or disqualification
    /// </summary>
    int64_t getRank() const;
    void setRank(int64_t value);
    bool rankIsSet() const;
    void unsetRank();
    /// <summary>
    /// The raw score in this leaderboard. Null means non-compete or disqualification
    /// </summary>
    int64_t getScore() const;
    void setScore(int64_t value);
    bool scoreIsSet() const;
    void unsetScore();
    /// <summary>
    /// The player for this entry
    /// </summary>
    std::shared_ptr<SimpleUserResource> getUser() const;
    void setUser(std::shared_ptr<SimpleUserResource> value);
    
protected:
    int64_t m_Rank;
    bool m_RankIsSet;
int64_t m_Score;
    bool m_ScoreIsSet;
std::shared_ptr<SimpleUserResource> m_User;
    };

}
}
}
}

#endif /* LeaderboardEntryResource_H_ */
