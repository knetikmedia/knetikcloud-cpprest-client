/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BreRule.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

BreRule::BreRule()
{
    m_ConditionIsSet = false;
    m_Condition_text = U("");
    m_Condition_textIsSet = false;
    m_Description = U("");
    m_DescriptionIsSet = false;
    m_Enabled = false;
    m_EnabledIsSet = false;
    m_End_date = 0;
    m_End_dateIsSet = false;
    m_Event_name = U("");
    m_Id = U("");
    m_IdIsSet = false;
    m_Name = U("");
    m_Sort = 0;
    m_SortIsSet = false;
    m_Start_date = 0;
    m_Start_dateIsSet = false;
    m_System_rule = false;
    m_System_ruleIsSet = false;
    
}

BreRule::~BreRule()
{
}

void BreRule::validate()
{
    // TODO: implement validation
}

web::json::value BreRule::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("actions")] = ModelBase::toJson(m_Actions);
    if(m_ConditionIsSet)
    {
        val[U("condition")] = ModelBase::toJson(m_Condition);
    }
    if(m_Condition_textIsSet)
    {
        val[U("condition_text")] = ModelBase::toJson(m_Condition_text);
    }
    if(m_DescriptionIsSet)
    {
        val[U("description")] = ModelBase::toJson(m_Description);
    }
    if(m_EnabledIsSet)
    {
        val[U("enabled")] = ModelBase::toJson(m_Enabled);
    }
    if(m_End_dateIsSet)
    {
        val[U("end_date")] = ModelBase::toJson(m_End_date);
    }
    val[U("event_name")] = ModelBase::toJson(m_Event_name);
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    val[U("name")] = ModelBase::toJson(m_Name);
    if(m_SortIsSet)
    {
        val[U("sort")] = ModelBase::toJson(m_Sort);
    }
    if(m_Start_dateIsSet)
    {
        val[U("start_date")] = ModelBase::toJson(m_Start_date);
    }
    if(m_System_ruleIsSet)
    {
        val[U("system_rule")] = ModelBase::toJson(m_System_rule);
    }
    

    return val;
}

void BreRule::fromJson(web::json::value& val)
{
    std::shared_ptr<ActionResource> newActions(new ActionResource());
    newActions->fromJson(val[U("actions")]);
    setActions( newItem );
    if(val.has_field(U("condition")))
    {
        if(!val[U("condition")].is_null())
        {
            std::shared_ptr<PredicateOperation> newItem(new PredicateOperation());
            newItem->fromJson(val[U("condition")]);
            setCondition( newItem );
        }
        
    }
    if(val.has_field(U("condition_text")))
    {
        setConditionText(ModelBase::stringFromJson(val[U("condition_text")]));
        
    }
    if(val.has_field(U("description")))
    {
        setDescription(ModelBase::stringFromJson(val[U("description")]));
        
    }
    if(val.has_field(U("enabled")))
    {
        setEnabled(ModelBase::boolFromJson(val[U("enabled")]));
    }
    if(val.has_field(U("end_date")))
    {
        setEndDate(ModelBase::int64_tFromJson(val[U("end_date")]));
    }
    setEventName(ModelBase::stringFromJson(val[U("event_name")]));
    if(val.has_field(U("id")))
    {
        setId(ModelBase::stringFromJson(val[U("id")]));
        
    }
    setName(ModelBase::stringFromJson(val[U("name")]));
    if(val.has_field(U("sort")))
    {
        setSort(ModelBase::int32_tFromJson(val[U("sort")]));
    }
    if(val.has_field(U("start_date")))
    {
        setStartDate(ModelBase::int64_tFromJson(val[U("start_date")]));
    }
    if(val.has_field(U("system_rule")))
    {
        setSystemRule(ModelBase::boolFromJson(val[U("system_rule")]));
    }
    
}

void BreRule::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    m_Actions->toMultipart(multipart, U("actions."));
    if(m_ConditionIsSet)
    {
        if (m_Condition.get())
        {
            m_Condition->toMultipart(multipart, U("condition."));
        }
        
    }
    if(m_Condition_textIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("condition_text"), m_Condition_text));
        
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("description"), m_Description));
        
    }
    if(m_EnabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("enabled"), m_Enabled));
    }
    if(m_End_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("end_date"), m_End_date));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("event_name"), m_Event_name));
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    if(m_SortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("sort"), m_Sort));
    }
    if(m_Start_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("start_date"), m_Start_date));
    }
    if(m_System_ruleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("system_rule"), m_System_rule));
    }
    
}

void BreRule::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    std::shared_ptr<ActionResource> newActions(new ActionResource());
    newActions->fromMultiPart(multipart, U("actions."));
    setActions( newActions );
    if(multipart->hasContent(U("condition")))
    {
        if(multipart->hasContent(U("condition")))
        {
            std::shared_ptr<PredicateOperation> newItem(new PredicateOperation());
            newItem->fromMultiPart(multipart, U("condition."));
            setCondition( newItem );
        }
        
    }
    if(multipart->hasContent(U("condition_text")))
    {
        setConditionText(ModelBase::stringFromHttpContent(multipart->getContent(U("condition_text"))));
        
    }
    if(multipart->hasContent(U("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("description"))));
        
    }
    if(multipart->hasContent(U("enabled")))
    {
        setEnabled(ModelBase::boolFromHttpContent(multipart->getContent(U("enabled"))));
    }
    if(multipart->hasContent(U("end_date")))
    {
        setEndDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("end_date"))));
    }
    setEventName(ModelBase::stringFromHttpContent(multipart->getContent(U("event_name"))));
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(U("id"))));
        
    }
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    if(multipart->hasContent(U("sort")))
    {
        setSort(ModelBase::int32_tFromHttpContent(multipart->getContent(U("sort"))));
    }
    if(multipart->hasContent(U("start_date")))
    {
        setStartDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("start_date"))));
    }
    if(multipart->hasContent(U("system_rule")))
    {
        setSystemRule(ModelBase::boolFromHttpContent(multipart->getContent(U("system_rule"))));
    }
    
}


std::shared_ptr<ActionResource> BreRule::getActions() const
{
    return m_Actions;
}
void BreRule::setActions(std::shared_ptr<ActionResource> value)
{
    m_Actions = value;
    
}
std::shared_ptr<PredicateOperation> BreRule::getCondition() const
{
    return m_Condition;
}
void BreRule::setCondition(std::shared_ptr<PredicateOperation> value)
{
    m_Condition = value;
    m_ConditionIsSet = true;
}
bool BreRule::conditionIsSet() const
{
    return m_ConditionIsSet;
}
void BreRule::unsetCondition()
{
    m_ConditionIsSet = false;
}
utility::string_t BreRule::getConditionText() const
{
    return m_Condition_text;
}
void BreRule::setConditionText(utility::string_t value)
{
    m_Condition_text = value;
    m_Condition_textIsSet = true;
}
bool BreRule::condition_textIsSet() const
{
    return m_Condition_textIsSet;
}
void BreRule::unsetCondition_text()
{
    m_Condition_textIsSet = false;
}
utility::string_t BreRule::getDescription() const
{
    return m_Description;
}
void BreRule::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool BreRule::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void BreRule::unsetDescription()
{
    m_DescriptionIsSet = false;
}
bool BreRule::getEnabled() const
{
    return m_Enabled;
}
void BreRule::setEnabled(bool value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}
bool BreRule::enabledIsSet() const
{
    return m_EnabledIsSet;
}
void BreRule::unsetEnabled()
{
    m_EnabledIsSet = false;
}
int64_t BreRule::getEndDate() const
{
    return m_End_date;
}
void BreRule::setEndDate(int64_t value)
{
    m_End_date = value;
    m_End_dateIsSet = true;
}
bool BreRule::end_dateIsSet() const
{
    return m_End_dateIsSet;
}
void BreRule::unsetEnd_date()
{
    m_End_dateIsSet = false;
}
utility::string_t BreRule::getEventName() const
{
    return m_Event_name;
}
void BreRule::setEventName(utility::string_t value)
{
    m_Event_name = value;
    
}
utility::string_t BreRule::getId() const
{
    return m_Id;
}
void BreRule::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool BreRule::idIsSet() const
{
    return m_IdIsSet;
}
void BreRule::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t BreRule::getName() const
{
    return m_Name;
}
void BreRule::setName(utility::string_t value)
{
    m_Name = value;
    
}
int32_t BreRule::getSort() const
{
    return m_Sort;
}
void BreRule::setSort(int32_t value)
{
    m_Sort = value;
    m_SortIsSet = true;
}
bool BreRule::sortIsSet() const
{
    return m_SortIsSet;
}
void BreRule::unsetSort()
{
    m_SortIsSet = false;
}
int64_t BreRule::getStartDate() const
{
    return m_Start_date;
}
void BreRule::setStartDate(int64_t value)
{
    m_Start_date = value;
    m_Start_dateIsSet = true;
}
bool BreRule::start_dateIsSet() const
{
    return m_Start_dateIsSet;
}
void BreRule::unsetStart_date()
{
    m_Start_dateIsSet = false;
}
bool BreRule::getSystemRule() const
{
    return m_System_rule;
}
void BreRule::setSystemRule(bool value)
{
    m_System_rule = value;
    m_System_ruleIsSet = true;
}
bool BreRule::system_ruleIsSet() const
{
    return m_System_ruleIsSet;
}
void BreRule::unsetSystem_rule()
{
    m_System_ruleIsSet = false;
}

}
}
}
}

