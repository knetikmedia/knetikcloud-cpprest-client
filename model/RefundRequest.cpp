/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "RefundRequest.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

RefundRequest::RefundRequest()
{
    m_Amount = 0.0;
    m_AmountIsSet = false;
    m_Bundle_sku = U("");
    m_Bundle_skuIsSet = false;
    m_Notes = U("");
    m_Sku = U("");
    m_SkuIsSet = false;
}

RefundRequest::~RefundRequest()
{
}

void RefundRequest::validate()
{
    // TODO: implement validation
}

web::json::value RefundRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_AmountIsSet)
    {
        val[U("amount")] = ModelBase::toJson(m_Amount);
    }
    if(m_Bundle_skuIsSet)
    {
        val[U("bundle_sku")] = ModelBase::toJson(m_Bundle_sku);
    }
    val[U("notes")] = ModelBase::toJson(m_Notes);
    if(m_SkuIsSet)
    {
        val[U("sku")] = ModelBase::toJson(m_Sku);
    }

    return val;
}

void RefundRequest::fromJson(web::json::value& val)
{
    if(val.has_field(U("amount")))
    {
        setAmount(ModelBase::doubleFromJson(val[U("amount")]));
    }
    if(val.has_field(U("bundle_sku")))
    {
        setBundleSku(ModelBase::stringFromJson(val[U("bundle_sku")]));
    }
    setNotes(ModelBase::stringFromJson(val[U("notes")]));
    if(val.has_field(U("sku")))
    {
        setSku(ModelBase::stringFromJson(val[U("sku")]));
    }
}

void RefundRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_AmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("amount"), m_Amount));
    }
    if(m_Bundle_skuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("bundle_sku"), m_Bundle_sku));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("notes"), m_Notes));
    if(m_SkuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("sku"), m_Sku));
        
    }
}

void RefundRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("amount")))
    {
        setAmount(ModelBase::doubleFromHttpContent(multipart->getContent(U("amount"))));
    }
    if(multipart->hasContent(U("bundle_sku")))
    {
        setBundleSku(ModelBase::stringFromHttpContent(multipart->getContent(U("bundle_sku"))));
    }
    setNotes(ModelBase::stringFromHttpContent(multipart->getContent(U("notes"))));
    if(multipart->hasContent(U("sku")))
    {
        setSku(ModelBase::stringFromHttpContent(multipart->getContent(U("sku"))));
    }
}

double RefundRequest::getAmount() const
{
    return m_Amount;
}


void RefundRequest::setAmount(double value)
{
    m_Amount = value;
    m_AmountIsSet = true;
}
bool RefundRequest::amountIsSet() const
{
    return m_AmountIsSet;
}

void RefundRequest::unsetAmount()
{
    m_AmountIsSet = false;
}

utility::string_t RefundRequest::getBundleSku() const
{
    return m_Bundle_sku;
}


void RefundRequest::setBundleSku(utility::string_t value)
{
    m_Bundle_sku = value;
    m_Bundle_skuIsSet = true;
}
bool RefundRequest::bundleSkuIsSet() const
{
    return m_Bundle_skuIsSet;
}

void RefundRequest::unsetBundle_sku()
{
    m_Bundle_skuIsSet = false;
}

utility::string_t RefundRequest::getNotes() const
{
    return m_Notes;
}


void RefundRequest::setNotes(utility::string_t value)
{
    m_Notes = value;
    
}
utility::string_t RefundRequest::getSku() const
{
    return m_Sku;
}


void RefundRequest::setSku(utility::string_t value)
{
    m_Sku = value;
    m_SkuIsSet = true;
}
bool RefundRequest::skuIsSet() const
{
    return m_SkuIsSet;
}

void RefundRequest::unsetSku()
{
    m_SkuIsSet = false;
}

}
}
}
}

