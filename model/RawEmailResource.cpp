/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "RawEmailResource.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

RawEmailResource::RawEmailResource()
{
    m_Body = U("");
    m_From = U("");
    m_FromIsSet = false;
    m_Html = false;
    m_HtmlIsSet = false;
    m_Subject = U("");
    
}

RawEmailResource::~RawEmailResource()
{
}

void RawEmailResource::validate()
{
    // TODO: implement validation
}

web::json::value RawEmailResource::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("body")] = ModelBase::toJson(m_Body);
    if(m_FromIsSet)
    {
        val[U("from")] = ModelBase::toJson(m_From);
    }
    if(m_HtmlIsSet)
    {
        val[U("html")] = ModelBase::toJson(m_Html);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Recipients )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[U("recipients")] = web::json::value::array(jsonArray);
            }
    val[U("subject")] = ModelBase::toJson(m_Subject);
    

    return val;
}

void RawEmailResource::fromJson(web::json::value& val)
{
    setBody(ModelBase::stringFromJson(val[U("body")]));
    if(val.has_field(U("from")))
    {
        setFrom(ModelBase::stringFromJson(val[U("from")]));
        
    }
    if(val.has_field(U("html")))
    {
        setHtml(ModelBase::boolFromJson(val[U("html")]));
    }
    {
        m_Recipients.clear();
        std::vector<web::json::value> jsonArray;
                for( auto& item : val[U("recipients")].as_array() )
        {
            m_Recipients.push_back(ModelBase::int32_tFromJson(item));
            
        }
    }
    setSubject(ModelBase::stringFromJson(val[U("subject")]));
    
}

void RawEmailResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("body"), m_Body));
    if(m_FromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("from"), m_From));
        
    }
    if(m_HtmlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("html"), m_Html));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Recipients )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + U("recipients"), web::json::value::array(jsonArray), U("application/json")));
            }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("subject"), m_Subject));
    
}

void RawEmailResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setBody(ModelBase::stringFromHttpContent(multipart->getContent(U("body"))));
    if(multipart->hasContent(U("from")))
    {
        setFrom(ModelBase::stringFromHttpContent(multipart->getContent(U("from"))));
        
    }
    if(multipart->hasContent(U("html")))
    {
        setHtml(ModelBase::boolFromHttpContent(multipart->getContent(U("html"))));
    }
    {
        m_Recipients.clear();
        
        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("recipients"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Recipients.push_back(ModelBase::int32_tFromJson(item));
            
        }
    }
    setSubject(ModelBase::stringFromHttpContent(multipart->getContent(U("subject"))));
    
}


utility::string_t RawEmailResource::getBody() const
{
    return m_Body;
}
void RawEmailResource::setBody(utility::string_t value)
{
    m_Body = value;
    
}
utility::string_t RawEmailResource::getFrom() const
{
    return m_From;
}
void RawEmailResource::setFrom(utility::string_t value)
{
    m_From = value;
    m_FromIsSet = true;
}
bool RawEmailResource::fromIsSet() const
{
    return m_FromIsSet;
}
void RawEmailResource::unsetFrom()
{
    m_FromIsSet = false;
}
bool RawEmailResource::getHtml() const
{
    return m_Html;
}
void RawEmailResource::setHtml(bool value)
{
    m_Html = value;
    m_HtmlIsSet = true;
}
bool RawEmailResource::htmlIsSet() const
{
    return m_HtmlIsSet;
}
void RawEmailResource::unsetHtml()
{
    m_HtmlIsSet = false;
}
std::vector<int32_t>& RawEmailResource::getRecipients()
{
    return m_Recipients;
}
utility::string_t RawEmailResource::getSubject() const
{
    return m_Subject;
}
void RawEmailResource::setSubject(utility::string_t value)
{
    m_Subject = value;
    
}

}
}
}
}

