/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ContributionResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

ContributionResource::ContributionResource()
{
    m_Role = U("");
}

ContributionResource::~ContributionResource()
{
}

void ContributionResource::validate()
{
    // TODO: implement validation
}

web::json::value ContributionResource::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("artist")] = ModelBase::toJson(m_Artist);
    val[U("media")] = ModelBase::toJson(m_Media);
    val[U("role")] = ModelBase::toJson(m_Role);

    return val;
}

void ContributionResource::fromJson(web::json::value& val)
{
    std::shared_ptr<SimpleReferenceResource«long»> newArtist(new SimpleReferenceResource«long»());
    newArtist->fromJson(val[U("artist")]);
    setArtist( newArtist );
    std::shared_ptr<SimpleReferenceResource«long»> newMedia(new SimpleReferenceResource«long»());
    newMedia->fromJson(val[U("media")]);
    setMedia( newMedia );
    setRole(ModelBase::stringFromJson(val[U("role")]));
}

void ContributionResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    m_Artist->toMultipart(multipart, U("artist."));
    m_Media->toMultipart(multipart, U("media."));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("role"), m_Role));
}

void ContributionResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    std::shared_ptr<SimpleReferenceResource«long»> newArtist(new SimpleReferenceResource«long»());
    newArtist->fromMultiPart(multipart, U("artist."));
    setArtist( newArtist );
    std::shared_ptr<SimpleReferenceResource«long»> newMedia(new SimpleReferenceResource«long»());
    newMedia->fromMultiPart(multipart, U("media."));
    setMedia( newMedia );
    setRole(ModelBase::stringFromHttpContent(multipart->getContent(U("role"))));
}

std::shared_ptr<SimpleReferenceResource«long»> ContributionResource::getArtist() const
{
    return m_Artist;
}


void ContributionResource::setArtist(std::shared_ptr<SimpleReferenceResource«long»> value)
{
    m_Artist = value;
    
}
std::shared_ptr<SimpleReferenceResource«long»> ContributionResource::getMedia() const
{
    return m_Media;
}


void ContributionResource::setMedia(std::shared_ptr<SimpleReferenceResource«long»> value)
{
    m_Media = value;
    
}
utility::string_t ContributionResource::getRole() const
{
    return m_Role;
}


void ContributionResource::setRole(utility::string_t value)
{
    m_Role = value;
    
}
}
}
}
}

