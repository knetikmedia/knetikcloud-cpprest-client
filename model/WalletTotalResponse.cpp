/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "WalletTotalResponse.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

WalletTotalResponse::WalletTotalResponse()
{
    m_Currency_code = U("");
    m_Currency_codeIsSet = false;
    m_Total = 0.0;
    m_TotalIsSet = false;
    
}

WalletTotalResponse::~WalletTotalResponse()
{
}

void WalletTotalResponse::validate()
{
    // TODO: implement validation
}

web::json::value WalletTotalResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Currency_codeIsSet)
    {
        val[U("currency_code")] = ModelBase::toJson(m_Currency_code);
    }
    if(m_TotalIsSet)
    {
        val[U("total")] = ModelBase::toJson(m_Total);
    }
    

    return val;
}

void WalletTotalResponse::fromJson(web::json::value& val)
{
    if(val.has_field(U("currency_code")))
    {
        setCurrencyCode(ModelBase::stringFromJson(val[U("currency_code")]));
        
    }
    if(val.has_field(U("total")))
    {
        setTotal(ModelBase::doubleFromJson(val[U("total")]));
    }
    
}

void WalletTotalResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Currency_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("currency_code"), m_Currency_code));
        
    }
    if(m_TotalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("total"), m_Total));
    }
    
}

void WalletTotalResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("currency_code")))
    {
        setCurrencyCode(ModelBase::stringFromHttpContent(multipart->getContent(U("currency_code"))));
        
    }
    if(multipart->hasContent(U("total")))
    {
        setTotal(ModelBase::doubleFromHttpContent(multipart->getContent(U("total"))));
    }
    
}


utility::string_t WalletTotalResponse::getCurrencyCode() const
{
    return m_Currency_code;
}
void WalletTotalResponse::setCurrencyCode(utility::string_t value)
{
    m_Currency_code = value;
    m_Currency_codeIsSet = true;
}
bool WalletTotalResponse::currency_codeIsSet() const
{
    return m_Currency_codeIsSet;
}
void WalletTotalResponse::unsetCurrency_code()
{
    m_Currency_codeIsSet = false;
}
double WalletTotalResponse::getTotal() const
{
    return m_Total;
}
void WalletTotalResponse::setTotal(double value)
{
    m_Total = value;
    m_TotalIsSet = true;
}
bool WalletTotalResponse::totalIsSet() const
{
    return m_TotalIsSet;
}
void WalletTotalResponse::unsetTotal()
{
    m_TotalIsSet = false;
}

}
}
}
}

