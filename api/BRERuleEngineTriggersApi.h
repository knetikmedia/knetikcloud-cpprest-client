/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * BRERuleEngineTriggersApi.h
 *
 * 
 */

#ifndef BRERuleEngineTriggersApi_H_
#define BRERuleEngineTriggersApi_H_


#include "ApiClient.h"

#include "BreTriggerResource.h"
#include "PageResource«BreTriggerResource».h"
#include "Result.h"
#include <cpprest/details/basic_types.h>

namespace com {
namespace knetikcloud {
namespace client {
namespace api {

using namespace com::knetikcloud::client::model;

class  BRERuleEngineTriggersApi
{
public:
    BRERuleEngineTriggersApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~BRERuleEngineTriggersApi();
    /// <summary>
    /// Create a trigger
    /// </summary>
    /// <remarks>
    /// Customer added triggers will not be fired automatically or have rules associated with them by default. Custom rules must be added to get use from the trigger and it must then be fired from the outside. See the Bre Event services
    /// </remarks>
    /// <param name="breTriggerResource">The BRE trigger resource object (optional)</param>
    pplx::task<std::shared_ptr<BreTriggerResource>> createBRETrigger(std::shared_ptr<BreTriggerResource> breTriggerResource);
    /// <summary>
    /// Delete a trigger
    /// </summary>
    /// <remarks>
    /// May fail if there are existing rules against it. Cannot delete core triggers
    /// </remarks>
    /// <param name="eventName">The trigger event name</param>
    pplx::task<void> deleteBRETrigger(utility::string_t eventName);
    /// <summary>
    /// Get a single trigger
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="eventName">The trigger event name</param>
    pplx::task<std::shared_ptr<BreTriggerResource>> getBRETrigger(utility::string_t eventName);
    /// <summary>
    /// List triggers
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="filterSystem">Filter for triggers that are system triggers when true, or not when false. Leave off for both mixed (optional)</param>/// <param name="filterCategory">Filter for triggers that are within a specific category (optional)</param>/// <param name="filterTags">Filter for triggers that have all of the given tags (comma separated list) (optional)</param>/// <param name="filterName">Filter for triggers that have names containing the given string (optional)</param>/// <param name="filterSearch">Filter for triggers containing the given words somewhere within name, description and tags (optional)</param>/// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>
    pplx::task<std::shared_ptr<PageResource«BreTriggerResource»>> getBRETriggers(bool filterSystem, utility::string_t filterCategory, utility::string_t filterTags, utility::string_t filterName, utility::string_t filterSearch, int32_t size, int32_t page);
    /// <summary>
    /// Update a trigger
    /// </summary>
    /// <remarks>
    /// May fail if new parameters mismatch requirements of existing rules. Cannot update core triggers
    /// </remarks>
    /// <param name="eventName">The trigger event name</param>/// <param name="breTriggerResource">The BRE trigger resource object (optional)</param>
    pplx::task<std::shared_ptr<BreTriggerResource>> updateBRETrigger(utility::string_t eventName, std::shared_ptr<BreTriggerResource> breTriggerResource);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* BRERuleEngineTriggersApi_H_ */

