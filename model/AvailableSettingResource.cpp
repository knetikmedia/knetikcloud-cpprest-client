/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "AvailableSettingResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

AvailableSettingResource::AvailableSettingResource()
{
    m_Advanced_option = false;
    m_Advanced_optionIsSet = false;
    m_Default_value = U("");
    m_Default_valueIsSet = false;
    m_Description = U("");
    m_DescriptionIsSet = false;
    m_Key = U("");
    m_Name = U("");
    m_OptionsIsSet = false;
    m_Type = U("");
}

AvailableSettingResource::~AvailableSettingResource()
{
}

void AvailableSettingResource::validate()
{
    // TODO: implement validation
}

web::json::value AvailableSettingResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Advanced_optionIsSet)
    {
        val[U("advanced_option")] = ModelBase::toJson(m_Advanced_option);
    }
    if(m_Default_valueIsSet)
    {
        val[U("default_value")] = ModelBase::toJson(m_Default_value);
    }
    if(m_DescriptionIsSet)
    {
        val[U("description")] = ModelBase::toJson(m_Description);
    }
    val[U("key")] = ModelBase::toJson(m_Key);
    val[U("name")] = ModelBase::toJson(m_Name);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Options )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("options")] = web::json::value::array(jsonArray);
        }
    }
    val[U("type")] = ModelBase::toJson(m_Type);

    return val;
}

void AvailableSettingResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("advanced_option")))
    {
        setAdvancedOption(ModelBase::boolFromJson(val[U("advanced_option")]));
    }
    if(val.has_field(U("default_value")))
    {
        setDefaultValue(ModelBase::stringFromJson(val[U("default_value")]));
    }
    if(val.has_field(U("description")))
    {
        setDescription(ModelBase::stringFromJson(val[U("description")]));
    }
    setKey(ModelBase::stringFromJson(val[U("key")]));
    setName(ModelBase::stringFromJson(val[U("name")]));
    {
        m_Options.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("options")))
        {
        for( auto& item : val[U("options")].as_array() )
        {
            if(item.is_null())
            {
                m_Options.push_back( std::shared_ptr<SettingOption>(nullptr) );
            }
            else
            {
                std::shared_ptr<SettingOption> newItem(new SettingOption());
                newItem->fromJson(item);
                m_Options.push_back( newItem );
            }
        }
        }
    }
    setType(ModelBase::stringFromJson(val[U("type")]));
}

void AvailableSettingResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Advanced_optionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("advanced_option"), m_Advanced_option));
    }
    if(m_Default_valueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("default_value"), m_Default_value));
        
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("description"), m_Description));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("key"), m_Key));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Options )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("options"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("type"), m_Type));
}

void AvailableSettingResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("advanced_option")))
    {
        setAdvancedOption(ModelBase::boolFromHttpContent(multipart->getContent(U("advanced_option"))));
    }
    if(multipart->hasContent(U("default_value")))
    {
        setDefaultValue(ModelBase::stringFromHttpContent(multipart->getContent(U("default_value"))));
    }
    if(multipart->hasContent(U("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("description"))));
    }
    setKey(ModelBase::stringFromHttpContent(multipart->getContent(U("key"))));
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    {
        m_Options.clear();
        if(multipart->hasContent(U("options")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("options"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Options.push_back( std::shared_ptr<SettingOption>(nullptr) );
            }
            else
            {
                std::shared_ptr<SettingOption> newItem(new SettingOption());
                newItem->fromJson(item);
                m_Options.push_back( newItem );
            }
        }
        }
    }
    setType(ModelBase::stringFromHttpContent(multipart->getContent(U("type"))));
}

bool AvailableSettingResource::getAdvancedOption() const
{
    return m_Advanced_option;
}


void AvailableSettingResource::setAdvancedOption(bool value)
{
    m_Advanced_option = value;
    m_Advanced_optionIsSet = true;
}
bool AvailableSettingResource::advancedOptionIsSet() const
{
    return m_Advanced_optionIsSet;
}

void AvailableSettingResource::unsetAdvanced_option()
{
    m_Advanced_optionIsSet = false;
}

utility::string_t AvailableSettingResource::getDefaultValue() const
{
    return m_Default_value;
}


void AvailableSettingResource::setDefaultValue(utility::string_t value)
{
    m_Default_value = value;
    m_Default_valueIsSet = true;
}
bool AvailableSettingResource::defaultValueIsSet() const
{
    return m_Default_valueIsSet;
}

void AvailableSettingResource::unsetDefault_value()
{
    m_Default_valueIsSet = false;
}

utility::string_t AvailableSettingResource::getDescription() const
{
    return m_Description;
}


void AvailableSettingResource::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool AvailableSettingResource::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void AvailableSettingResource::unsetDescription()
{
    m_DescriptionIsSet = false;
}

utility::string_t AvailableSettingResource::getKey() const
{
    return m_Key;
}


void AvailableSettingResource::setKey(utility::string_t value)
{
    m_Key = value;
    
}
utility::string_t AvailableSettingResource::getName() const
{
    return m_Name;
}


void AvailableSettingResource::setName(utility::string_t value)
{
    m_Name = value;
    
}
std::vector<std::shared_ptr<SettingOption>>& AvailableSettingResource::getOptions()
{
    return m_Options;
}

void AvailableSettingResource::setOptions(std::vector<std::shared_ptr<SettingOption>> value)
{
    m_Options = value;
    m_OptionsIsSet = true;
}
bool AvailableSettingResource::optionsIsSet() const
{
    return m_OptionsIsSet;
}

void AvailableSettingResource::unsetOptions()
{
    m_OptionsIsSet = false;
}

utility::string_t AvailableSettingResource::getType() const
{
    return m_Type;
}


void AvailableSettingResource::setType(utility::string_t value)
{
    m_Type = value;
    
}
}
}
}
}

