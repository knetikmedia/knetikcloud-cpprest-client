/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Fulfillable.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

Fulfillable::Fulfillable()
{
    m_Type_name = U("");
}

Fulfillable::~Fulfillable()
{
}

void Fulfillable::validate()
{
    // TODO: implement validation
}

web::json::value Fulfillable::toJson() const
{
    web::json::value val = this->Behavior::toJson();

    val[U("type_name")] = ModelBase::toJson(m_Type_name);

    return val;
}

void Fulfillable::fromJson(web::json::value& val)
{
    this->Behavior::fromJson(val);

    setTypeName(ModelBase::stringFromJson(val[U("type_name")]));
}

void Fulfillable::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("description"), m_Description));
        
    }
    if(m_Type_hintIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("type_hint"), m_Type_hint));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("type_name"), m_Type_name));
}

void Fulfillable::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("description"))));
    }
    if(multipart->hasContent(U("type_hint")))
    {
        setTypeHint(ModelBase::stringFromHttpContent(multipart->getContent(U("type_hint"))));
    }
    setTypeName(ModelBase::stringFromHttpContent(multipart->getContent(U("type_name"))));
}

utility::string_t Fulfillable::getTypeName() const
{
    return m_Type_name;
}


void Fulfillable::setTypeName(utility::string_t value)
{
    m_Type_name = value;
    
}
}
}
}
}

