/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * ForwardLog.h
 *
 * 
 */

#ifndef ForwardLog_H_
#define ForwardLog_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "Object.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ForwardLog
    : public ModelBase
{
public:
    ForwardLog();
    virtual ~ForwardLog();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ForwardLog members

    /// <summary>
    /// The end date of the forward log entry
    /// </summary>
    int64_t getEndDate() const;
    void setEndDate(int64_t value);
    bool end_dateIsSet() const;
    void unsetEnd_date();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getErrorMsg() const;
    void setErrorMsg(utility::string_t value);
    bool error_msgIsSet() const;
    void unsetError_msg();
    /// <summary>
    /// The http status code the forward log entry
    /// </summary>
    int32_t getHttpStatusCode() const;
    void setHttpStatusCode(int32_t value);
    bool http_status_codeIsSet() const;
    void unsetHttp_status_code();
    /// <summary>
    /// The id of the forward log entry
    /// </summary>
    utility::string_t getId() const;
    void setId(utility::string_t value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// The payload of the forward log entry
    /// </summary>
    std::shared_ptr<Object> getPayload() const;
    void setPayload(std::shared_ptr<Object> value);
    bool payloadIsSet() const;
    void unsetPayload();
    /// <summary>
    /// The response string of the forward log entry
    /// </summary>
    utility::string_t getResponse() const;
    void setResponse(utility::string_t value);
    bool responseIsSet() const;
    void unsetResponse();
    /// <summary>
    /// The retry count of the forward log entry
    /// </summary>
    int32_t getRetryCount() const;
    void setRetryCount(int32_t value);
    bool retry_countIsSet() const;
    void unsetRetry_count();
    /// <summary>
    /// The start date of the forward log entry
    /// </summary>
    int64_t getStartDate() const;
    void setStartDate(int64_t value);
    bool start_dateIsSet() const;
    void unsetStart_date();
    /// <summary>
    /// The endpoint url of the forward log entry
    /// </summary>
    utility::string_t getUrl() const;
    void setUrl(utility::string_t value);
    bool urlIsSet() const;
    void unsetUrl();

protected:
    int64_t m_End_date;
    bool m_End_dateIsSet;
utility::string_t m_Error_msg;
    bool m_Error_msgIsSet;
int32_t m_Http_status_code;
    bool m_Http_status_codeIsSet;
utility::string_t m_Id;
    bool m_IdIsSet;
std::shared_ptr<Object> m_Payload;
    bool m_PayloadIsSet;
utility::string_t m_Response;
    bool m_ResponseIsSet;
int32_t m_Retry_count;
    bool m_Retry_countIsSet;
int64_t m_Start_date;
    bool m_Start_dateIsSet;
utility::string_t m_Url;
    bool m_UrlIsSet;
};

}
}
}
}

#endif /* ForwardLog_H_ */
