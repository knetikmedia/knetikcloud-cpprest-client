/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Sku.h
 *
 * 
 */

#ifndef Sku_H_
#define Sku_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>
#include "Property.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Sku
    : public ModelBase
{
public:
    Sku();
    virtual ~Sku();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Sku members

    /// <summary>
    /// A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type, or be an extra not from the template
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<Property>>& getAdditionalProperties();
    bool additional_propertiesIsSet() const;
    void unsetAdditional_properties();
    /// <summary>
    /// The currency code for the SKU, a three letter string (ISO3)
    /// </summary>
    utility::string_t getCurrencyCode() const;
    void setCurrencyCode(utility::string_t value);
        /// <summary>
    /// The description of the SKU (Ex: An item comes in multiple sizes/colors, each needing its own unique description)
    /// </summary>
    utility::string_t getDescription() const;
    void setDescription(utility::string_t value);
    bool descriptionIsSet() const;
    void unsetDescription();
    /// <summary>
    /// The number of SKUs currently in stock
    /// </summary>
    int32_t getInventory() const;
    void setInventory(int32_t value);
    bool inventoryIsSet() const;
    void unsetInventory();
    /// <summary>
    /// Alerts vendor when SKU inventory drops below this value
    /// </summary>
    int32_t getMinInventoryThreshold() const;
    void setMinInventoryThreshold(int32_t value);
    bool min_inventory_thresholdIsSet() const;
    void unsetMin_inventory_threshold();
    /// <summary>
    /// The base price before any sale
    /// </summary>
    double getOriginalPrice() const;
    void setOriginalPrice(double value);
        /// <summary>
    /// The current price of the SKU with sales, if any. Set original_price for the base
    /// </summary>
    double getPrice() const;
    void setPrice(double value);
    bool priceIsSet() const;
    void unsetPrice();
    /// <summary>
    /// Whether or not the SKU is currently published
    /// </summary>
    bool getPublished() const;
    void setPublished(bool value);
    bool publishedIsSet() const;
    void unsetPublished();
    /// <summary>
    /// The id of a sale affecting the price, if any
    /// </summary>
    int32_t getSaleId() const;
    void setSaleId(int32_t value);
    bool sale_idIsSet() const;
    void unsetSale_id();
    /// <summary>
    /// The name of a sale affecting the price, if any
    /// </summary>
    utility::string_t getSaleName() const;
    void setSaleName(utility::string_t value);
    bool sale_nameIsSet() const;
    void unsetSale_name();
    /// <summary>
    /// The stock keeping unit (SKU), a unique identifier for a given product.  Max 40 characters
    /// </summary>
    utility::string_t getSku() const;
    void setSku(utility::string_t value);
        /// <summary>
    /// The date the sku becomes available, unix timestamp in seconds.  If set to null, sku will become available immediately
    /// </summary>
    int64_t getStartDate() const;
    void setStartDate(int64_t value);
    bool start_dateIsSet() const;
    void unsetStart_date();
    /// <summary>
    /// The date the sku becomes unavailable, unix timestamp in seconds.  If set to null, sku is always available
    /// </summary>
    int64_t getStopDate() const;
    void setStopDate(int64_t value);
    bool stop_dateIsSet() const;
    void unsetStop_date();

protected:
    std::map<utility::string_t, std::shared_ptr<Property>> m_Additional_properties;
    bool m_Additional_propertiesIsSet;
utility::string_t m_Currency_code;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
int32_t m_Inventory;
    bool m_InventoryIsSet;
int32_t m_Min_inventory_threshold;
    bool m_Min_inventory_thresholdIsSet;
double m_Original_price;
    double m_Price;
    bool m_PriceIsSet;
bool m_Published;
    bool m_PublishedIsSet;
int32_t m_Sale_id;
    bool m_Sale_idIsSet;
utility::string_t m_Sale_name;
    bool m_Sale_nameIsSet;
utility::string_t m_Sku;
    int64_t m_Start_date;
    bool m_Start_dateIsSet;
int64_t m_Stop_date;
    bool m_Stop_dateIsSet;
};

}
}
}
}

#endif /* Sku_H_ */
