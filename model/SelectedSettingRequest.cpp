/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SelectedSettingRequest.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

SelectedSettingRequest::SelectedSettingRequest()
{
    m_Key = U("");
    m_Value = U("");
}

SelectedSettingRequest::~SelectedSettingRequest()
{
}

void SelectedSettingRequest::validate()
{
    // TODO: implement validation
}

web::json::value SelectedSettingRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("key")] = ModelBase::toJson(m_Key);
    val[U("value")] = ModelBase::toJson(m_Value);

    return val;
}

void SelectedSettingRequest::fromJson(web::json::value& val)
{
    setKey(ModelBase::stringFromJson(val[U("key")]));
    setValue(ModelBase::stringFromJson(val[U("value")]));
}

void SelectedSettingRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("key"), m_Key));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("value"), m_Value));
}

void SelectedSettingRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setKey(ModelBase::stringFromHttpContent(multipart->getContent(U("key"))));
    setValue(ModelBase::stringFromHttpContent(multipart->getContent(U("value"))));
}

utility::string_t SelectedSettingRequest::getKey() const
{
    return m_Key;
}


void SelectedSettingRequest::setKey(utility::string_t value)
{
    m_Key = value;
    
}
utility::string_t SelectedSettingRequest::getValue() const
{
    return m_Value;
}


void SelectedSettingRequest::setValue(utility::string_t value)
{
    m_Value = value;
    
}
}
}
}
}

