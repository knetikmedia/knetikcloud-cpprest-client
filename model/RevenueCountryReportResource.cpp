/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "RevenueCountryReportResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

RevenueCountryReportResource::RevenueCountryReportResource()
{
    m_Country = U("");
    m_CountryIsSet = false;
    m_Revenue = 0.0;
    m_RevenueIsSet = false;
    m_Volume = 0L;
    m_VolumeIsSet = false;
}

RevenueCountryReportResource::~RevenueCountryReportResource()
{
}

void RevenueCountryReportResource::validate()
{
    // TODO: implement validation
}

web::json::value RevenueCountryReportResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CountryIsSet)
    {
        val[U("country")] = ModelBase::toJson(m_Country);
    }
    if(m_RevenueIsSet)
    {
        val[U("revenue")] = ModelBase::toJson(m_Revenue);
    }
    if(m_VolumeIsSet)
    {
        val[U("volume")] = ModelBase::toJson(m_Volume);
    }

    return val;
}

void RevenueCountryReportResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("country")))
    {
        setCountry(ModelBase::stringFromJson(val[U("country")]));
    }
    if(val.has_field(U("revenue")))
    {
        setRevenue(ModelBase::doubleFromJson(val[U("revenue")]));
    }
    if(val.has_field(U("volume")))
    {
        setVolume(ModelBase::int64_tFromJson(val[U("volume")]));
    }
}

void RevenueCountryReportResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_CountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("country"), m_Country));
        
    }
    if(m_RevenueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("revenue"), m_Revenue));
    }
    if(m_VolumeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("volume"), m_Volume));
    }
}

void RevenueCountryReportResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("country")))
    {
        setCountry(ModelBase::stringFromHttpContent(multipart->getContent(U("country"))));
    }
    if(multipart->hasContent(U("revenue")))
    {
        setRevenue(ModelBase::doubleFromHttpContent(multipart->getContent(U("revenue"))));
    }
    if(multipart->hasContent(U("volume")))
    {
        setVolume(ModelBase::int64_tFromHttpContent(multipart->getContent(U("volume"))));
    }
}

utility::string_t RevenueCountryReportResource::getCountry() const
{
    return m_Country;
}


void RevenueCountryReportResource::setCountry(utility::string_t value)
{
    m_Country = value;
    m_CountryIsSet = true;
}
bool RevenueCountryReportResource::countryIsSet() const
{
    return m_CountryIsSet;
}

void RevenueCountryReportResource::unsetCountry()
{
    m_CountryIsSet = false;
}

double RevenueCountryReportResource::getRevenue() const
{
    return m_Revenue;
}


void RevenueCountryReportResource::setRevenue(double value)
{
    m_Revenue = value;
    m_RevenueIsSet = true;
}
bool RevenueCountryReportResource::revenueIsSet() const
{
    return m_RevenueIsSet;
}

void RevenueCountryReportResource::unsetRevenue()
{
    m_RevenueIsSet = false;
}

int64_t RevenueCountryReportResource::getVolume() const
{
    return m_Volume;
}


void RevenueCountryReportResource::setVolume(int64_t value)
{
    m_Volume = value;
    m_VolumeIsSet = true;
}
bool RevenueCountryReportResource::volumeIsSet() const
{
    return m_VolumeIsSet;
}

void RevenueCountryReportResource::unsetVolume()
{
    m_VolumeIsSet = false;
}

}
}
}
}

