/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Sku.h
 *
 * 
 */

#ifndef Sku_H_
#define Sku_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>
#include "Property.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Sku
    : public ModelBase
{
public:
    Sku();
    virtual ~Sku();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Sku members

    /// <summary>
    /// A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type, or be an extra not from the template
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<Property>>& getAdditionalProperties();
    bool additionalPropertiesIsSet() const;
    void unsetAdditional_properties();
    void setAdditionalProperties(std::map<utility::string_t, std::shared_ptr<Property>> value);
    /// <summary>
    /// The currency code for the SKU, a three letter string (ISO3)
    /// </summary>
    utility::string_t getCurrencyCode() const;
        void setCurrencyCode(utility::string_t value);
    /// <summary>
    /// The friendly name of the SKU as it will appear on invoices and reports. Typically represents the option name like red, large, etc
    /// </summary>
    utility::string_t getDescription() const;
        void setDescription(utility::string_t value);
    /// <summary>
    /// The number of SKUs currently in stock
    /// </summary>
    int32_t getInventory() const;
    bool inventoryIsSet() const;
    void unsetInventory();
    void setInventory(int32_t value);
    /// <summary>
    /// Alerts vendor when SKU inventory drops below this value
    /// </summary>
    int32_t getMinInventoryThreshold() const;
    bool minInventoryThresholdIsSet() const;
    void unsetMin_inventory_threshold();
    void setMinInventoryThreshold(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    bool getNotAvailable() const;
    bool notAvailableIsSet() const;
    void unsetNot_available();
    void setNotAvailable(bool value);
    /// <summary>
    /// 
    /// </summary>
    bool getNotDisplayable() const;
    bool notDisplayableIsSet() const;
    void unsetNot_displayable();
    void setNotDisplayable(bool value);
    /// <summary>
    /// The base price before any sale
    /// </summary>
    double getOriginalPrice() const;
        void setOriginalPrice(double value);
    /// <summary>
    /// The current price of the SKU with sales, if any. Set original_price for the base
    /// </summary>
    double getPrice() const;
    bool priceIsSet() const;
    void unsetPrice();
    void setPrice(double value);
    /// <summary>
    /// Whether or not the SKU is currently visible to users. This will not block users from purchase. Use start_date or stop_date to prevent purchase. Default: true
    /// </summary>
    bool getPublished() const;
    bool publishedIsSet() const;
    void unsetPublished();
    void setPublished(bool value);
    /// <summary>
    /// The id of a sale affecting the price, if any
    /// </summary>
    int32_t getSaleId() const;
    bool saleIdIsSet() const;
    void unsetSale_id();
    void setSaleId(int32_t value);
    /// <summary>
    /// The name of a sale affecting the price, if any
    /// </summary>
    utility::string_t getSaleName() const;
    bool saleNameIsSet() const;
    void unsetSale_name();
    void setSaleName(utility::string_t value);
    /// <summary>
    /// The stock keeping unit (SKU), a unique identifier for a given product.  Max 40 characters
    /// </summary>
    utility::string_t getSku() const;
        void setSku(utility::string_t value);
    /// <summary>
    /// The date the sku becomes visible (if published) and available for purchase, unix timestamp in seconds.  If set to null, sku will become available immediately
    /// </summary>
    int64_t getStartDate() const;
    bool startDateIsSet() const;
    void unsetStart_date();
    void setStartDate(int64_t value);
    /// <summary>
    /// The date the sku becomes hidden and unavailable for purchase, unix timestamp in seconds.  If set to null, sku is always available
    /// </summary>
    int64_t getStopDate() const;
    bool stopDateIsSet() const;
    void unsetStop_date();
    void setStopDate(int64_t value);

protected:
    std::map<utility::string_t, std::shared_ptr<Property>> m_Additional_properties;
    bool m_Additional_propertiesIsSet;
    utility::string_t m_Currency_code;
        utility::string_t m_Description;
        int32_t m_Inventory;
    bool m_InventoryIsSet;
    int32_t m_Min_inventory_threshold;
    bool m_Min_inventory_thresholdIsSet;
    bool m_Not_available;
    bool m_Not_availableIsSet;
    bool m_Not_displayable;
    bool m_Not_displayableIsSet;
    double m_Original_price;
        double m_Price;
    bool m_PriceIsSet;
    bool m_Published;
    bool m_PublishedIsSet;
    int32_t m_Sale_id;
    bool m_Sale_idIsSet;
    utility::string_t m_Sale_name;
    bool m_Sale_nameIsSet;
    utility::string_t m_Sku;
        int64_t m_Start_date;
    bool m_Start_dateIsSet;
    int64_t m_Stop_date;
    bool m_Stop_dateIsSet;
};

}
}
}
}

#endif /* Sku_H_ */
