/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * LimitedGettable.h
 *
 * 
 */

#ifndef LimitedGettable_H_
#define LimitedGettable_H_


#include "ModelBase.h"

#include "Behavior.h"
#include <cpprest/details/basic_types.h>
#include "LimitedGettableGroup.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  LimitedGettable
    : public ModelBase
{
public:
    LimitedGettable();
    virtual ~LimitedGettable();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// LimitedGettable members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    void setDescription(utility::string_t value);
    bool descriptionIsSet() const;
    void unsetDescription();
    /// <summary>
    /// Used for polymorphic type recognition and thus must match an expected type with additional properties
    /// </summary>
    utility::string_t getTypeHint() const;
    void setTypeHint(utility::string_t value);
    bool type_hintIsSet() const;
    void unsetType_hint();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LimitedGettableGroup> getGroup() const;
    void setGroup(std::shared_ptr<LimitedGettableGroup> value);
    bool groupIsSet() const;
    void unsetGroup();

protected:
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
utility::string_t m_Type_hint;
    bool m_Type_hintIsSet;
std::shared_ptr<LimitedGettableGroup> m_Group;
    bool m_GroupIsSet;
};

}
}
}
}

#endif /* LimitedGettable_H_ */
