/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "DispositionResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

DispositionResource::DispositionResource()
{
    m_Context = U("");
    m_ContextIsSet = false;
    m_Context_id = U("");
    m_Context_idIsSet = false;
    m_Created_date = 0L;
    m_Created_dateIsSet = false;
    m_Id = 0L;
    m_IdIsSet = false;
    m_Name = U("");
    m_UserIsSet = false;
}

DispositionResource::~DispositionResource()
{
}

void DispositionResource::validate()
{
    // TODO: implement validation
}

web::json::value DispositionResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ContextIsSet)
    {
        val[U("context")] = ModelBase::toJson(m_Context);
    }
    if(m_Context_idIsSet)
    {
        val[U("context_id")] = ModelBase::toJson(m_Context_id);
    }
    if(m_Created_dateIsSet)
    {
        val[U("created_date")] = ModelBase::toJson(m_Created_date);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    val[U("name")] = ModelBase::toJson(m_Name);
    if(m_UserIsSet)
    {
        val[U("user")] = ModelBase::toJson(m_User);
    }

    return val;
}

void DispositionResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("context")))
    {
        setContext(ModelBase::stringFromJson(val[U("context")]));
    }
    if(val.has_field(U("context_id")))
    {
        setContextId(ModelBase::stringFromJson(val[U("context_id")]));
    }
    if(val.has_field(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromJson(val[U("created_date")]));
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int64_tFromJson(val[U("id")]));
    }
    setName(ModelBase::stringFromJson(val[U("name")]));
    if(val.has_field(U("user")))
    {
        if(!val[U("user")].is_null())
        {
            std::shared_ptr<SimpleUserResource> newItem(new SimpleUserResource());
            newItem->fromJson(val[U("user")]);
            setUser( newItem );
        }
    }
}

void DispositionResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_ContextIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("context"), m_Context));
        
    }
    if(m_Context_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("context_id"), m_Context_id));
        
    }
    if(m_Created_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("created_date"), m_Created_date));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    if(m_UserIsSet)
    {
        if (m_User.get())
        {
            m_User->toMultipart(multipart, U("user."));
        }
        
    }
}

void DispositionResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("context")))
    {
        setContext(ModelBase::stringFromHttpContent(multipart->getContent(U("context"))));
    }
    if(multipart->hasContent(U("context_id")))
    {
        setContextId(ModelBase::stringFromHttpContent(multipart->getContent(U("context_id"))));
    }
    if(multipart->hasContent(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("created_date"))));
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int64_tFromHttpContent(multipart->getContent(U("id"))));
    }
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    if(multipart->hasContent(U("user")))
    {
        if(multipart->hasContent(U("user")))
        {
            std::shared_ptr<SimpleUserResource> newItem(new SimpleUserResource());
            newItem->fromMultiPart(multipart, U("user."));
            setUser( newItem );
        }
    }
}

utility::string_t DispositionResource::getContext() const
{
    return m_Context;
}


void DispositionResource::setContext(utility::string_t value)
{
    m_Context = value;
    m_ContextIsSet = true;
}
bool DispositionResource::contextIsSet() const
{
    return m_ContextIsSet;
}

void DispositionResource::unsetContext()
{
    m_ContextIsSet = false;
}

utility::string_t DispositionResource::getContextId() const
{
    return m_Context_id;
}


void DispositionResource::setContextId(utility::string_t value)
{
    m_Context_id = value;
    m_Context_idIsSet = true;
}
bool DispositionResource::contextIdIsSet() const
{
    return m_Context_idIsSet;
}

void DispositionResource::unsetContext_id()
{
    m_Context_idIsSet = false;
}

int64_t DispositionResource::getCreatedDate() const
{
    return m_Created_date;
}


void DispositionResource::setCreatedDate(int64_t value)
{
    m_Created_date = value;
    m_Created_dateIsSet = true;
}
bool DispositionResource::createdDateIsSet() const
{
    return m_Created_dateIsSet;
}

void DispositionResource::unsetCreated_date()
{
    m_Created_dateIsSet = false;
}

int64_t DispositionResource::getId() const
{
    return m_Id;
}


void DispositionResource::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool DispositionResource::idIsSet() const
{
    return m_IdIsSet;
}

void DispositionResource::unsetId()
{
    m_IdIsSet = false;
}

utility::string_t DispositionResource::getName() const
{
    return m_Name;
}


void DispositionResource::setName(utility::string_t value)
{
    m_Name = value;
    
}
std::shared_ptr<SimpleUserResource> DispositionResource::getUser() const
{
    return m_User;
}


void DispositionResource::setUser(std::shared_ptr<SimpleUserResource> value)
{
    m_User = value;
    m_UserIsSet = true;
}
bool DispositionResource::userIsSet() const
{
    return m_UserIsSet;
}

void DispositionResource::unsetUser()
{
    m_UserIsSet = false;
}

}
}
}
}

