/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.2.3.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Batch.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

Batch::Batch()
{
    m_Timeout = 0;
}

Batch::~Batch()
{
}

void Batch::validate()
{
    // TODO: implement validation
}

web::json::value Batch::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Batch )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[U("batch")] = web::json::value::array(jsonArray);
    }
    val[U("timeout")] = ModelBase::toJson(m_Timeout);

    return val;
}

void Batch::fromJson(web::json::value& val)
{
    {
        m_Batch.clear();
        std::vector<web::json::value> jsonArray;
        for( auto& item : val[U("batch")].as_array() )
        {
            if(item.is_null())
            {
                m_Batch.push_back( std::shared_ptr<BatchRequest>(nullptr) );
            }
            else
            {
                std::shared_ptr<BatchRequest> newItem(new BatchRequest());
                newItem->fromJson(item);
                m_Batch.push_back( newItem );
            }
        }
    }
    setTimeout(ModelBase::int32_tFromJson(val[U("timeout")]));
}

void Batch::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Batch )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + U("batch"), web::json::value::array(jsonArray), U("application/json")));
            }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("timeout"), m_Timeout));
}

void Batch::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        m_Batch.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("batch"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Batch.push_back( std::shared_ptr<BatchRequest>(nullptr) );
            }
            else
            {
                std::shared_ptr<BatchRequest> newItem(new BatchRequest());
                newItem->fromJson(item);
                m_Batch.push_back( newItem );
            }
        }
    }
    setTimeout(ModelBase::int32_tFromHttpContent(multipart->getContent(U("timeout"))));
}

std::vector<std::shared_ptr<BatchRequest>>& Batch::getBatch()
{
    return m_Batch;
}

void Batch::setBatch(std::vector<std::shared_ptr<BatchRequest>> value)
{
    m_Batch = value;
    
}
int32_t Batch::getTimeout() const
{
    return m_Timeout;
}


void Batch::setTimeout(int32_t value)
{
    m_Timeout = value;
    
}
}
}
}
}

