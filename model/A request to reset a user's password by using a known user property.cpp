/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "A request to reset a user&#39;s password by using a known user property.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

A request to reset a user&#39;s password by using a known user property::A request to reset a user&#39;s password by using a known user property()
{
    m_Email = U("");
    m_EmailIsSet = false;
    m_Mobile_number = U("");
    m_Mobile_numberIsSet = false;
    m_Username = U("");
    m_UsernameIsSet = false;
    
}

A request to reset a user&#39;s password by using a known user property::~A request to reset a user&#39;s password by using a known user property()
{
}

void A request to reset a user&#39;s password by using a known user property::validate()
{
    // TODO: implement validation
}

web::json::value A request to reset a user&#39;s password by using a known user property::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_EmailIsSet)
    {
        val[U("email")] = ModelBase::toJson(m_Email);
    }
    if(m_Mobile_numberIsSet)
    {
        val[U("mobile_number")] = ModelBase::toJson(m_Mobile_number);
    }
    if(m_UsernameIsSet)
    {
        val[U("username")] = ModelBase::toJson(m_Username);
    }
    

    return val;
}

void A request to reset a user&#39;s password by using a known user property::fromJson(web::json::value& val)
{
    if(val.has_field(U("email")))
    {
        setEmail(ModelBase::stringFromJson(val[U("email")]));
        
    }
    if(val.has_field(U("mobile_number")))
    {
        setMobileNumber(ModelBase::stringFromJson(val[U("mobile_number")]));
        
    }
    if(val.has_field(U("username")))
    {
        setUsername(ModelBase::stringFromJson(val[U("username")]));
        
    }
    
}

void A request to reset a user&#39;s password by using a known user property::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("email"), m_Email));
        
    }
    if(m_Mobile_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("mobile_number"), m_Mobile_number));
        
    }
    if(m_UsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("username"), m_Username));
        
    }
    
}

void A request to reset a user&#39;s password by using a known user property::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("email")))
    {
        setEmail(ModelBase::stringFromHttpContent(multipart->getContent(U("email"))));
        
    }
    if(multipart->hasContent(U("mobile_number")))
    {
        setMobileNumber(ModelBase::stringFromHttpContent(multipart->getContent(U("mobile_number"))));
        
    }
    if(multipart->hasContent(U("username")))
    {
        setUsername(ModelBase::stringFromHttpContent(multipart->getContent(U("username"))));
        
    }
    
}


utility::string_t A request to reset a user&#39;s password by using a known user property::getEmail() const
{
    return m_Email;
}
void A request to reset a user&#39;s password by using a known user property::setEmail(utility::string_t value)
{
    m_Email = value;
    m_EmailIsSet = true;
}
bool A request to reset a user&#39;s password by using a known user property::emailIsSet() const
{
    return m_EmailIsSet;
}
void A request to reset a user&#39;s password by using a known user property::unsetEmail()
{
    m_EmailIsSet = false;
}
utility::string_t A request to reset a user&#39;s password by using a known user property::getMobileNumber() const
{
    return m_Mobile_number;
}
void A request to reset a user&#39;s password by using a known user property::setMobileNumber(utility::string_t value)
{
    m_Mobile_number = value;
    m_Mobile_numberIsSet = true;
}
bool A request to reset a user&#39;s password by using a known user property::mobile_numberIsSet() const
{
    return m_Mobile_numberIsSet;
}
void A request to reset a user&#39;s password by using a known user property::unsetMobile_number()
{
    m_Mobile_numberIsSet = false;
}
utility::string_t A request to reset a user&#39;s password by using a known user property::getUsername() const
{
    return m_Username;
}
void A request to reset a user&#39;s password by using a known user property::setUsername(utility::string_t value)
{
    m_Username = value;
    m_UsernameIsSet = true;
}
bool A request to reset a user&#39;s password by using a known user property::usernameIsSet() const
{
    return m_UsernameIsSet;
}
void A request to reset a user&#39;s password by using a known user property::unsetUsername()
{
    m_UsernameIsSet = false;
}

}
}
}
}

