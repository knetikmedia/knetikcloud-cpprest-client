/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "NewCustomerEvent.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

NewCustomerEvent::NewCustomerEvent()
{
    m_Client = U("");
    m_ClientIsSet = false;
    m_Customer = U("");
    m_CustomerIsSet = false;
    m_Do_not_broadcast = false;
    m_Do_not_broadcastIsSet = false;
    m_Section = U("");
    m_SectionIsSet = false;
    m_SourceIsSet = false;
    m_Specifics = U("");
    m_SpecificsIsSet = false;
    m_Synchronous = false;
    m_SynchronousIsSet = false;
    m_Timestamp = 0;
    m_TimestampIsSet = false;
    m_Type = U("");
    m_Customer_configIsSet = false;
    
}

NewCustomerEvent::~NewCustomerEvent()
{
}

void NewCustomerEvent::validate()
{
    // TODO: implement validation
}

web::json::value NewCustomerEvent::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ClientIsSet)
    {
        val[U("client")] = ModelBase::toJson(m_Client);
    }
    if(m_CustomerIsSet)
    {
        val[U("customer")] = ModelBase::toJson(m_Customer);
    }
    if(m_Do_not_broadcastIsSet)
    {
        val[U("do_not_broadcast")] = ModelBase::toJson(m_Do_not_broadcast);
    }
    if(m_SectionIsSet)
    {
        val[U("section")] = ModelBase::toJson(m_Section);
    }
    if(m_SourceIsSet)
    {
        val[U("source")] = ModelBase::toJson(m_Source);
    }
    if(m_SpecificsIsSet)
    {
        val[U("specifics")] = ModelBase::toJson(m_Specifics);
    }
    if(m_SynchronousIsSet)
    {
        val[U("synchronous")] = ModelBase::toJson(m_Synchronous);
    }
    if(m_TimestampIsSet)
    {
        val[U("timestamp")] = ModelBase::toJson(m_Timestamp);
    }
    val[U("type")] = ModelBase::toJson(m_Type);
    if(m_Customer_configIsSet)
    {
        val[U("customer_config")] = ModelBase::toJson(m_Customer_config);
    }
    

    return val;
}

void NewCustomerEvent::fromJson(web::json::value& val)
{
    if(val.has_field(U("client")))
    {
        setClient(ModelBase::stringFromJson(val[U("client")]));
        
    }
    if(val.has_field(U("customer")))
    {
        setCustomer(ModelBase::stringFromJson(val[U("customer")]));
        
    }
    if(val.has_field(U("do_not_broadcast")))
    {
        setDoNotBroadcast(ModelBase::boolFromJson(val[U("do_not_broadcast")]));
    }
    if(val.has_field(U("section")))
    {
        setSection(ModelBase::stringFromJson(val[U("section")]));
        
    }
    if(val.has_field(U("source")))
    {
        if(!val[U("source")].is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(val[U("source")]);
            setSource( newItem );
        }
        
    }
    if(val.has_field(U("specifics")))
    {
        setSpecifics(ModelBase::stringFromJson(val[U("specifics")]));
        
    }
    if(val.has_field(U("synchronous")))
    {
        setSynchronous(ModelBase::boolFromJson(val[U("synchronous")]));
    }
    if(val.has_field(U("timestamp")))
    {
        setTimestamp(ModelBase::int64_tFromJson(val[U("timestamp")]));
    }
    setType(ModelBase::stringFromJson(val[U("type")]));
    if(val.has_field(U("customer_config")))
    {
        if(!val[U("customer_config")].is_null())
        {
            std::shared_ptr<CustomerConfig> newItem(new CustomerConfig());
            newItem->fromJson(val[U("customer_config")]);
            setCustomerConfig( newItem );
        }
        
    }
    
}

void NewCustomerEvent::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_ClientIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("client"), m_Client));
        
    }
    if(m_CustomerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("customer"), m_Customer));
        
    }
    if(m_Do_not_broadcastIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("do_not_broadcast"), m_Do_not_broadcast));
    }
    if(m_SectionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("section"), m_Section));
        
    }
    if(m_SourceIsSet)
    {
        if (m_Source.get())
        {
            m_Source->toMultipart(multipart, U("source."));
        }
        
    }
    if(m_SpecificsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("specifics"), m_Specifics));
        
    }
    if(m_SynchronousIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("synchronous"), m_Synchronous));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("timestamp"), m_Timestamp));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("type"), m_Type));
    if(m_Customer_configIsSet)
    {
        if (m_Customer_config.get())
        {
            m_Customer_config->toMultipart(multipart, U("customer_config."));
        }
        
    }
    
}

void NewCustomerEvent::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("client")))
    {
        setClient(ModelBase::stringFromHttpContent(multipart->getContent(U("client"))));
        
    }
    if(multipart->hasContent(U("customer")))
    {
        setCustomer(ModelBase::stringFromHttpContent(multipart->getContent(U("customer"))));
        
    }
    if(multipart->hasContent(U("do_not_broadcast")))
    {
        setDoNotBroadcast(ModelBase::boolFromHttpContent(multipart->getContent(U("do_not_broadcast"))));
    }
    if(multipart->hasContent(U("section")))
    {
        setSection(ModelBase::stringFromHttpContent(multipart->getContent(U("section"))));
        
    }
    if(multipart->hasContent(U("source")))
    {
        if(multipart->hasContent(U("source")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, U("source."));
            setSource( newItem );
        }
        
    }
    if(multipart->hasContent(U("specifics")))
    {
        setSpecifics(ModelBase::stringFromHttpContent(multipart->getContent(U("specifics"))));
        
    }
    if(multipart->hasContent(U("synchronous")))
    {
        setSynchronous(ModelBase::boolFromHttpContent(multipart->getContent(U("synchronous"))));
    }
    if(multipart->hasContent(U("timestamp")))
    {
        setTimestamp(ModelBase::int64_tFromHttpContent(multipart->getContent(U("timestamp"))));
    }
    setType(ModelBase::stringFromHttpContent(multipart->getContent(U("type"))));
    if(multipart->hasContent(U("customer_config")))
    {
        if(multipart->hasContent(U("customer_config")))
        {
            std::shared_ptr<CustomerConfig> newItem(new CustomerConfig());
            newItem->fromMultiPart(multipart, U("customer_config."));
            setCustomerConfig( newItem );
        }
        
    }
    
}


utility::string_t NewCustomerEvent::getClient() const
{
    return m_Client;
}
void NewCustomerEvent::setClient(utility::string_t value)
{
    m_Client = value;
    m_ClientIsSet = true;
}
bool NewCustomerEvent::clientIsSet() const
{
    return m_ClientIsSet;
}
void NewCustomerEvent::unsetClient()
{
    m_ClientIsSet = false;
}
utility::string_t NewCustomerEvent::getCustomer() const
{
    return m_Customer;
}
void NewCustomerEvent::setCustomer(utility::string_t value)
{
    m_Customer = value;
    m_CustomerIsSet = true;
}
bool NewCustomerEvent::customerIsSet() const
{
    return m_CustomerIsSet;
}
void NewCustomerEvent::unsetCustomer()
{
    m_CustomerIsSet = false;
}
bool NewCustomerEvent::getDoNotBroadcast() const
{
    return m_Do_not_broadcast;
}
void NewCustomerEvent::setDoNotBroadcast(bool value)
{
    m_Do_not_broadcast = value;
    m_Do_not_broadcastIsSet = true;
}
bool NewCustomerEvent::do_not_broadcastIsSet() const
{
    return m_Do_not_broadcastIsSet;
}
void NewCustomerEvent::unsetDo_not_broadcast()
{
    m_Do_not_broadcastIsSet = false;
}
utility::string_t NewCustomerEvent::getSection() const
{
    return m_Section;
}
void NewCustomerEvent::setSection(utility::string_t value)
{
    m_Section = value;
    m_SectionIsSet = true;
}
bool NewCustomerEvent::sectionIsSet() const
{
    return m_SectionIsSet;
}
void NewCustomerEvent::unsetSection()
{
    m_SectionIsSet = false;
}
std::shared_ptr<Object> NewCustomerEvent::getSource() const
{
    return m_Source;
}
void NewCustomerEvent::setSource(std::shared_ptr<Object> value)
{
    m_Source = value;
    m_SourceIsSet = true;
}
bool NewCustomerEvent::sourceIsSet() const
{
    return m_SourceIsSet;
}
void NewCustomerEvent::unsetSource()
{
    m_SourceIsSet = false;
}
utility::string_t NewCustomerEvent::getSpecifics() const
{
    return m_Specifics;
}
void NewCustomerEvent::setSpecifics(utility::string_t value)
{
    m_Specifics = value;
    m_SpecificsIsSet = true;
}
bool NewCustomerEvent::specificsIsSet() const
{
    return m_SpecificsIsSet;
}
void NewCustomerEvent::unsetSpecifics()
{
    m_SpecificsIsSet = false;
}
bool NewCustomerEvent::getSynchronous() const
{
    return m_Synchronous;
}
void NewCustomerEvent::setSynchronous(bool value)
{
    m_Synchronous = value;
    m_SynchronousIsSet = true;
}
bool NewCustomerEvent::synchronousIsSet() const
{
    return m_SynchronousIsSet;
}
void NewCustomerEvent::unsetSynchronous()
{
    m_SynchronousIsSet = false;
}
int64_t NewCustomerEvent::getTimestamp() const
{
    return m_Timestamp;
}
void NewCustomerEvent::setTimestamp(int64_t value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}
bool NewCustomerEvent::timestampIsSet() const
{
    return m_TimestampIsSet;
}
void NewCustomerEvent::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
utility::string_t NewCustomerEvent::getType() const
{
    return m_Type;
}
void NewCustomerEvent::setType(utility::string_t value)
{
    m_Type = value;
    
}
std::shared_ptr<CustomerConfig> NewCustomerEvent::getCustomerConfig() const
{
    return m_Customer_config;
}
void NewCustomerEvent::setCustomerConfig(std::shared_ptr<CustomerConfig> value)
{
    m_Customer_config = value;
    m_Customer_configIsSet = true;
}
bool NewCustomerEvent::customer_configIsSet() const
{
    return m_Customer_configIsSet;
}
void NewCustomerEvent::unsetCustomer_config()
{
    m_Customer_configIsSet = false;
}

}
}
}
}

