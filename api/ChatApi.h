/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * ChatApi.h
 *
 * 
 */

#ifndef ChatApi_H_
#define ChatApi_H_


#include "ApiClient.h"

#include "ChatBlacklistResource.h"
#include "ChatMessageResource.h"
#include "PageResource«ChatMessageResource».h"
#include "PageResource«ChatUserThreadResource».h"
#include "Result.h"
#include <cpprest/details/basic_types.h>

namespace com {
namespace knetikcloud {
namespace client {
namespace api {

using namespace com::knetikcloud::client::model;

class  ChatApi
{
public:
    ChatApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~ChatApi();
    /// <summary>
    /// Acknowledge number of messages in a thread
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; owner
    /// </remarks>
    /// <param name="id">The thread id</param>/// <param name="readCount">The amount of messages read (optional)</param>
    pplx::task<void> acknowledgeChatMessage(utility::string_t id, int32_t readCount);
    /// <summary>
    /// Add a user to a chat message blacklist
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; CHAT_ADMIN or owner
    /// </remarks>
    /// <param name="blacklistedUserId">The user id to blacklist</param>/// <param name="id">The user id or &#39;me&#39;</param>
    pplx::task<void> addChatMessageBlacklist(int32_t blacklistedUserId, utility::string_t id);
    /// <summary>
    /// Delete a message
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; CHAT_ADMIN or owner
    /// </remarks>
    /// <param name="id">The message id</param>
    pplx::task<void> deleteChatMessage(utility::string_t id);
    /// <summary>
    /// Edit your message
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; owner
    /// </remarks>
    /// <param name="id">The message id</param>/// <param name="chatMessageResource">The chat message resource (optional)</param>
    pplx::task<void> editChatMessage(utility::string_t id, std::shared_ptr<ChatMessageResource> chatMessageResource);
    /// <summary>
    /// Get a message
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; CHAT_ADMIN or owner
    /// </remarks>
    /// <param name="id">The message id</param>
    pplx::task<std::shared_ptr<ChatMessageResource>> getChatMessage(utility::string_t id);
    /// <summary>
    /// Get a list of blocked users for chat messaging
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; CHAT_ADMIN or owner
    /// </remarks>
    /// <param name="id">The user id or &#39;me&#39;</param>
    pplx::task<std::vector<std::shared_ptr<ChatBlacklistResource>>> getChatMessageBlacklist(utility::string_t id);
    /// <summary>
    /// List your threads
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; owner
    /// </remarks>
    /// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)</param>
    pplx::task<std::shared_ptr<PageResource«ChatUserThreadResource»>> getChatThreads(int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// List messages with a user
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; owner
    /// </remarks>
    /// <param name="id">The user id</param>/// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)</param>
    pplx::task<std::shared_ptr<PageResource«ChatMessageResource»>> getDirectMessages(int32_t id, int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// List messages in a thread
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; CHAT_ADMIN or owner
    /// </remarks>
    /// <param name="id">The thread id</param>/// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)</param>
    pplx::task<std::shared_ptr<PageResource«ChatMessageResource»>> getThreadMessages(utility::string_t id, int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// List messages in a topic
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; CHAT_ADMIN or owner
    /// </remarks>
    /// <param name="id">The topic id</param>/// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned (optional, default to 1)</param>/// <param name="order">A comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional)</param>
    pplx::task<std::shared_ptr<PageResource«ChatMessageResource»>> getTopicMessages(utility::string_t id, int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// Remove a user from a blacklist
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; CHAT_ADMIN or owner
    /// </remarks>
    /// <param name="blacklistedUserId">The user id to blacklist</param>/// <param name="id">The user id or &#39;me&#39;</param>
    pplx::task<void> removeChatBlacklist(int32_t blacklistedUserId, utility::string_t id);
    /// <summary>
    /// Send a message
    /// </summary>
    /// <remarks>
    /// &lt;b&gt;Permissions Needed:&lt;/b&gt; ANY
    /// </remarks>
    /// <param name="chatMessageResource">The chat message resource (optional)</param>
    pplx::task<std::shared_ptr<ChatMessageResource>> sendChatMessage(std::shared_ptr<ChatMessageResource> chatMessageResource);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ChatApi_H_ */

