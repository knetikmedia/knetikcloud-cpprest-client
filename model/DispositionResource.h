/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * DispositionResource.h
 *
 * 
 */

#ifndef DispositionResource_H_
#define DispositionResource_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "SimpleUserResource.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  DispositionResource
    : public ModelBase
{
public:
    DispositionResource();
    virtual ~DispositionResource();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// DispositionResource members

    /// <summary>
    /// The context of that resource. Required when passed to /dispositions rather than context specific endpoint
    /// </summary>
    utility::string_t getContext() const;
    bool contextIsSet() const;
    void unsetContext();
    void setContext(utility::string_t value);
    /// <summary>
    /// The context_id of that resource. Required when passed to /dispositions rather than context specific endpoint
    /// </summary>
    utility::string_t getContextId() const;
    bool contextIdIsSet() const;
    void unsetContext_id();
    void setContextId(utility::string_t value);
    /// <summary>
    /// The date/time this resource was created in seconds since unix epoch
    /// </summary>
    int64_t getCreatedDate() const;
    bool createdDateIsSet() const;
    void unsetCreated_date();
    void setCreatedDate(int64_t value);
    /// <summary>
    /// The unique ID for that resource
    /// </summary>
    int64_t getId() const;
    bool idIsSet() const;
    void unsetId();
    void setId(int64_t value);
    /// <summary>
    /// The name of the disposition, 1-20 characters. (ex: like/dislike/favorite, etc)
    /// </summary>
    utility::string_t getName() const;
        void setName(utility::string_t value);
    /// <summary>
    /// The user
    /// </summary>
    std::shared_ptr<SimpleUserResource> getUser() const;
    bool userIsSet() const;
    void unsetUser();
    void setUser(std::shared_ptr<SimpleUserResource> value);

protected:
    utility::string_t m_Context;
    bool m_ContextIsSet;
    utility::string_t m_Context_id;
    bool m_Context_idIsSet;
    int64_t m_Created_date;
    bool m_Created_dateIsSet;
    int64_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Name;
        std::shared_ptr<SimpleUserResource> m_User;
    bool m_UserIsSet;
};

}
}
}
}

#endif /* DispositionResource_H_ */
