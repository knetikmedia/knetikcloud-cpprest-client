/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "TopicSubscriber.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

TopicSubscriber::TopicSubscriber()
{
    m_Disabled = false;
    m_DisabledIsSet = false;
    m_Email = U("");
    m_EmailIsSet = false;
    m_Join_date = 0L;
    m_Join_dateIsSet = false;
    m_Mobile_number = U("");
    m_Mobile_numberIsSet = false;
    m_Topic_id = U("");
    m_Topic_idIsSet = false;
    m_Topic_subscriber_mapIsSet = false;
    m_User_id = 0;
    m_User_idIsSet = false;
    m_Username = U("");
    m_UsernameIsSet = false;
}

TopicSubscriber::~TopicSubscriber()
{
}

void TopicSubscriber::validate()
{
    // TODO: implement validation
}

web::json::value TopicSubscriber::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_DisabledIsSet)
    {
        val[U("disabled")] = ModelBase::toJson(m_Disabled);
    }
    if(m_EmailIsSet)
    {
        val[U("email")] = ModelBase::toJson(m_Email);
    }
    if(m_Join_dateIsSet)
    {
        val[U("join_date")] = ModelBase::toJson(m_Join_date);
    }
    if(m_Mobile_numberIsSet)
    {
        val[U("mobile_number")] = ModelBase::toJson(m_Mobile_number);
    }
    if(m_Topic_idIsSet)
    {
        val[U("topic_id")] = ModelBase::toJson(m_Topic_id);
    }
    if(m_Topic_subscriber_mapIsSet)
    {
        val[U("topic_subscriber_map")] = ModelBase::toJson(m_Topic_subscriber_map);
    }
    if(m_User_idIsSet)
    {
        val[U("user_id")] = ModelBase::toJson(m_User_id);
    }
    if(m_UsernameIsSet)
    {
        val[U("username")] = ModelBase::toJson(m_Username);
    }

    return val;
}

void TopicSubscriber::fromJson(web::json::value& val)
{
    if(val.has_field(U("disabled")))
    {
        setDisabled(ModelBase::boolFromJson(val[U("disabled")]));
    }
    if(val.has_field(U("email")))
    {
        setEmail(ModelBase::stringFromJson(val[U("email")]));
    }
    if(val.has_field(U("join_date")))
    {
        setJoinDate(ModelBase::int64_tFromJson(val[U("join_date")]));
    }
    if(val.has_field(U("mobile_number")))
    {
        setMobileNumber(ModelBase::stringFromJson(val[U("mobile_number")]));
    }
    if(val.has_field(U("topic_id")))
    {
        setTopicId(ModelBase::stringFromJson(val[U("topic_id")]));
    }
    if(val.has_field(U("topic_subscriber_map")))
    {
        if(!val[U("topic_subscriber_map")].is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(val[U("topic_subscriber_map")]);
            setTopicSubscriberMap( newItem );
        }
    }
    if(val.has_field(U("user_id")))
    {
        setUserId(ModelBase::int32_tFromJson(val[U("user_id")]));
    }
    if(val.has_field(U("username")))
    {
        setUsername(ModelBase::stringFromJson(val[U("username")]));
    }
}

void TopicSubscriber::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_DisabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("disabled"), m_Disabled));
    }
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("email"), m_Email));
        
    }
    if(m_Join_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("join_date"), m_Join_date));
    }
    if(m_Mobile_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("mobile_number"), m_Mobile_number));
        
    }
    if(m_Topic_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("topic_id"), m_Topic_id));
        
    }
    if(m_Topic_subscriber_mapIsSet)
    {
        if (m_Topic_subscriber_map.get())
        {
            m_Topic_subscriber_map->toMultipart(multipart, U("topic_subscriber_map."));
        }
        
    }
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("user_id"), m_User_id));
    }
    if(m_UsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("username"), m_Username));
        
    }
}

void TopicSubscriber::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("disabled")))
    {
        setDisabled(ModelBase::boolFromHttpContent(multipart->getContent(U("disabled"))));
    }
    if(multipart->hasContent(U("email")))
    {
        setEmail(ModelBase::stringFromHttpContent(multipart->getContent(U("email"))));
    }
    if(multipart->hasContent(U("join_date")))
    {
        setJoinDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("join_date"))));
    }
    if(multipart->hasContent(U("mobile_number")))
    {
        setMobileNumber(ModelBase::stringFromHttpContent(multipart->getContent(U("mobile_number"))));
    }
    if(multipart->hasContent(U("topic_id")))
    {
        setTopicId(ModelBase::stringFromHttpContent(multipart->getContent(U("topic_id"))));
    }
    if(multipart->hasContent(U("topic_subscriber_map")))
    {
        if(multipart->hasContent(U("topic_subscriber_map")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, U("topic_subscriber_map."));
            setTopicSubscriberMap( newItem );
        }
    }
    if(multipart->hasContent(U("user_id")))
    {
        setUserId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("user_id"))));
    }
    if(multipart->hasContent(U("username")))
    {
        setUsername(ModelBase::stringFromHttpContent(multipart->getContent(U("username"))));
    }
}

bool TopicSubscriber::getDisabled() const
{
    return m_Disabled;
}


void TopicSubscriber::setDisabled(bool value)
{
    m_Disabled = value;
    m_DisabledIsSet = true;
}
bool TopicSubscriber::disabledIsSet() const
{
    return m_DisabledIsSet;
}

void TopicSubscriber::unsetDisabled()
{
    m_DisabledIsSet = false;
}

utility::string_t TopicSubscriber::getEmail() const
{
    return m_Email;
}


void TopicSubscriber::setEmail(utility::string_t value)
{
    m_Email = value;
    m_EmailIsSet = true;
}
bool TopicSubscriber::emailIsSet() const
{
    return m_EmailIsSet;
}

void TopicSubscriber::unsetEmail()
{
    m_EmailIsSet = false;
}

int64_t TopicSubscriber::getJoinDate() const
{
    return m_Join_date;
}


void TopicSubscriber::setJoinDate(int64_t value)
{
    m_Join_date = value;
    m_Join_dateIsSet = true;
}
bool TopicSubscriber::joinDateIsSet() const
{
    return m_Join_dateIsSet;
}

void TopicSubscriber::unsetJoin_date()
{
    m_Join_dateIsSet = false;
}

utility::string_t TopicSubscriber::getMobileNumber() const
{
    return m_Mobile_number;
}


void TopicSubscriber::setMobileNumber(utility::string_t value)
{
    m_Mobile_number = value;
    m_Mobile_numberIsSet = true;
}
bool TopicSubscriber::mobileNumberIsSet() const
{
    return m_Mobile_numberIsSet;
}

void TopicSubscriber::unsetMobile_number()
{
    m_Mobile_numberIsSet = false;
}

utility::string_t TopicSubscriber::getTopicId() const
{
    return m_Topic_id;
}


void TopicSubscriber::setTopicId(utility::string_t value)
{
    m_Topic_id = value;
    m_Topic_idIsSet = true;
}
bool TopicSubscriber::topicIdIsSet() const
{
    return m_Topic_idIsSet;
}

void TopicSubscriber::unsetTopic_id()
{
    m_Topic_idIsSet = false;
}

std::shared_ptr<Object> TopicSubscriber::getTopicSubscriberMap() const
{
    return m_Topic_subscriber_map;
}


void TopicSubscriber::setTopicSubscriberMap(std::shared_ptr<Object> value)
{
    m_Topic_subscriber_map = value;
    m_Topic_subscriber_mapIsSet = true;
}
bool TopicSubscriber::topicSubscriberMapIsSet() const
{
    return m_Topic_subscriber_mapIsSet;
}

void TopicSubscriber::unsetTopic_subscriber_map()
{
    m_Topic_subscriber_mapIsSet = false;
}

int32_t TopicSubscriber::getUserId() const
{
    return m_User_id;
}


void TopicSubscriber::setUserId(int32_t value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}
bool TopicSubscriber::userIdIsSet() const
{
    return m_User_idIsSet;
}

void TopicSubscriber::unsetUser_id()
{
    m_User_idIsSet = false;
}

utility::string_t TopicSubscriber::getUsername() const
{
    return m_Username;
}


void TopicSubscriber::setUsername(utility::string_t value)
{
    m_Username = value;
    m_UsernameIsSet = true;
}
bool TopicSubscriber::usernameIsSet() const
{
    return m_UsernameIsSet;
}

void TopicSubscriber::unsetUsername()
{
    m_UsernameIsSet = false;
}

}
}
}
}

