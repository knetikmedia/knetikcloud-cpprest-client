/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "UserBaseResource.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

UserBaseResource::UserBaseResource()
{
    m_Avatar_url = U("");
    m_Avatar_urlIsSet = false;
    m_Display_name = U("");
    m_Display_nameIsSet = false;
    m_Email = U("");
    m_Fullname = U("");
    m_FullnameIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_Username = U("");
    
}

UserBaseResource::~UserBaseResource()
{
}

void UserBaseResource::validate()
{
    // TODO: implement validation
}

web::json::value UserBaseResource::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Avatar_urlIsSet)
    {
        val[U("avatar_url")] = ModelBase::toJson(m_Avatar_url);
    }
    if(m_Display_nameIsSet)
    {
        val[U("display_name")] = ModelBase::toJson(m_Display_name);
    }
    val[U("email")] = ModelBase::toJson(m_Email);
    if(m_FullnameIsSet)
    {
        val[U("fullname")] = ModelBase::toJson(m_Fullname);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    val[U("username")] = ModelBase::toJson(m_Username);
    

    return val;
}

void UserBaseResource::fromJson(web::json::value& val)
{
    if(val.has_field(U("avatar_url")))
    {
        setAvatarUrl(ModelBase::stringFromJson(val[U("avatar_url")]));
        
    }
    if(val.has_field(U("display_name")))
    {
        setDisplayName(ModelBase::stringFromJson(val[U("display_name")]));
        
    }
    setEmail(ModelBase::stringFromJson(val[U("email")]));
    if(val.has_field(U("fullname")))
    {
        setFullname(ModelBase::stringFromJson(val[U("fullname")]));
        
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int32_tFromJson(val[U("id")]));
    }
    setUsername(ModelBase::stringFromJson(val[U("username")]));
    
}

void UserBaseResource::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Avatar_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("avatar_url"), m_Avatar_url));
        
    }
    if(m_Display_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("display_name"), m_Display_name));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("email"), m_Email));
    if(m_FullnameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("fullname"), m_Fullname));
        
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("username"), m_Username));
    
}

void UserBaseResource::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("avatar_url")))
    {
        setAvatarUrl(ModelBase::stringFromHttpContent(multipart->getContent(U("avatar_url"))));
        
    }
    if(multipart->hasContent(U("display_name")))
    {
        setDisplayName(ModelBase::stringFromHttpContent(multipart->getContent(U("display_name"))));
        
    }
    setEmail(ModelBase::stringFromHttpContent(multipart->getContent(U("email"))));
    if(multipart->hasContent(U("fullname")))
    {
        setFullname(ModelBase::stringFromHttpContent(multipart->getContent(U("fullname"))));
        
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("id"))));
    }
    setUsername(ModelBase::stringFromHttpContent(multipart->getContent(U("username"))));
    
}


utility::string_t UserBaseResource::getAvatarUrl() const
{
    return m_Avatar_url;
}
void UserBaseResource::setAvatarUrl(utility::string_t value)
{
    m_Avatar_url = value;
    m_Avatar_urlIsSet = true;
}
bool UserBaseResource::avatar_urlIsSet() const
{
    return m_Avatar_urlIsSet;
}
void UserBaseResource::unsetAvatar_url()
{
    m_Avatar_urlIsSet = false;
}
utility::string_t UserBaseResource::getDisplayName() const
{
    return m_Display_name;
}
void UserBaseResource::setDisplayName(utility::string_t value)
{
    m_Display_name = value;
    m_Display_nameIsSet = true;
}
bool UserBaseResource::display_nameIsSet() const
{
    return m_Display_nameIsSet;
}
void UserBaseResource::unsetDisplay_name()
{
    m_Display_nameIsSet = false;
}
utility::string_t UserBaseResource::getEmail() const
{
    return m_Email;
}
void UserBaseResource::setEmail(utility::string_t value)
{
    m_Email = value;
    
}
utility::string_t UserBaseResource::getFullname() const
{
    return m_Fullname;
}
void UserBaseResource::setFullname(utility::string_t value)
{
    m_Fullname = value;
    m_FullnameIsSet = true;
}
bool UserBaseResource::fullnameIsSet() const
{
    return m_FullnameIsSet;
}
void UserBaseResource::unsetFullname()
{
    m_FullnameIsSet = false;
}
int32_t UserBaseResource::getId() const
{
    return m_Id;
}
void UserBaseResource::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool UserBaseResource::idIsSet() const
{
    return m_IdIsSet;
}
void UserBaseResource::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t UserBaseResource::getUsername() const
{
    return m_Username;
}
void UserBaseResource::setUsername(utility::string_t value)
{
    m_Username = value;
    
}

}
}
}
}

