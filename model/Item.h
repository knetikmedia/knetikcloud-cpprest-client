/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Item.h
 *
 * 
 */

#ifndef Item_H_
#define Item_H_


#include "ModelBase.h"

#include "Behavior.h"
#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>
#include "Property.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Item
    : public ModelBase
{
public:
    Item();
    virtual ~Item();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Item members

    /// <summary>
    /// A map of additional properties, keyed on the property name.  Must match the names and types defined in the template for this item type, or be an extra not from the template
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<Property>>& getAdditionalProperties();
    bool additional_propertiesIsSet() const;
    void unsetAdditional_properties();
    /// <summary>
    /// The behaviors linked to the item, describing various options and interactions. May not be included in item lists
    /// </summary>
    std::vector<std::shared_ptr<Behavior>>& getBehaviors();
    bool behaviorsIsSet() const;
    void unsetBehaviors();
    /// <summary>
    /// A category for filtering items
    /// </summary>
    utility::string_t getCategory() const;
    void setCategory(utility::string_t value);
    bool categoryIsSet() const;
    void unsetCategory();
    /// <summary>
    /// The date the item was created, unix timestamp in seconds
    /// </summary>
    int64_t getCreatedDate() const;
    void setCreatedDate(int64_t value);
    bool created_dateIsSet() const;
    void unsetCreated_date();
    /// <summary>
    /// The id of the item
    /// </summary>
    int32_t getId() const;
    void setId(int32_t value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// A long description of the item
    /// </summary>
    utility::string_t getLongDescription() const;
    void setLongDescription(utility::string_t value);
    bool long_descriptionIsSet() const;
    void unsetLong_description();
    /// <summary>
    /// The name of the item
    /// </summary>
    utility::string_t getName() const;
    void setName(utility::string_t value);
        /// <summary>
    /// A short description of the item, max 255 chars
    /// </summary>
    utility::string_t getShortDescription() const;
    void setShortDescription(utility::string_t value);
    bool short_descriptionIsSet() const;
    void unsetShort_description();
    /// <summary>
    /// A number to use in sorting items.  Default 500
    /// </summary>
    int32_t getSort() const;
    void setSort(int32_t value);
    bool sortIsSet() const;
    void unsetSort();
    /// <summary>
    /// List of tags used for filtering items
    /// </summary>
    std::vector<utility::string_t>& getTags();
    bool tagsIsSet() const;
    void unsetTags();
    /// <summary>
    /// An item template this item is validated against.  May be null and no validation of additional_properties will be done.  Default &#x3D; null
    /// </summary>
    utility::string_t getTemplate() const;
    void setTemplate(utility::string_t value);
    bool templateIsSet() const;
    void unsetTemplate();
    /// <summary>
    /// The type of the item
    /// </summary>
    utility::string_t getTypeHint() const;
    void setTypeHint(utility::string_t value);
        /// <summary>
    /// The unique key for the item
    /// </summary>
    utility::string_t getUniqueKey() const;
    void setUniqueKey(utility::string_t value);
    bool unique_keyIsSet() const;
    void unsetUnique_key();
    /// <summary>
    /// The date the item was last updated, unix timestamp in seconds
    /// </summary>
    int64_t getUpdatedDate() const;
    void setUpdatedDate(int64_t value);
    bool updated_dateIsSet() const;
    void unsetUpdated_date();

protected:
    std::map<utility::string_t, std::shared_ptr<Property>> m_Additional_properties;
    bool m_Additional_propertiesIsSet;
std::vector<std::shared_ptr<Behavior>> m_Behaviors;
    bool m_BehaviorsIsSet;
utility::string_t m_Category;
    bool m_CategoryIsSet;
int64_t m_Created_date;
    bool m_Created_dateIsSet;
int32_t m_Id;
    bool m_IdIsSet;
utility::string_t m_Long_description;
    bool m_Long_descriptionIsSet;
utility::string_t m_Name;
    utility::string_t m_Short_description;
    bool m_Short_descriptionIsSet;
int32_t m_Sort;
    bool m_SortIsSet;
std::vector<utility::string_t> m_Tags;
    bool m_TagsIsSet;
utility::string_t m_Template;
    bool m_TemplateIsSet;
utility::string_t m_Type_hint;
    utility::string_t m_Unique_key;
    bool m_Unique_keyIsSet;
int64_t m_Updated_date;
    bool m_Updated_dateIsSet;
};

}
}
}
}

#endif /* Item_H_ */
