/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "VideoProperty.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

VideoProperty::VideoProperty()
{
    m_Type = U("");
    m_Crc = U("");
    m_CrcIsSet = false;
    m_Description = U("");
    m_DescriptionIsSet = false;
    m_File_type = U("");
    m_File_typeIsSet = false;
    m_Url = U("");
    m_UrlIsSet = false;
    
}

VideoProperty::~VideoProperty()
{
}

void VideoProperty::validate()
{
    // TODO: implement validation
}

web::json::value VideoProperty::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("type")] = ModelBase::toJson(m_Type);
    if(m_CrcIsSet)
    {
        val[U("crc")] = ModelBase::toJson(m_Crc);
    }
    if(m_DescriptionIsSet)
    {
        val[U("description")] = ModelBase::toJson(m_Description);
    }
    if(m_File_typeIsSet)
    {
        val[U("file_type")] = ModelBase::toJson(m_File_type);
    }
    if(m_UrlIsSet)
    {
        val[U("url")] = ModelBase::toJson(m_Url);
    }
    

    return val;
}

void VideoProperty::fromJson(web::json::value& val)
{
    setType(ModelBase::stringFromJson(val[U("type")]));
    if(val.has_field(U("crc")))
    {
        setCrc(ModelBase::stringFromJson(val[U("crc")]));
        
    }
    if(val.has_field(U("description")))
    {
        setDescription(ModelBase::stringFromJson(val[U("description")]));
        
    }
    if(val.has_field(U("file_type")))
    {
        setFileType(ModelBase::stringFromJson(val[U("file_type")]));
        
    }
    if(val.has_field(U("url")))
    {
        setUrl(ModelBase::stringFromJson(val[U("url")]));
        
    }
    
}

void VideoProperty::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("type"), m_Type));
    if(m_CrcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("crc"), m_Crc));
        
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("description"), m_Description));
        
    }
    if(m_File_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("file_type"), m_File_type));
        
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("url"), m_Url));
        
    }
    
}

void VideoProperty::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setType(ModelBase::stringFromHttpContent(multipart->getContent(U("type"))));
    if(multipart->hasContent(U("crc")))
    {
        setCrc(ModelBase::stringFromHttpContent(multipart->getContent(U("crc"))));
        
    }
    if(multipart->hasContent(U("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("description"))));
        
    }
    if(multipart->hasContent(U("file_type")))
    {
        setFileType(ModelBase::stringFromHttpContent(multipart->getContent(U("file_type"))));
        
    }
    if(multipart->hasContent(U("url")))
    {
        setUrl(ModelBase::stringFromHttpContent(multipart->getContent(U("url"))));
        
    }
    
}


utility::string_t VideoProperty::getType() const
{
    return m_Type;
}
void VideoProperty::setType(utility::string_t value)
{
    m_Type = value;
    
}
utility::string_t VideoProperty::getCrc() const
{
    return m_Crc;
}
void VideoProperty::setCrc(utility::string_t value)
{
    m_Crc = value;
    m_CrcIsSet = true;
}
bool VideoProperty::crcIsSet() const
{
    return m_CrcIsSet;
}
void VideoProperty::unsetCrc()
{
    m_CrcIsSet = false;
}
utility::string_t VideoProperty::getDescription() const
{
    return m_Description;
}
void VideoProperty::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool VideoProperty::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void VideoProperty::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t VideoProperty::getFileType() const
{
    return m_File_type;
}
void VideoProperty::setFileType(utility::string_t value)
{
    m_File_type = value;
    m_File_typeIsSet = true;
}
bool VideoProperty::file_typeIsSet() const
{
    return m_File_typeIsSet;
}
void VideoProperty::unsetFile_type()
{
    m_File_typeIsSet = false;
}
utility::string_t VideoProperty::getUrl() const
{
    return m_Url;
}
void VideoProperty::setUrl(utility::string_t value)
{
    m_Url = value;
    m_UrlIsSet = true;
}
bool VideoProperty::urlIsSet() const
{
    return m_UrlIsSet;
}
void VideoProperty::unsetUrl()
{
    m_UrlIsSet = false;
}

}
}
}
}

