/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Topic.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

Topic::Topic()
{
    m_Created_date = 0L;
    m_Created_dateIsSet = false;
    m_Display_name = U("");
    m_Display_nameIsSet = false;
    m_Id = U("");
    m_IdIsSet = false;
    m_Locked = false;
    m_LockedIsSet = false;
    m_TagsIsSet = false;
    m_Topic_mapIsSet = false;
    m_Updated_date = 0L;
    m_Updated_dateIsSet = false;
    m_User_count = 0;
    m_User_countIsSet = false;
}

Topic::~Topic()
{
}

void Topic::validate()
{
    // TODO: implement validation
}

web::json::value Topic::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Created_dateIsSet)
    {
        val[U("created_date")] = ModelBase::toJson(m_Created_date);
    }
    if(m_Display_nameIsSet)
    {
        val[U("display_name")] = ModelBase::toJson(m_Display_name);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_LockedIsSet)
    {
        val[U("locked")] = ModelBase::toJson(m_Locked);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("tags")] = web::json::value::array(jsonArray);
        }
    }
    if(m_Topic_mapIsSet)
    {
        val[U("topic_map")] = ModelBase::toJson(m_Topic_map);
    }
    if(m_Updated_dateIsSet)
    {
        val[U("updated_date")] = ModelBase::toJson(m_Updated_date);
    }
    if(m_User_countIsSet)
    {
        val[U("user_count")] = ModelBase::toJson(m_User_count);
    }

    return val;
}

void Topic::fromJson(web::json::value& val)
{
    if(val.has_field(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromJson(val[U("created_date")]));
    }
    if(val.has_field(U("display_name")))
    {
        setDisplayName(ModelBase::stringFromJson(val[U("display_name")]));
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::stringFromJson(val[U("id")]));
    }
    if(val.has_field(U("locked")))
    {
        setLocked(ModelBase::boolFromJson(val[U("locked")]));
    }
    {
        m_Tags.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("tags")))
        {
        for( auto& item : val[U("tags")].as_array() )
        {
            m_Tags.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(val.has_field(U("topic_map")))
    {
        if(!val[U("topic_map")].is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(val[U("topic_map")]);
            setTopicMap( newItem );
        }
    }
    if(val.has_field(U("updated_date")))
    {
        setUpdatedDate(ModelBase::int64_tFromJson(val[U("updated_date")]));
    }
    if(val.has_field(U("user_count")))
    {
        setUserCount(ModelBase::int32_tFromJson(val[U("user_count")]));
    }
}

void Topic::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Created_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("created_date"), m_Created_date));
    }
    if(m_Display_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("display_name"), m_Display_name));
        
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
        
    }
    if(m_LockedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("locked"), m_Locked));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Tags )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("tags"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_Topic_mapIsSet)
    {
        if (m_Topic_map.get())
        {
            m_Topic_map->toMultipart(multipart, U("topic_map."));
        }
        
    }
    if(m_Updated_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("updated_date"), m_Updated_date));
    }
    if(m_User_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("user_count"), m_User_count));
    }
}

void Topic::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("created_date")))
    {
        setCreatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("created_date"))));
    }
    if(multipart->hasContent(U("display_name")))
    {
        setDisplayName(ModelBase::stringFromHttpContent(multipart->getContent(U("display_name"))));
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("locked")))
    {
        setLocked(ModelBase::boolFromHttpContent(multipart->getContent(U("locked"))));
    }
    {
        m_Tags.clear();
        if(multipart->hasContent(U("tags")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("tags"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Tags.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(multipart->hasContent(U("topic_map")))
    {
        if(multipart->hasContent(U("topic_map")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, U("topic_map."));
            setTopicMap( newItem );
        }
    }
    if(multipart->hasContent(U("updated_date")))
    {
        setUpdatedDate(ModelBase::int64_tFromHttpContent(multipart->getContent(U("updated_date"))));
    }
    if(multipart->hasContent(U("user_count")))
    {
        setUserCount(ModelBase::int32_tFromHttpContent(multipart->getContent(U("user_count"))));
    }
}

int64_t Topic::getCreatedDate() const
{
    return m_Created_date;
}


void Topic::setCreatedDate(int64_t value)
{
    m_Created_date = value;
    m_Created_dateIsSet = true;
}
bool Topic::createdDateIsSet() const
{
    return m_Created_dateIsSet;
}

void Topic::unsetCreated_date()
{
    m_Created_dateIsSet = false;
}

utility::string_t Topic::getDisplayName() const
{
    return m_Display_name;
}


void Topic::setDisplayName(utility::string_t value)
{
    m_Display_name = value;
    m_Display_nameIsSet = true;
}
bool Topic::displayNameIsSet() const
{
    return m_Display_nameIsSet;
}

void Topic::unsetDisplay_name()
{
    m_Display_nameIsSet = false;
}

utility::string_t Topic::getId() const
{
    return m_Id;
}


void Topic::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Topic::idIsSet() const
{
    return m_IdIsSet;
}

void Topic::unsetId()
{
    m_IdIsSet = false;
}

bool Topic::getLocked() const
{
    return m_Locked;
}


void Topic::setLocked(bool value)
{
    m_Locked = value;
    m_LockedIsSet = true;
}
bool Topic::lockedIsSet() const
{
    return m_LockedIsSet;
}

void Topic::unsetLocked()
{
    m_LockedIsSet = false;
}

std::vector<utility::string_t>& Topic::getTags()
{
    return m_Tags;
}

void Topic::setTags(std::vector<utility::string_t> value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}
bool Topic::tagsIsSet() const
{
    return m_TagsIsSet;
}

void Topic::unsetTags()
{
    m_TagsIsSet = false;
}

std::shared_ptr<Object> Topic::getTopicMap() const
{
    return m_Topic_map;
}


void Topic::setTopicMap(std::shared_ptr<Object> value)
{
    m_Topic_map = value;
    m_Topic_mapIsSet = true;
}
bool Topic::topicMapIsSet() const
{
    return m_Topic_mapIsSet;
}

void Topic::unsetTopic_map()
{
    m_Topic_mapIsSet = false;
}

int64_t Topic::getUpdatedDate() const
{
    return m_Updated_date;
}


void Topic::setUpdatedDate(int64_t value)
{
    m_Updated_date = value;
    m_Updated_dateIsSet = true;
}
bool Topic::updatedDateIsSet() const
{
    return m_Updated_dateIsSet;
}

void Topic::unsetUpdated_date()
{
    m_Updated_dateIsSet = false;
}

int32_t Topic::getUserCount() const
{
    return m_User_count;
}


void Topic::setUserCount(int32_t value)
{
    m_User_count = value;
    m_User_countIsSet = true;
}
bool Topic::userCountIsSet() const
{
    return m_User_countIsSet;
}

void Topic::unsetUser_count()
{
    m_User_countIsSet = false;
}

}
}
}
}

