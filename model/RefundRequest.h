/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * RefundRequest.h
 *
 * 
 */

#ifndef RefundRequest_H_
#define RefundRequest_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  RefundRequest
    : public ModelBase
{
public:
    RefundRequest();
    virtual ~RefundRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// RefundRequest members

    /// <summary>
    /// The amount to refund. If left off, will refund the remaining balance of the transaction or specific item balance (if SKU provided), whichever is less.
    /// </summary>
    double getAmount() const;
    void setAmount(double value);
    bool amountIsSet() const;
    void unsetAmount();
    /// <summary>
    /// Notes about or reason for the refund
    /// </summary>
    utility::string_t getNotes() const;
    void setNotes(utility::string_t value);
        /// <summary>
    /// The SKU of a specific item from the invoice to refund. Affects the maximum refund amount (not to exceed the price of this item times quantity on invoice). Transaction must be tied to an invoice if used.
    /// </summary>
    utility::string_t getSku() const;
    void setSku(utility::string_t value);
    bool skuIsSet() const;
    void unsetSku();

protected:
    double m_Amount;
    bool m_AmountIsSet;
utility::string_t m_Notes;
    utility::string_t m_Sku;
    bool m_SkuIsSet;
};

}
}
}
}

#endif /* RefundRequest_H_ */
