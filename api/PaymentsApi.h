/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com.
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * PaymentsApi.h
 *
 * 
 */

#ifndef PaymentsApi_H_
#define PaymentsApi_H_


#include "ApiClient.h"

#include "PaymentAuthorizationResource.h"
#include "PaymentMethodResource.h"
#include "Result.h"
#include <cpprest/details/basic_types.h>

namespace com {
namespace knetikcloud {
namespace client {
namespace api {

using namespace com::knetikcloud::client::model;

class  PaymentsApi
{
public:
    PaymentsApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~PaymentsApi();
    /// <summary>
    /// Create a new payment method for a user
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="userId">ID of the user for whom the payment method is being created</param>/// <param name="paymentMethod">Payment method being created (optional)</param>
    pplx::task<std::shared_ptr<PaymentMethodResource>> createPaymentMethod(int32_t userId, std::shared_ptr<PaymentMethodResource> paymentMethod);
    /// <summary>
    /// Delete an existing payment method for a user
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="userId">ID of the user for whom the payment method is being updated</param>/// <param name="id">ID of the payment method being deleted</param>
    pplx::task<void> deletePaymentMethod(int32_t userId, int32_t id);
    /// <summary>
    /// Get a single payment method for a user
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="userId">ID of the user for whom the payment method is being retrieved</param>/// <param name="id">ID of the payment method being retrieved</param>
    pplx::task<std::shared_ptr<PaymentMethodResource>> getPaymentMethod(int32_t userId, int32_t id);
    /// <summary>
    /// Get all payment methods for a user
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="userId">ID of the user for whom the payment methods are being retrieved</param>/// <param name="filterName">Filter for payment methods whose name starts with a given string (optional)</param>/// <param name="filterPaymentType">Filter for payment methods with a specific payment type (optional)</param>/// <param name="filterPaymentMethodTypeId">Filter for payment methods with a specific payment method type by id (optional)</param>/// <param name="filterPaymentMethodTypeName">Filter for payment methods whose payment method type name starts with a given string (optional)</param>/// <param name="size">The number of objects returned per page (optional, default to 25)</param>/// <param name="page">The number of the page returned, starting with 1 (optional, default to 1)</param>/// <param name="order">a comma separated list of sorting requirements in priority order, each entry matching PROPERTY_NAME:[ASC|DESC] (optional, default to id:ASC)</param>
    pplx::task<std::vector<std::shared_ptr<PaymentMethodResource>>> getPaymentMethods(int32_t userId, utility::string_t filterName, utility::string_t filterPaymentType, int32_t filterPaymentMethodTypeId, utility::string_t filterPaymentMethodTypeName, int32_t size, int32_t page, utility::string_t order);
    /// <summary>
    /// Authorize payment of an invoice for later capture
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="request">Payment authorization request (optional)</param>
    pplx::task<std::shared_ptr<PaymentAuthorizationResource>> paymentAuthorization(std::shared_ptr<PaymentAuthorizationResource> request);
    /// <summary>
    /// Capture an existing invoice payment authorization
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">ID of the payment authorization to capture</param>
    pplx::task<void> paymentCapture(int32_t id);
    /// <summary>
    /// Update an existing payment method for a user
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="userId">ID of the user for whom the payment method is being updated</param>/// <param name="id">ID of the payment method being updated</param>/// <param name="paymentMethod">The updated payment method data (optional)</param>
    pplx::task<std::shared_ptr<PaymentMethodResource>> updatePaymentMethod(int32_t userId, int32_t id, std::shared_ptr<PaymentMethodResource> paymentMethod);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* PaymentsApi_H_ */

