/**
 * Knetik Platform API Documentation latest 
 * This is the spec for the Knetik API.  Use this in conjunction with the documentation found at https://knetikcloud.com
 *
 * OpenAPI spec version: latest 
 * Contact: support@knetik.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "InvoicePaymentStatusRequest.h"

namespace com {
namespace knetikcloud {
namespace client {
namespace model {

InvoicePaymentStatusRequest::InvoicePaymentStatusRequest()
{
    m_Payment_method_id = 0;
    m_Payment_method_idIsSet = false;
    m_Status = U("");
    
}

InvoicePaymentStatusRequest::~InvoicePaymentStatusRequest()
{
}

void InvoicePaymentStatusRequest::validate()
{
    // TODO: implement validation
}

web::json::value InvoicePaymentStatusRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Payment_method_idIsSet)
    {
        val[U("payment_method_id")] = ModelBase::toJson(m_Payment_method_id);
    }
    val[U("status")] = ModelBase::toJson(m_Status);
    

    return val;
}

void InvoicePaymentStatusRequest::fromJson(web::json::value& val)
{
    if(val.has_field(U("payment_method_id")))
    {
        setPaymentMethodId(ModelBase::int32_tFromJson(val[U("payment_method_id")]));
    }
    setStatus(ModelBase::stringFromJson(val[U("status")]));
    
}

void InvoicePaymentStatusRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Payment_method_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("payment_method_id"), m_Payment_method_id));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("status"), m_Status));
    
}

void InvoicePaymentStatusRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("payment_method_id")))
    {
        setPaymentMethodId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("payment_method_id"))));
    }
    setStatus(ModelBase::stringFromHttpContent(multipart->getContent(U("status"))));
    
}


int32_t InvoicePaymentStatusRequest::getPaymentMethodId() const
{
    return m_Payment_method_id;
}
void InvoicePaymentStatusRequest::setPaymentMethodId(int32_t value)
{
    m_Payment_method_id = value;
    m_Payment_method_idIsSet = true;
}
bool InvoicePaymentStatusRequest::payment_method_idIsSet() const
{
    return m_Payment_method_idIsSet;
}
void InvoicePaymentStatusRequest::unsetPayment_method_id()
{
    m_Payment_method_idIsSet = false;
}
utility::string_t InvoicePaymentStatusRequest::getStatus() const
{
    return m_Status;
}
void InvoicePaymentStatusRequest::setStatus(utility::string_t value)
{
    m_Status = value;
    
}

}
}
}
}

